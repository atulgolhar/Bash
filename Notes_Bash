# Books

# Learning Unix for OS X - Going Deep With The Terminal and Shell - Dave Taylor 2016
# Sams Teach Yourself Unix in 24 hours Dave Taylor 2016
            # Hour 9 Slicing and Dicing Command-Pipe Data 
            # -----------The awk Programming System 
            # -----------How to Use cut in Pipes 
            # -----------Inline Editing with sed and tr
# https://medium.com/@duruldalkanat/bash-commands-guide-129c81cbfe87
# Bash Cookbook 2nd Ed 2018     Bash Cookbook (2018)
# Wicked Cool Shell Scripts <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
# Unix Shell Programming <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
# Learning the Unix Operating System 4th Ed Jerry Peek 1998


#!/usr/bin/env python3
# cd //

# Notes_BASH_py

$ ls -a
$ ls -a
$ ls -F
$ ls -s
$ ls -al67
$ ls -l 
$ ls -nl 
$ ls -c 

$ man -       # Print a help message and exit ?
$ man -V
$ man -V -- version
$ man -version
$ man -v

$ env
$ date
$ pwd
$ cal

===============================================================================================
===============================================================================================
===============================================================================================
===============================================================================================
===============================================================================================
===============================================================================================
===============================================================================================
===============================================================================================
===============================================================================================
===============================================================================================
# Learning Unix for OS X - Going Deep With The Terminal and Shell - Dave Taylor 2016

-----------------------------------------------------------------------------------------------
Chapter 
1 Why Use Unix? 
2 Using the Terminal 
3 Exploring the Filesystem
4 File Management 
5 Finding Files and Information 
6 Redirecting I/O 
7 Multitasking 
8 Taking Unix Online 
9 Of Windows and X11
10 Where to go from here 
-----------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------
Chapter 
----1 Why Use Unix?

ps -acx             # lists every open application
                    # PID = Process Identification Number
                    # daemon = always running system level task
                    # grep = Unix search tool

cd /Volumes/Thumb           # takes you to the Volumes directory which is where the thumb drive is mounted
cp *-dt-* *-nt-* ~          # cp                copy
                            # *-dt-* *-nt-*     tell copy command to look for these items
                            # ~                 refers to the current user's home folder or directory
                            #                   so by placing at end of the line, telling cp to copy each file
                            #                   to your home directory

www.gimp.org 
www.neooffice.org 

Shift Esc ?                 # displays all binary executables --> all Unix programs    



# UNIX Commands

10 (11) Most Common Unix Commands
ls 
exit
cp original_file copied_file            # copy from one location to another
mv original_file new_file               # move. note original file is deleted once operation is complete
mv intro.doc ~/Desktop/preface.doc      # move and rename it
touch filename                          # adds that file
rm filename                             # remove
pwd 
cd                                      # takes you to home directory
cd directory_name                       # change directory
man command_name                    # access OS X built-in documentation manpage      man ls
less filename                       # displays long text file, one screen at time using space bar. quit using q
grep pattern filename(s)            # search 
top                                 # shows you which applications and processes are running on your system

mkdir

CONTROL G  ^G  Goto line 

HOW TO FORCE TERMINATE Command line? quadratic.py example 

Building a program from scratch - order of what to do next?

COMMAND 
python3 filename.py < ingestion_from_file.csv > output_to_file.html 
python3 filename.py < data/ingestion_from_file.csv > data/output_to_file.html 

sort --help
info
info ls

        """
        # Learning Unix for OS X - Going Deep With The Terminal and Shell - Dave Taylor 2016
        -----------------------------------------------------------------------------------------------
        Chapter 
        1 Why Use Unix? 
        2 Using the Terminal 
        3 Exploring the Filesystem
        4 File Management 
        5 Finding Files and Information 
        6 Redirecting I/O 
        7 Multitasking 
        8 Taking Unix Online 
        9 Of Windows and X11
        10 Where to go from here 
        --------------------------------------------------------------------------------------------
        """
        
-----------------------------------------------------------------------------------------------
Chapter 
----2 Using the Terminal 

sort -o sorted -n sortme        # tell sort to write the sorted text to a filename given after its -o option
                                # sort reads the file sortme (given as an argument), and writes to the file sorted
# also could have written above like this:
sort -0 -n sorted sortme 


ls -l               # -l long format
ls -l chap1       
ls -al              # -a all format
ls -l test*
ls -asF
ls -1
ls -s /var/log
ls -d Library

date 
who
who -u 
who -finger
who -w

open -a Chess       # Graphical program
# noninteractive Unix program
# interactive Unix program - see Chap 3 and 4

----Changing Terminal Preferences 

--------Using AppleScript to Manipulate the Terminal 

osascript -e \
'tell app "Termainal" to set miniaturized of first window to true'

--------Working with .terminal Files 

Shell --> Export settings 
Window --> Save Windows as a Group 

top -f/var/log/systems.log
tail -f/var/log/systems.log
man top 
man tail 

----Working with the Terminal Window

ls
# Find, Find Next, Find Previous, 
# Jump
# Export Text As
# Print 
# Scroll to Top or Bottom

# relative path vs absolute path
cd .. # relative
/path/to/               stuff
# try
cd stuff

/path/to/
# want to navigate to /another/completely/different/path/
cd /another/completely/different/path/

date
who
who -u
who am i
who am i;date 

open -a Chess           open application Chess 

ftp 
ftp> quit

--------Completing File and Directory Names

--------Running Multiple Commands on the Command Line 
cd ~; date; du -s; date

--------Correcting a Command

Delete
Control H 
Control C 
Control U 
Control S 
Control Q 
Control D 

--------Ending Your Session 
exit 

--------Problem Checklist 
#           "logout: not login shell"
            exit 

#           job control
            fg      # to bring stopped job into foreground, then need to quit 
            jobs

----Customizing the Shell Enivironment

chsh
Korn shell      # Learning the Korn Shell
ksh 


--------Changing the Command Prompt
PS1="$ "
PS1='$ '

# if you want this to take effect every time you start a shell, use vi editor
# to create a file called .profile in your home directory       /Users/your_name
# and then add the following to the end of the file             export PS1="$ "
export PS1="$ "
# see Vi editor in Chap 4
# \w            current working directory
# \W            trailing element of the pwd with ~ substitution
# \!            current command history number 
# \H            full hostname 
# \h            hostname up to the first dot
# \@            time of day in 12 hour format
# \A            time 24 hour day format 
# \u            username 
# \$            A # if the effective user ID is zero (root), or a $ otherwise 

# play with it
$ PS1="$ Yes? "
$ PS1="\w \! \$ "           # current working directory, then number of command you execute
                            # then '#' for when running as the administrator account
                            # vs   '$' for when running but not as root
                            # example
                            # ~ 55 $    = /Users/taylor is the current root directory and 55thd command
                            # Suggestion: on multiuser systems, put the username into the prompt
                            # Also considerusing the hostname so you will know which system you are
                            # logged into

----Advanced Shell Customization pg 35

--------Shell Configuration Settings 

# b/c Unix is a multiuser system, there are two possible locations for the configuration files:
# 1st one applies to all users
# 2nd one applies to each indivdiual user 

# 1st
# system wide files are read by bash and found in
# /etc (profile and bashrc)
# you ONLY have permission to change these systemwide files if you use sudo (see pg 72, Chap 3)

# HOWEVER, you can create another file called .profile in your home directory that will add
# additional commands to be executed whenever you start a new Terminal window
man csh 
# sysetm wide files are read first then user-specific setup files
# this is so commands in your .profile file can override those in the system-wide files

# example of system-wide bashrc file

#       $ cat /etc/bashrc
#       # System-wide .bashrc file for interactive bash(1) shells.
#       if [ -z "$PS1" ]; then
#           return
#       fi
#       
#       PS1='\h:\W |u|$ '
#       # Make bash check its window size after a process completes
#       shopt -s checkwinsize 
#
#       [ -r "/etc/bashrc_$TERM-PROGRAM" ] && . "/etc/bashrc_$TERM_PROGRAM" 


-rw-------    1 atulgolhar  staff    4745 Dec 12 12:54 .bash_history
-rw-r--r--    1 atulgolhar  staff     302 Mar  8  2016 .bash_profile
-rw-r--r--    1 atulgolhar  staff     135 Nov 25  2014 .bash_profile.pysave
-rw-------    1 atulgolhar  staff      60 Nov 18  2014 .bash_profile.save
-rw-------    1 atulgolhar  staff      95 Nov 18  2014 .bash_profile.save.1
-rw-r--r--    1 atulgolhar  staff      58 Oct 30  2014 .bash_profile~
drwx------  236 atulgolhar  staff    7552 Dec 13 12:24 .bash_sessions

drwxr-xr-x    5 atulgolhar  staff     160 Oct 30  2014 .rbenv

-rw-------    1 atulgolhar  staff     134 Mar 29  2016 .sh_history
drwx------    5 atulgolhar  staff     160 Oct 16  2014 .ssh
drwxr-xr-x    6 atulgolhar  staff     192 Oct 30  2014 .subversion
drwxr-xr-x    3 atulgolhar  staff      96 Dec 20  2016 .vim
-rw-------    1 atulgolhar  staff    5832 Dec 12 12:12 .viminfo


Shell Configuration Settings (cont)

# system-wide setup files are read first then user-specific files
# so commands in your .profile file can override the system-wide files 

# example of system-wide bashrc file is here

$ cat /etc/bashrc 
# System-wide  .bashrc file for interactive bash(1) shells.
if [ -z "PS1" ]; then 
    return 
fi 

PS1='\h:\W \u\$ ' 
# Make bash check its window size after a process completes
shopt -s checkwinsize

[ -r "/etc/bashrc_$TERM_PROGRAM" ] && . "/etc.bashrc_$TERM_PROGRAM"

# your own profile file is prefaced with a . to hide it from Finder 
# this file can contain any shell command you want automatically to run whenever
# you open a new Terminal window 
# some examples of what you can do
# changing the shell prompt, setting environmental variables, setting aliases, 
# adding to the search path

# author .profile file looks like this

PS1="\w (\!): "         #1

export PATH=$HOME/bin:/opt/local/bin:/opt/local/sbin:$PATH          #2

export SVN_EDITOR=/usr/bin/vi                                       #3

alias scale=~/bin/scale.sh                                          #4
alias ls="ls -F"
alias vps="ssh dtaylor@intuitive.com"

date                    #5

# what this means?
#1 this line tells the shell to use a different prompt than the standard one
#  see Changing the Command Prompt pg 33 Chap 1.
#  this particular prompt by the author offers him a succinct prompt that also informative
#  /bin (518): 
# what is this?
# /w            --> shows current working directory followed by space
# (518)         --> shows current history number
# :             --> shows a : which reminds user that 

#2 this line sets a shell varaible that the shell itsel uses as its search path for
#  finding commands that are typed in. Usually the default PATH is fine, but since I 
#  have some local programs and scripts I have written, this line lets me use them 
#  without specifying their location in the filesystem each time.
#               /bin:/opt/local/
#               /bin:/opt/local/sbin

#3 this line specifies what editor the SVN command should use by default (vi)
#  Not all commands recognize environment variables, but for those that do, this
#  type of environment variable setting saves you the trouble of typing the
#  options on every command line.

#4 these three lines define new custom commands that the shell will recognize just as
#  if they were built-in Unix commands.
#  Aliases are a great way to save shorthand names for long, complicated Unix command lines,
#  or even to fix common mistakes you might make when typing command lines.
#  These particular aliases crate:
#  4(1) a command for launching my image-scaling shell script (scale.sh)
#  4(2) add a favorite flag to the ls command, and
#  4(3) let me invoke the secure shell utility (ssh) with the account 

#5 this line runs the date command when a new Terminal windows is opened.

# Note, by default, the .profile file does NOT yet exist in your home directory.
# only the system-wide configuration files are read each time a Terminal window is opened.
# If you create this file in your home directory, it will be read and its contents executed
# the next time you start a shell.
# Dont use Microsoft Word b/c it breaks long lines, and also puts special nontext codes into the file.
# TextEdit can work but only if you Format-->Make Plain Text (SHIFT LOOPEDBOX_COMMAND T)

# Note, you can execute any customization command discussed here from the command line as well
# and that change takes effect only until you close the window or quit Terminal.
# For example, to change the default options for the other
                                                           less # command so it cleats the
# Terminal window before showing each new page of text, you could add the -c option to the
# LESS environment variable. The command looks like this:
export LESS='eMqc'
# See chapter 10 for book suggestions about creating your own optimal computing environment.

#       use # for when running as a root
#       use $ for when running as NOT root (ie anything other than root)

        Directory Utility
        _launcservicesd 
        _serialnumberd 
        _xcsbuildagent 
        _xcscredserver 
        AMaViS Daemon 
        Analytics Daemon 
        Appled Events User 
        Apple Remote Desktop 
        AppleEvents Daemon 
        applepay Account 
        Application Owner 
        Application Server 
        Asset Cache Service 
        Astris Services 
        ATS Server 
        Atul Golhar 
        AutoTimeZoneDaemon 
        Calendar 
        captiveagent 
        Cerficate Enrollment Service 
        ClamAV Daemon 
        Core Audio Daemon 
        Core Media IO Daemon 
        CoreMedia IO Assitants User 
        ctkd Account 
        CVMS Root 
        CVS Server 
        Cyrus Administrator 
        DataDectectors
        Developer Documentation 
        Device Management Server 
        Display Policy Daemon 
        DistNote
        Dovecot Administrator 
        Dovecot Authentication 
        DP Audio 
        Ethernet AVB Device Daemon 
        Find My Device Daemon 
        FPS Daemon 
        FTP Daemon 
        Game Controller Daemon 
        Geo Services Daemon 
        HID Service User 
        IconServices
        Install Assistant 
        Installer 
        iPhone OS Device Helper 
        Jabber XMPP Server 
        Kerberos Admin Service 
        Kerberos Change Password Service 
        Kerberos Ticket Granting Ticket 
        Local Delivery Agent 
        Location Daemon 
        Mac App Store Service 
        Mailman List Server 
        MCX AppLaunch 
        mDNSResponder 
        MobileAsset User 
        MySQL Server 
        NetBIOS 
        Network Services 
        Network Statistics Daemon 
        NSURLSession Daemon 
        NSURLStorage Daemon 
        On Demand Resource Daemon 
        Open Directory Kerberos 
        Open Directory Kerberos Anonymous 
        Open Directory Kerberos Change Password Service 
        Open Directory Kerberos Ticket Granting Ticket 
        Postfix Mail Server 
        PostgreSQL Server 
        ReportMemoryException 
        Screensaver 
        Seatbelt 
        SecurityAgent
        Service Update Service 
        Spotlight 
        sshd Privledge separation 
        SVN Server 
        System Administrator 
        System Services 
        Task Gate Daemon 
        TeamsServer 
        Time Synch Daemon 
        Token Daemon 
        Trust Evaluation Agent 
        Unix to Unix Copy Protocol 
        Unknown User 
        Unprivledged User 
        Update Sharing 
        Warm Daemon 
        Web Auth Server 
        WindowServer 
        World Wide Web Server 
        WWW Proxy 


--------Creating Aliases

# a shell alias is a simple mechanism that lets you create your own command names
# that act exactly as you desire:
# For example, author likes -a and -F options to be included every time he lists
# the directory with ls so he created the following alias:
$ alias ls="/bin/ls -aF"
# so now every time he enters ls then the -aF options are also run as well.
# to make this happen, you must add the alias to your .profile file

# can also have aliases that let you jump quickly to common locations, 
# particularly helpful trick in OS X.
$ alias desktop="cd ~/Desktop"
# so now, all you need to do is enter 
                                      desktop # at the command prompt and your taken
# taken to your Desktop directory. Here the shell looks at its .profile file, sees that
# desktop is an alias, and runs the commands found the quotes.

# another set of useful aliases is to automatically set the rm, cp, and mv commands into 
# interactive mode, using their -i option. See Chap 4.
$ alias rm="rm -i"
$ alias cp="cp -i"
$ alias mv="mv -i"

# to list all active aliases, just type alias in command line prompt (CLP)
$ alias 
# to temporarily get rid of an alias, use
unalias ls # which removes the -aF option added earlier.
# to permanently remove the options, you will need to delete those lines from .bashrc or .profile


----Unresponsive Terminal 
# hung or frozen terminal or session
# try CONTROL L which clears the screen and displays the prompt.

# try these steps in order shown until the system responds:

# 1 Press the Return key once
# 2 Try job control (see Chap 7), press CONTROL Z. This suspends the program running in 
#   the foreground and gives you a new shell prompt.
# 3 Press CONTROL C or COMMAND_LOOPED. This interrupts a program that may be running.
#   Try this again, ie a 2nd time. Any more than twice doesnt matter.
# 4 Press CONTROL Q. This restarts the previously paused process.
# 5 Press CONTROL D once at the beginning a new line. As some programs expect an end-of-input-character
#   note that this may cause you to log out.
# 6 Last Resort, Press CONTROL W to close the window and open a new one.

        """
        # Learning Unix for OS X - Going Deep With The Terminal and Shell - Dave Taylor 2016
        -----------------------------------------------------------------------------------------------
        Chapter 
        1 Why Use Unix? 
        2 Using the Terminal 
        3 Exploring the Filesystem
        4 File Management 
        5 Finding Files and Information 
        6 Redirecting I/O 
        7 Multitasking 
        8 Taking Unix Online 
        9 Of Windows and X11
        10 Where to go from here 
        --------------------------------------------------------------------------------------------
        """

-----------------------------------------------------------------------------------------------
Chapter 
3 Exploring the Filesystem

----The OS X Filesystem
---- ----Your Home Directory

$ echo $HOME        # takes you to your home directory
$ cd /              # to change diretories to the root level

---- ----Your Working Directory

# you can create file1 which exists in another directory
$ vi /Users/john/Documents/report   # creates report file in that directory while sitting else where

# if have more than one Terminal window open then each shell has its own working directory
$ pwd 

---- ----The Directory Tree 

# parent directory is the root directory and is written by a forward slash (/)
# subdirectories hidden from Finder but can see in Terminal are called subdirectories
# such as bin, dev etc, sbin, tmp, sur, and var
# bin means binaries

# pathname is the address of the directory or file

# filesystem on your computer
# networked filesystems on remote computers appear as if part of your computer
# can mount shared directories. How? Finder's menu bar, select Go --> Connect to Server

---- ----Absolute Pathnames     # always start with /

/Users/john         # this is an absolute pathname.
                    # root directory is teh first slash
                    # directory Users is second
                    # directory john is last.
# no spaces
# if using spaces, then need to preface each space with a backslash (\) to ensure that 
# the shell understands that spaces are part of the pahtname itself.
# backslash is known as an escape chacacter.
# root directory is always indicated by the slash at the start of the pathname.

---- ----Relative Pathnames     # no slash to start
                                # assume start from pwd

# relative pathname gives the location relative to your pwd

---- ---- ---- Relative pathnames up 

..

---- ----Changing Your Working Directory 

pwd         # print working directory 
cd          # change directory 
# if long pathname, then you can drag folder from Finder to Terminal for example:

Atuls-MacBook-Pro:~ atulgolhar$ cd /Users/atulgolhar/Projects/CodeSchool/Soup_to_Bits_Rails_for_Zombies.rb 


---- ----Files in the Directory Tree 

# Unix can hold the following: 
# symbolic links (similiar to aliases in OS X)
# devices = see the /dev directory
# sockets = network communication channels

# create folder in Terminal but see in Finder concurrently
$ cd 
$ touch mac-rocks 
# folder appears
$ rm mac-rocks
# folder disappears


----Listing Files and Directories 
---- ----All-Powerful ls Command 

ls  
ls -a           # .. is always the relative pathname to the parent directory
                # . is always the current directory 
    
---- ----Trying Out the ls Command   

ls -F           # lists directories only and appends forward slash to end of their name
                # lists * for any executable programs or scripts
                # lists @ for any symbolic link
ls -s           # size
ls -du          # later in Chapter 3
ls -sF Library/Preferences      # some directories are 0 size
                                # some directores are big
                                # why difference? some applications have quite a bit of information
                                # that they store as preferences, while others save only preference
                                # settings that are different from the default configuration.

ls -s /var/log  # first line is always sum of the size of all files in the specified directory
                # Atul's shows 122,416 512-byte blocks = 122416 / 2 = number of kilobytes (KB).

# classic conundrum with ls command. You want to see whether a folder exists or not, but
# you do not want to see listing of what is inside, so use this:
ls -d nameofdirectory

Atuls-MacBook-Pro:~ atulgolhar$ 
Atuls-MacBook-Pro:~ atulgolhar$ ls -d Library
Library
Atuls-MacBook-Pro:~ atulgolhar$ ls -d           # confirms that current directory is indeed .
.
Atuls-MacBook-Pro:~ atulgolhar$ ls -d Jennifer
ls: Jennifer: No such file or directory
Atuls-MacBook-Pro:~ atulgolhar$ 



---- ----Using the -l Option 

ls -l
ls -al 
ls -n               # states amount of storage space used by everything in this directory
                    # as measured in blocks, which for OS X are 512 bytes in size.
ls -d 

---- ----File Permissions
                # 10 characters total

d               # File Type (d directory or - plain file)
 rwx            # Owner's file permission (r read, w write, x execute marked by *)
                #                                  w means deleting, renaming, or adding files
    r-x         # Group file permission 
       ---      # Other file permission

positions:
1               # d or -
 234            # show permissions for file's owner
    567         # group file permissions, such as marketing team
       890      # other file permissions for all other users

chmod # to change permissions of your files and directories

Atuls-MacBook-Pro:~ atulgolhar$ ls -l
total 296
-rw-r--r--@  1 atulgolhar  staff   27259 Nov 18  2013 9781449332310.gif
drwxr-xr-x  11 atulgolhar  staff     352 Jun 15  2018 AndroidStudioProjects
drwx------   5 atulgolhar  staff     160 Sep 16  2017 Applications
drwxr-xr-x   2 atulgolhar  staff      64 Feb 13  2017 Bamboo
drwx------+ 11 atulgolhar  staff     352 Nov 30 13:27 Desktop
drwx------+  9 atulgolhar  staff     288 Oct 17  2017 Documents
drwx------+  5 atulgolhar  staff     160 Dec  8 08:00 Downloads
drwx------@ 75 atulgolhar  staff    2400 Dec 11 11:12 Library
drwxr-xr-x   3 atulgolhar  staff      96 Jan 12  2015 MicroStrategy
drwx------+  3 atulgolhar  staff      96 Oct  9  2014 Movies
drwx------+  5 atulgolhar  staff     160 Aug 26  2015 Music
drwxr-xr-x   5 atulgolhar  staff     160 Jan 18  2017 NetBeansProjects
drwx------+  6 atulgolhar  staff     192 Dec  3 11:30 Pictures
drwxr-xr-x  40 atulgolhar  staff    1280 Nov 13 11:35 Projects
drwxr-xr-x+  5 atulgolhar  staff     160 Oct  9  2014 Public
drwxr-xr-x  11 atulgolhar  staff     352 Feb 10  2015 R
-rw-r--r--@  1 atulgolhar  staff  108138 Feb 10  2015 ReadMeXQuartz.pdf
drwxr-xr-x   9 atulgolhar  staff     288 Dec 10  2014 Sites
drwxr-xr-x   4 atulgolhar  staff     128 Jan 19  2017 TempDir
drwxr-xr-x  23 atulgolhar  staff     736 Sep 17 13:29 Tennis
drwx------   5 atulgolhar  staff     160 Feb 25  2016 VirtualBox VMs
drwxr-xr-x   2 atulgolhar  staff      64 Nov 18  2014 bin
drwxr-xr-x   4 atulgolhar  staff     128 Oct 30  2014 bundler_test
drwxr-xr-x   3 atulgolhar  staff      96 Feb  2  2017 eclipse
-rw-r--r--   1 atulgolhar  staff      11 May 22  2018 octave-workspace
-rw-r--r--@  1 atulgolhar  staff    2115 Jan 17  2017 pagedata1
-rw-r--r--@  1 atulgolhar  staff     266 Jan 18  2017 save.gif


$ cd /Applications 
$ ls -F         # places slash / at the end of each directory name 
$ pwd 

ls -R   # lists directory and all its subdirectories
        # piping the output of ls to a pager program solves the long output issue.


----Calculating File Size and Disk Space 

$ du Documents/Outline.doc      # gives reported side in 512-byte blocks.
$ du Library                    # gives size of everything insoide
$ du -s Library              # summarize function

# to find separate totals for all directories and files, including hidden ones, use wildcard pattern
# that ignores current (.) and parent (..) directories:
$ du -s * .[^.]*

# to find information about size of the stanard user application, use the pattern /Applications/*.app:
$ du -s /Applications/*.app         # size of standard user applications
$ du -sh Library/*                  # more readable output


$ du -s /Library/* | sort -rn 
$ du -s /Library/* | sort -rn | head        # using command pipes and sort function

--------Calculating Available Disk Space

$ df -h     # free disk space by column
            # 1st column shows Unix device name for the volume
            # 2nd column total disk size
            # 3rd column amount disk space Used up
            # 4th column Available
            # 5th Capacity shown at 100% b/c they are not regular disks, but special Unix devices
Filesystem      Size   Used  Avail Capacity iused               ifree %iused  Mounted on
/dev/disk1s1   466Gi  411Gi   53Gi    89% 1644284 9223372036853131523    0%   /
devfs          184Ki  184Ki    0Bi   100%     638                   0  100%   /dev
/dev/disk1s4   466Gi  1.0Gi   53Gi     2%       1 9223372036854775806    0%   /private/var/vm
map -hosts       0Bi    0Bi    0Bi   100%       0                   0  100%   /net
map auto_home    0Bi    0Bi    0Bi   100%       0                   0  100%   /home
Atuls-MacBook-Pro:~ atulgolhar$ 

# filesystems are built from chained sets of blocks of data, so the larger the file, the more
# blocks are connected in the chain. Each block is referred to as an inode.
# df shows iused, ifree, and %iused --> safely ignore these values (ATUL why?)
            # Mounted on
                # / is the root of your filesystem
                # /dev contains files that correspdond to hardware devices
                # /.vol exposes some internals of the OS X filesystem called the HFS+ file ID

$ df -H     # same as above but more friendly output of divide-by-10 rule for calculating sizes
            # rather then the more mathematically precise divide-by-2 rule of the -h flag
Atuls-MacBook-Pro:~ atulgolhar$ df -H
Filesystem      Size   Used  Avail Capacity iused               ifree %iused  Mounted on
/dev/disk1s1    500G   441G    57G    89% 1644285 9223372036853131522    0%   /
devfs           188k   188k     0B   100%     638                   0  100%   /dev
/dev/disk1s4    500G   1.1G    57G     2%       1 9223372036854775806    0%   /private/var/vm
map -hosts        0B     0B     0B   100%       0                   0  100%   /net
map auto_home     0B     0B     0B   100%       0                   0  100%   /home

$ df -m     # rounds down all tiny OS partitions like devfs and .vol to zero

map auto_home     0B     0B     0B   100%       0                   0  100%   /home
Atuls-MacBook-Pro:~ atulgolhar$ df -m
Filesystem    1M-blocks   Used Available Capacity iused               ifree %iused  Mounted on
/dev/disk1s1     476902 420546     54640    89% 1644285 9223372036853131522    0%   /
devfs                 0      0         0   100%     638                   0  100%   /dev
/dev/disk1s4     476902   1024     54640     2%       1 9223372036854775806    0%   /private/var/vm
map -hosts            0      0         0   100%       0                   0  100%   /net
map auto_home         0      0         0   100


# inodes = are the fundamental disk blcoks that are grafted together to make space for
# all the different sized files in your filesystem. A given disk in Unix has a finite number
# of files and directories that can be created, and even if there is additional disk space 
# available, running out of inodes effectively stops the disk from being used. Can happen if
# you have millions and millions of tiny files.


$ df -i         # shows how your doing with inodes, providing details on how many iodes
                # are allocated and available on each filesystem

Atuls-MacBook-Pro:~ atulgolhar$ df -i
Filesystem    512-blocks      Used Available Capacity iused               ifree %iused  Mounted on
/dev/disk1s1   976695384 861280192 111902776    89% 1644286 9223372036853131521    0%   /
devfs                368       368         0   100%     638                   0  100%   /dev
/dev/disk1s4   976695384   2097192 111902776     2%       1 9223372036854775806    0%   /private/var/vm
map -hosts             0         0         0   100%       0                   0  100%   /net
map auto_home          0         0         0   100%       0                   0  100%   /home
Atuls-MacBook-Pro:~ atulgolhar$ 


--------Exercise: Exploring the Filesystem 
            # go to home directory
            Atuls-MacBook-Pro:~ atulgolhar$ cd

            # find your working directory
            Atuls-MacBook-Pro:~ atulgolhar$ pwd
            /Users/atulgolhar

            # change to a new working directory with its absolute pathname 
            Atuls-MacBook-Pro:~ atulgolhar$ cd /bin

            # list files in the new working directory
            Atuls-MacBook-Pro:bin atulgolhar$ ls
            [       date        hostname    ls      rm      tcsh
            bash        dd      kill        mkdir       rmdir       test
            cat     df      ksh     mv      sh      unlink
            chmod       echo        launchctl   pax     sleep       wait4path
            cp      ed      link        ps      stty        zsh
            csh     expr        ln      pwd     sync

            # change directory to root and list it in one step (use command separator ; )
            Atuls-MacBook-Pro:bin atulgolhar$ cd /; ls
            Applications            bin             opt
            Library             cores               private
            Network             dev             sbin
            System              etc             tmp
            User Information        home                usr
            Users               installer.failurerequests   var
            Volumes             net

            # find your working directory, which happens to be the root directory
            Atuls-MacBook-Pro:/ atulgolhar$ pwd
            /

            # change directory to a subdirectory and use its relative pathname (ie no /)
            Atuls-MacBook-Pro:/ atulgolhar$ cd usr

            # find your working directory 
            Atuls-MacBook-Pro:usr atulgolhar$ pwd
            /usr

            # change to a subdirectory
            Atuls-MacBook-Pro:usr atulgolhar$ cd lib

            # find your working directory
            Atuls-MacBook-Pro:lib atulgolhar$ pwd
            /usr/lib

            # give a wrong pathname
            Atuls-MacBook-Pro:lib atulgolhar$ cd xqk
            -bash: cd: xqk: No such file or directory

            # list files in another directory
            Atuls-MacBook-Pro:lib atulgolhar$ ls /bin
            [       date        hostname    ls      rm      tcsh
            bash        dd      kill        mkdir       rmdir       test
            cat     df      ksh     mv      sh      unlink
            chmod       echo        launchctl   pax     sleep       wait4path
            cp      ed      link        ps      stty        zsh
            csh     expr        ln      pwd     sync

            # find your working directory
            Atuls-MacBook-Pro:lib atulgolhar$ pwd
            /usr/lib

            # return to your home directory
            Atuls-MacBook-Pro:lib atulgolhar$ cd
            Atuls-MacBook-Pro:~ atulgolhar$ 


----Protecting and Sharing Files 

# if working in a group, all users can read documents stored in one of their manager's directories
# without needing to make their own copies (assuming access allowed). Thus dont need to send files
# via emails or attachments. Easier to have and use open permissions.

# Note /Users/Shared can create and modify their own files but not anyone elses
# to modify files owned by someone else, you will need to copy to another directory
# such as your Documents directory

---- ----File Access Permissions 

---- ----Setting Permissions with chmod 

$ man chmod
$ chmod -R

# example if you need to make a directory's permission to be writable 
# then chmod to add group write permission
# but if you need to make more than one change to the permissions (ie want to add read
# and execute permission but delete write permission, then its easier to set all 
# permissions explicitly instead of changing them one by one).
# syntax is
$ chmod permissions directory_or_filename(s)
        u       # user's permissions
        g       # group's permissions
        o       # other's permissions
        +       # add
        -       # delete
        =       # specify it exactly
        r       # read
        w       # write 
        x       # execute

$ chmod a-w filename    # to protect a file from accidental editing, delete everyone's write
                        # permission with this command

$ chmod u+w filename    # if you own an unwritable file that you want to edit, but you dont
                        # want to change other people's write permissions, you can add
                        # "user" (owner) write permission with this command

$ chmod u-w filename    # to keep yourself from accidently removing files (adding or
                        # renaming files) in an important directory of yours, you can 
                        # delete your own write permission with this command

$ chmod a-w dirname     # if other users have that permission too, you could delete
                        # everyone's write permission with this command

$ chmod ug=rw *         # if you want you and your group to be able to read and write
                        # all files in your working directory, but those files have various
                        # permissions now, so adding and deleting the permissions
                        # individually would be a pain, this is a good place to use the =
                        # operator to set the exact permissions you want. Use the filename
                        # wildcard * with this command

$ chmod ug=rw filename1 filename2 filename3 
                        # if your working directory has any subdirectories, then the above
                        # command would be wrong, as it would take away execute permissions
                        # from the subdirectories, so they could not be accessed anymore.
                        # Therefore, try a more specific wildcard or simply list the
                        # filenames whose permissions you want to change, separated by spaces

$ chmod go-rwx dirname  # to protect the files in a directory and all its subdirectories from
                        # everyone else on your system, but still keep the access permissions
                        # you have there, you could use this

$ chmod go= dirname     # to delete all "group" and "others" permissions to read, write, and
                        # execute, a simplier command to set "group" and "others" permissions
                        # to nothing is this

$ chmod u=rwx,go=rx dirname 
                        # suppose you want full access to a directory. Other people on the
                        # system should be able to see what's in the directory (and read
                        # or edit the files if the file permissions allow it), but not
                        # rename, remove, or add files. To do this, give yourself permissions
                        # but give "group" and "others" only read and execute permissions

# after you change permission, its a good idea to check your work with 
$ ls -l filename, ls -ld dirname 
# note that without the -d option, here ls will lsit the contents of the directory instead
# of its permissions and other information), or by using the Finder's Get Info window.

chmod: Not owner        # if you get this message
                        # only the owner of a file or directory can set its permissions.
                        # so use
                                 $ ls -l # to find the owner.

A file is writable, but my program says it cant be written
                        # check the file permissions with 
                                                          $ ls -l # and be sure your in the
                        # category that has write permission.

# note the problem may also be in the permissions of the file's directory. Some programs need
# permission to write more files into the same directory (ie temporary files) or to rename
# files (ie make a file into a backup) while editing. If its safe to add write permission
# to the directory (if other files in the directory dont need protection from removal or
# renaming), try that. Otherwise, copy the file to a writable directory (with cp), edit it
# there, and then copy it back to the original directory.


---- ----Changing the Group and Owner 

$ chgrp

# example, your the designer creating a directory named images for several illustrators.
# The directory's original group owner might be admin. Suppose you want all illustrators (all of
# whom are in the group named staff) to have directory access. B/c your adminsitering the system
# you can control the list of group's you are in. The groups program lists your groups.


$ groups 
gareth admin 
$ mkdir images
$ ls -ld images 
drwxr-xr-x  2 gareth admin      68 Oct 3 16:45  images 
$ chgrp staff images 
$ chmod o= images
$ ls -ld images 
drwxr-x---  2 gareth staff      68 Oct 3 16:45  images 

# also OS X lets you you set a directory's group ownership so that any files you late
# create in that directory will be owned by the same group that owns that directory. Try
# the command
chmod g+s dirname # The permissions listing from ls -ld should not show an s in place
# of the second x, as in drwxr-s---

# the chown program changes the owner of a file or directory. Only the superuser can use
# chown  (see Superuser Priviledges with sudo on page 72).
$ chown eric images 
chown: changing ownership of 'images': Operation not permitted
$ sudo chown eric images 
Password:

# if you have permission to read another user's file, however, you can make a copy of it
# (with cp; see "Copying Files' on page 98 in Chapge 4), and you will own the copy.


----Changing Your Password 
# can use the command line
$ passwd 

----Superuser Privledges with sudo 
# when searching
$ sudo find / -name makewhatit -print 

----Exploring External Volumes 
# additional hard disks on your system and any network-based disks are all mounted onto the
# filesystem under the /Volumes directory.

$ ls /Volumes
Atuls-MacBook-Pro:~ atulgolhar$ ls /Volumes
Macintosh HD    Preboot

$ ls -l /Volumes
Atuls-MacBook-Pro:~ atulgolhar$ ls -l /Volumes
total 0
lrwxr-xr-x  1 root  wheel   1 Dec 15 08:13 Macintosh HD -> /
drwxr-xr-x+ 3 root  wheel  96 Nov 30  2017 Preboot
Atuls-MacBook-Pro:~ atulgolhar$ 

# notice "l" for Macintosh HD disk. This means its a link (see Chapter 4) and this 
# is confirmed by the long listing information showing that Macintosh HD actually points to /

# this works for external hard drives, iphones, digital cameras.

        """
        # Learning Unix for OS X - Going Deep With The Terminal and Shell - Dave Taylor 2016
        -----------------------------------------------------------------------------------------------
        Chapter 
        1 Why Use Unix? 
        2 Using the Terminal 
        3 Exploring the Filesystem
        4 File Management 
        5 Finding Files and Information 
        6 Redirecting I/O 
        7 Multitasking 
        8 Taking Unix Online 
        9 Of Windows and X11
        10 Where to go from here 
        --------------------------------------------------------------------------------------------
        """

-----------------------------------------------------------------------------------------------
Chapter 
4 File Management 

----File and Directory Names 
# dont use spaces
# if you must, you can either put quotation marks around a filename or escape it.
#       "my file.txt"
#       \my file.txt

# common use for Unix is filenames composed of lowercase letters, dashes, and underscores

# example Library
$ cd Library
$ ls -l
$ cd App<TAB> # this will self complete to 
#$ cd Application\ S

# filename must be unique inside its directory, but other directories can have
# different files with the same name.
# example chap1.doc and chap2.doc can be in directory /Users/carol/Desktop but 
# different version of those documents can be in /Users/carol/Documents

----File and Directory Wildcards 
# special characters are * ? [] and {}

*       # any number of characters

?       # any single character
        # h?p matches hop and hip but not hp or help

[]      # [Cc]hatper can match Chapter or chapter
        # so [] contain one digit or letter that you would like to match

{,}     # a{b,c,d}e would match either abe, ace, or ade
        # most commonly used to reference multiple files within a subdirectory
        # Mail/{drafts,inbox} is functionally identical to Mail/drats and Mail/inbox

# Examples to use wildcards
(1) listing name matches
(2) same filename but in multiple subdirectories
(3) listing directory names using a filename # Jan/summary

                    Atuls-MacBook-Pro:Notes atulgolhar$ ls
                    AtulNotes_ProgInPython3.py          Notes_Java_py.py
                    BashTempDir                 Notes_Networking.py
                    DataStructuresAlgorithmsPython.py       Notes_ProgInPython3.py
                    DataStructuresAlgorithmsPython_CodeSchool.py    Notes_ReleaseIt.py
                    IIPP part 1.py                  Notes_Spark1.py
                    IIPP_part1.py                   SiteReliabilityEngineering.py
                    ML_Code_Notes1 OLD              Terminal Saved Output
                    Neural_Networks_notes.py            Test1.java
                    Notes2018May.py                 functional_tests.py
                    Notes_BASH_py.py                prin_of_computing_1_2.py
                    Notes_BashUnix.py               prin_of_computing_2_only.py
                    Notes_Java.java                 scrapetestCh2.py
                    Notes_JavaScriptATUL.js             tempHourAllSummary.html
                    Notes_Java_J2EE.java
                    Atuls-MacBook-Pro:Notes atulgolhar$ cd BashTempDir
                    Atuls-MacBook-Pro:BashTempDir atulgolhar$ ls
                    Atuls-MacBook-Pro:BashTempDir atulgolhar$ touch temp.txt
                    Atuls-MacBook-Pro:BashTempDir atulgolhar$ ls
                    temp.txt
                    Atuls-MacBook-Pro:BashTempDir atulgolhar$ touch chap0.txt
                    Atuls-MacBook-Pro:BashTempDir atulgolhar$ touch chap1.txt
                    Atuls-MacBook-Pro:BashTempDir atulgolhar$ touch chap2.txt
                    Atuls-MacBook-Pro:BashTempDir atulgolhar$ touch chap3.txt
                    Atuls-MacBook-Pro:BashTempDir atulgolhar$ touch chap4.txt
                    Atuls-MacBook-Pro:BashTempDir atulgolhar$ touch chap5.txt
                    Atuls-MacBook-Pro:BashTempDir atulgolhar$ touch chap6.txt
                    Atuls-MacBook-Pro:BashTempDir atulgolhar$ touch chap7.txt
                    Atuls-MacBook-Pro:BashTempDir atulgolhar$ touch chap8.txt
                    Atuls-MacBook-Pro:BashTempDir atulgolhar$ touch chap9.txt
                    Atuls-MacBook-Pro:BashTempDir atulgolhar$ touch chap1a.txt
                    Atuls-MacBook-Pro:BashTempDir atulgolhar$ touch chap1b.txt
                    Atuls-MacBook-Pro:BashTempDir atulgolhar$ touch chap1a.old.txt
                    Atuls-MacBook-Pro:BashTempDir atulgolhar$ touch chap3.old.txt
                    Atuls-MacBook-Pro:BashTempDir atulgolhar$ touch oldjunk
                    Atuls-MacBook-Pro:BashTempDir atulgolhar$ ls
                    chap0.txt   chap1a.txt  chap3.old.txt   chap5.txt   chap8.txt   temp.txt
                    chap1.txt   chap1b.txt  chap3.txt   chap6.txt   chap9.txt
                    chap1a.old.txt  chap2.txt   chap4.txt   chap7.txt   oldjunk
                    Atuls-MacBook-Pro:BashTempDir atulgolhar$ 


$ ls chap?.txt
chap0.txt   chap2.txt   chap4.txt   chap6.txt   chap8.txt
chap1.txt   chap3.txt   chap5.txt   chap7.txt   chap9.txt

$ ls chap[3-7]*
chap3.old.txt   chap3.txt   chap4.txt   chap5.txt   chap6.txt   chap7.txt

$ ls chap??.txt
chap1a.txt  chap1b.txt

$ ls *old*
chap1a.old.txt  chap3.old.txt   oldjunk

$ ls *a*a*
chap1a.old.txt  chap1a.txt

$ ls chap{3,6}.txt
chap3.txt   chap6.txt

cat  # display on screen
less # display on screen

$ less *.old.txt                            # same
$ less chap1a.old.txt chap3.old.txt         # same

# less will alphabetize results
# example if you have subdirectors called Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
# the same file called summary.txt is located in each subdirectory
# so you could read all the summary files by typing
less */summary 
# which is the same as
less Jan/summary
less Feb/summary 
less Mar/summary 
less Apr/summary 
less May/summary 
less Jun/summary 
less Jul/summary 
less Aug/summary 
less Sep/summary 
less Oct/summary 
less Nov/summary 
less Dec/summary 
# but less */summary will alaphebetize them so Apr/summary is first, not Jan/summary

# classic example of shell much more powerful than Finder is 
# when moving a subset of files in directory that match specific patterns
# example JPEG image files need to be moved to a new subdirectory called JPEG Images
$ mv *.{jpg,JPG} JPEG\ Images 

# ATUL work thru this example here
# ATUL work thru this example here
# ATUL work thru this example here
# ATUL work thru this example here
# ATUL work thru this example here
# ATUL work thru this example here
# ATUL work thru this example here
# ATUL work thru this example here
# ATUL work thru this example here
# ATUL work thru this example here
# ATUL work thru this example here
# ATUL work thru this example here
# ATUL work thru this example here
# ATUL work thru this example here
# ATUL work thru this example here
# ATUL work thru this example here
# ATUL work thru this example here
# ATUL work thru this example here
# ATUL work thru this example here
# ATUL work thru this example here
# ATUL work thru this example here
# ATUL work thru this example here
# ATUL work thru this example here
# ATUL work thru this example here


----Looking Inside Files # inside text files

---- ----cat
# cat means concatenate
# moved to /etc directory and used cat to display contents of the notify.conf configuration file


                    Atuls-MacBook-Pro:~ atulgolhar$ cd /etc
                    Atuls-MacBook-Pro:etc atulgolhar$ ls *.conf
                    asl.conf        man.conf        ntp.conf        rtadvd.conf
                    autofs.conf     newsyslog.conf      ntp_opendirectory.conf  syslog.conf
                    dnsextd.conf        nfs.conf        pf.conf
                    kern_loader.conf    notify.conf     resolv.conf
                    Atuls-MacBook-Pro:etc atulgolhar$ cat notify.conf
                    #
                    # Notification Center configuration file
                    #

                    reserve com.apple.system. 0 0 rwr-r-
                    reserve com.apple.system.clock_set 0 266 rwrwr-
                    monitor com.apple.system.timezone /etc/localtime
                    monitor com.apple.system.info:/etc/hosts /etc/hosts
                    monitor com.apple.system.info:/etc/services /etc/services
                    monitor com.apple.system.info:/etc/protocols /etc/protocols
# using wildcard pattern, we can look inside at a couple of configuration files
# with a single invocation of cat:
Atuls-MacBook-Pro:etc atulgolhar$ cat notify.conf
# but serious drawback of using cat is can not tell (no dication) of where one file
# ends and the next begins.
# so use 
cat -n {syslog,nfs,ftpd}.conf

                Atuls-MacBook-Pro:etc atulgolhar$ cat -n {syslog,nfs,ftpd}.conf
                     1  # Note that flat file logs are now configured in /etc/asl.conf
                     2  
                     3  install.*                       @127.0.0.1:32376
                     1  #
                     2  # nfs.conf: the NFS configuration file
                     3  #
                cat: ftpd.conf: No such file or directory

# ATUL - play with this: load text of a book, move to that directory, very file exists,
# use cat to search for lines and see if cat results in (1) entire book text?, (2) just
# part of the text?, (3) limited number of lines?, or (4) just one line?

---- ----less 
# to read a long plain-text file
# less command will display one page of text from top of Terminal window to bottom
# more is a play on less
# more has a different name and slightly different default behavior
# can see from this example that output is exact same
Atuls-MacBook-Pro:etc atulgolhar$ ls -l /usr/bin/{more,less}
-rwxr-xr-x  1 root  wheel  133856 Nov 30 02:37 /usr/bin/less
-rwxr-xr-x  1 root  wheel  133856 Nov 30 02:38 /usr/bin/more

less options files 

# basic prompt is a colon (:)
# for the first screen, less displays the file's name as a prompt
# q to quit

# less commands
$ less -M 
# to display less commands, press h while less is running
Command 
space bar   # next page
v           # vi editor
Return      # next line
Control-L   # redisplay current page 
n f         # move forward n lines 
h           # help
g           # go to beginning of file
G           # go to end of file
b           # move backward one page 
:n          # go to next file on command line 
n b         # move backwards n lines 
:p          # bo back to previous file on command line 
/word       # search forward for word 
q           # quit 
?word       # search backward for word

# author commonly uses /word search notation when using man command
# why? this uses less behind the scenes to display information on the screen
# one page at a time

/file completion # type this at colon prompt while reading bash man page lets
# you skip straight to what you seek.
# ATUL - play with this

# gone to far? use b to go back to previous page

# instead of haveing entire contents of file in an screen dump or
# instand of having to step through one line at a time
# more useful to use grep

---- ----grep 

# grep name from old line-editor command called
# glboal/regular expression/print = grep

# grep uses regular expressions = more sophisticated pattern language (see Chapter 4)

# to find word fragments or specific words in a a set of files

        Atuls-MacBook-Pro:etc atulgolhar$ grep firewall *conf
        asl.conf:# Facility com.apple.alf.logging gets saved in appfirewall.log
        asl.conf:? [= Facility com.apple.alf.logging] file appfirewall.log file_max=5M all_max=50M

# output shows matching filename, followed by :, followed by the actual matching line in the file
# you will get errors about "operation not permitted" and "permission denied"
$ grep -s 
$ grep firewall *
$ grep -s firewall *

#see Chapter 5 for more detail on grep

----Creating and Editing Files 
----Text Editors and Word Processors 
# use plain text file in
    # input and output of Unix program (Chapter 6)
    # shell setup files (Chapter 2)
    # shell scripts, for system configuration and more

# Fixing the Carriage Returns
        Atuls-MacBook-Pro:~ atulgolhar$ alias m2u="tr '\015' '\012'"
        Atuls-MacBook-Pro:~ atulgolhar$ alias u2m="tr '\012' '\015'"
# when working with Unix editing tools and you need to fix a Mac format file, use m2u
# when working with Mac tool and need to fix a Unix file, use u2m

# copy these two alias definitions into your .profile file

        # Create a list of the words in file1, one per line, where a 
        # word is taken to be a maxmal string of letters.

           tr -cs "[:alpha:]" "\n" < file1

        # Translate the contents of file1 to upper-case.

           tr "[:lower:]" "[:upper:]" < file1

        # (This should be preferred over the traditional UNIX idiom of ``tr a-z A-Z'',
        # since it works correctly in all locales.)

        # Strip out non-printable characters from file1.

           tr -cd "[:print:]" < file1

        # Remove diacritical marks from all accented variants of the letter `e
           tr "[=e=]" "e"


----vi Text Editor 

---- ----vi Basics 
# Command Mode
# Insert Mode       i 
# esc
$ vi .profile 
$ vi sample 
# i
# esc to get into Command Mode       
# Control G
# move cursor around h j k l 
# H         jumps to first line of screen
# G         jumps to last line of screen
# w         forward backward?
# b         forward backward?
# 0         jumps to beginning of line
# $         jumps to end of line

----- ---- ----Searching in vi 
# Command F         search thru text file
# search strings must be in Command Mode
# /
# cheese
# n         repeat the search

----- ---- ----Invoking external Unix Commands 
----- ---- ----More powerful capabilities 
# easy to invoke Unix commands and have their output included in the file your editing
# vi also can send text within its buffer to a Unix command, ultimately replacing that text
# with the output text of the command
# back to vi, while in Command mode
# o         to open a blank line immediately below the line that the cursor is on
# esc       to get out of INSERT mode
# !!date    as you type this, the cursor will drop to the bottom of the screen and shows
#           :.!date
# press Return and the blank line is replaced by the output from the date command

# NOT WORKING

# x         delete text
# dd        delete lines
# dw        delete individual word
# d$        deletes all text after cursor to the end of the line
# d0        deletes to the beginning of the line
# dG        deletes to the end of the file

# u         to undo the deletion

# NOT WORKING
# yanking = does not cut the text; it simply copies it to vi's buffer.
# yw        yank one word
# yy        yank the line
# yyn       yank n lines
# y1        yank single character
# ynw       yank n words
# yy        yank entire line
# p         paste 

# -r        to recover the saved temporary edit buffer
$ vi -r 

# to quit
:w          # saves
:q          # quit
:q!         # quit discarding any changes
:wq or zz   # write out any changes, then quit shortcut

a           # move into Append mode (like insert but you enter information after the cursor)
b           # move backward one word
w           # move forward one word
d1G         # delete from current point back to the beginning of the file
dd          # delete current line
dG          # delete through end of file
dw          # delete the following word
Esc         # move into Command mode
h           # move backward one character
l           # move forward one character
i           # switch to Insert mode (Esc switches you back to Command mode)
j           # move down one line
k           # move up one line
O           # open up a line above the current line and switch to Insert mode
o           # open up a line below the current line and switch to Insert mode
P           # put (paste) deleted text before the cursor
p           # Put (paste) deleted text after the cursor
X           # delete the character to the left of the cursor
x           # delete the character under the cursor
yw          # yank (copy) from the cursor to the end of the current word. Then paste with p or P
yy          # yank current line. Then paste with p or P



---- ----Simplier vi Alternative: Pico 
# offers a menu based approach to editing, with on-screen help
nano 
pico        # same in OS X

---- ----More Complex Option: Emacs

emacs
# ATUL couldnt get it work, keystrokes?


----Managing Files 
# note if have 100s of files and only need to move "temp" files, then Folder is tedious.
# but if using bash, its just
rm *temp*

---- ----Creating Directories with mkdir 

mkdir dirname(s)
$ mkdir spy boston.dine 
$ mkdir "My Favorite Music"

# create many subdirectories
$ mkdir -p spy/ch{01,02,03,04,05,intro,toc,index,bio}
$ ls -lF spy

        Atuls-MacBook-Pro:Bash_cookbook atulgolhar$ ls -l
        total 8
        -rw-r--r--@  1 atulgolhar  staff   32 Dec  8 07:50 Bash_Cookbook.py
        drwxr-xr-x   2 atulgolhar  staff   64 Dec 21 13:15 My Favorite Music
        drwxr-xr-x   2 atulgolhar  staff   64 Dec 21 13:15 boston.dine
        drwxr-xr-x  11 atulgolhar  staff  352 Dec 21 13:20 spy
        Atuls-MacBook-Pro:Bash_cookbook atulgolhar$ ls -lF spy
        total 0
        drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch01/
        drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch02/
        drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch03/
        drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch04/
        drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch05/
        drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chbio/
        drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chindex/
        drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chintro/
        drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chtoc/


---- ----Copying Files 
$ cp old new    # does not affect original file
                # old is pathname to original file
                # new is pathname to new file
# example, but not executed
cp /etc/passwd ~/password       # this copies /etc/passwd file into home directory with new name

$ cp old dir            # puts a copy of the original file old into an existing directory
                        # called dir. Note copy has the same filename as the original
                        # Careful- use ls to list the directory before you copy it there
                        # as you dont want to accidently overwrite a copy you wanted to keep

$ cp -i master existing-file.txt 
overwrite existing-file.txt? no

# page 99
# can copy more than one file to a single directory by listing the pathnames of each file
# you want copied, with the destination directory at the end of the command line.
# You can use relative or absolute pathnames (see pages 44 and 45).
# example
# to copy three files called ch1.doc, ch2.doc, ch3.doc from /Users/john to a 
# subdirectory called Documents (that is /Users/carol/Documents), assuming you have permission
# assumes pwd is /Users/carol
$ cp ../john/ch1.doc ../john/ch2.doc ../john/ch3.doc Documents 
# or could use wilcards and let the shell find all the appropriate files
# add -i for safety option
$ cp -i ../john/ch[1-3].doc Documents   # assume pwd is /Users/carol
$ cp ../john/ch[1-3].doc .           # assumes copying to working directory
$ cp ../john/ch[1-3].doc ..          # assume parent directory

$ cp ~/john/ch[1-3].doc Documents    # assume both John and Carol home directories

# cp an copy entire directory trees with -R (recursive) option.
# example Asha is new and joining John and Carol
# Asha needs copy of John's Documents/work directory in her own home directory
# if Asha's own work directory does not yet exist, then this creates it concurrently
$ cd /Users
$ cp -R john/Documents/work asha/work 

# or from Asha's home directory
$ cp -R ~john/Documents/work work
# so now Asha has a new subdirectory, called /Users/asha/work, that contains copies
# of all the files and subdirectories in /Users/john/Documents/work

# this will change ownership of those files from John to Asha
# to retain original permissions, add -p flag
# example here
$ ls -l /etc/shells 
$ cp /etc/shells ~
$ ls -l ~/shells 
# notice that we are using the target directory as a ~


# Problem Checklist
# "cp: cannot copy file to itself"
# if the copy is in the same directory as the original, the filenames must be different
# "cp: filename: no such file or directory"
# check for typo, verify correct pathname
# "cp: permission denied"
# use ls -l to find the owner and permissions for that file, or 
# use ls -ld to check destination directory


---- ----Renaming and Moving Files with mv 
# use mv 

            Atuls-MacBook-Pro:spy_mv_copy_renaming_moving atulgolhar$ ls -l
            Atuls-MacBook-Pro:spy_mv_copy_renaming_moving atulgolhar$ mkdir -p spyQuinn/chap{01,02,03,04,05,bio} 
            Atuls-MacBook-Pro:spy_mv_copy_renaming_moving atulgolhar$ ls -l
            total 0
            drwxr-xr-x  8 atulgolhar  staff  256 Jan  3 14:27 spyQuinn
            Atuls-MacBook-Pro:spy_mv_copy_renaming_moving atulgolhar$ cd spyQuinn
            Atuls-MacBook-Pro:spyQuinn atulgolhar$ ls -l
            total 0
            drwxr-xr-x  2 atulgolhar  staff  64 Jan  3 14:27 chap01
            drwxr-xr-x  2 atulgolhar  staff  64 Jan  3 14:27 chap02
            drwxr-xr-x  2 atulgolhar  staff  64 Jan  3 14:27 chap03
            drwxr-xr-x  2 atulgolhar  staff  64 Jan  3 14:27 chap04
            drwxr-xr-x  2 atulgolhar  staff  64 Jan  3 14:27 chap05
            drwxr-xr-x  2 atulgolhar  staff  64 Jan  3 14:27 chapbio
            Atuls-MacBook-Pro:spyQuinn atulgolhar$ cd chapbio
            Atuls-MacBook-Pro:chapbio atulgolhar$ ls
            Atuls-MacBook-Pro:chapbio atulgolhar$ echo 145
            145
            Atuls-MacBook-Pro:chapbio atulgolhar$ touch 145.pdf
            Atuls-MacBook-Pro:chapbio atulgolhar$ ls
            145.pdf
            Atuls-MacBook-Pro:chapbio atulgolhar$ touch asdf adxc vxe hert
            Atuls-MacBook-Pro:chapbio atulgolhar$ ls
            145.pdf adxc    asdf    hert    vxe
            Atuls-MacBook-Pro:chapbio atulgolhar$ touch vbds
            Atuls-MacBook-Pro:chapbio atulgolhar$ touch test{1,2,3,4,5,5,6,7}
            Atuls-MacBook-Pro:chapbio atulgolhar$ ls
            145.pdf asdf    test1   test3   test5   test7   vxe
            adxc    hert    test2   test4   test6   vbds
            Atuls-MacBook-Pro:chapbio atulgolhar$ 

            Atuls-MacBook-Pro:chapbio atulgolhar$ ls
            145.pdf asdf    test1   test3   test5   test7   vxe
            adxc    hert    test2   test4   test6   vbds
            Atuls-MacBook-Pro:chapbio atulgolhar$ mv test5 test5_15555
            Atuls-MacBook-Pro:chapbio atulgolhar$ ls -l
            total 0
            -rw-r--r--  1 atulgolhar  staff  0 Jan  3 14:32 145.pdf
            -rw-r--r--  1 atulgolhar  staff  0 Jan  3 14:32 adxc
            -rw-r--r--  1 atulgolhar  staff  0 Jan  3 14:32 asdf
            -rw-r--r--  1 atulgolhar  staff  0 Jan  3 14:32 hert
            -rw-r--r--  1 atulgolhar  staff  0 Jan  3 14:33 test1
            -rw-r--r--  1 atulgolhar  staff  0 Jan  3 14:33 test2
            -rw-r--r--  1 atulgolhar  staff  0 Jan  3 14:33 test3
            -rw-r--r--  1 atulgolhar  staff  0 Jan  3 14:33 test4
            -rw-r--r--  1 atulgolhar  staff  0 Jan  3 14:33 test5_15555
            -rw-r--r--  1 atulgolhar  staff  0 Jan  3 14:33 test6
            -rw-r--r--  1 atulgolhar  staff  0 Jan  3 14:33 test7
            -rw-r--r--  1 atulgolhar  staff  0 Jan  3 14:33 vbds
            -rw-r--r--  1 atulgolhar  staff  0 Jan  3 14:32 vxe
            Atuls-MacBook-Pro:chapbio atulgolhar$ 


$ mv test5 test5_134234         # to rename a file, actually overwrites old file with new file
$ mv -i test5 test5_134234        # i = interactive but doesnt work in OSX
# examples
$ mv introTest.doc ~/Desktop 
# to move file and rename at same time
$ mv introTest.doc ~/Desktop/introTestNewFile.doc 


---- ----Removing Files and Directories 
---- ---- ----rm 
# periodically removing obsolete files and directories
# use rm but its permanent
# be aware of typos such as 
$ rm c*     # yes
$ rm c *    # typo

                Atuls-MacBook-Pro:bash_Cookbook atulgolhar$ ls
                Bash_Cookbook.py        boston.dine         spy_mv_copy_renaming_moving
                My Favorite Music       spy
                Atuls-MacBook-Pro:bash_Cookbook atulgolhar$ ls -l
                total 8
                -rw-r--r--@  1 atulgolhar  staff   32 Dec  8 07:50 Bash_Cookbook.py
                drwxr-xr-x   2 atulgolhar  staff   64 Dec 21 13:15 My Favorite Music
                drwxr-xr-x   2 atulgolhar  staff   64 Dec 21 13:15 boston.dine
                drwxr-xr-x  11 atulgolhar  staff  352 Dec 21 13:20 spy
                drwxr-xr-x   3 atulgolhar  staff   96 Jan  3 14:27 spy_mv_copy_renaming_moving
                Atuls-MacBook-Pro:bash_Cookbook atulgolhar$ cd spy
                Atuls-MacBook-Pro:spy atulgolhar$ ls -l
                total 0
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch01
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch02
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch03
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch04
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch05
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chbio
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chindex
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chintro
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chtoc
                Atuls-MacBook-Pro:spy atulgolhar$ touch ch30{01,02,03,04,05,06,07,08,09}testing
                Atuls-MacBook-Pro:spy atulgolhar$ ls -l
                total 0
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch01
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch02
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch03
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch04
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch05
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3001testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3002testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3003testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3004testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3005testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3006testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3007testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3008testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3009testing
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chbio
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chindex
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chintro
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chtoc
                Atuls-MacBook-Pro:spy atulgolhar$ 
                Atuls-MacBook-Pro:spy atulgolhar$ touch ch3005testing{a,b,c,d}
                Atuls-MacBook-Pro:spy atulgolhar$ ls -l
                total 0
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch01
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch02
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch03
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch04
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch05
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3001testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3002testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3003testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3004testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3005testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:23 ch3005testinga
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:23 ch3005testingb
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:23 ch3005testingc
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:23 ch3005testingd
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3006testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3007testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3008testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3009testing
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chbio
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chindex
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chintro
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chtoc
                Atuls-MacBook-Pro:spy atulgolhar$ rm ch3005testinga
                Atuls-MacBook-Pro:spy atulgolhar$ ls -l
                total 0
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch01
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch02
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch03
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch04
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch05
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3001testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3002testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3003testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3004testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3005testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:23 ch3005testingb
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:23 ch3005testingc
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:23 ch3005testingd
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3006testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3007testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3008testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3009testing
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chbio
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chindex
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chintro
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chtoc
                Atuls-MacBook-Pro:spy atulgolhar$ 


# if security conscious, use 
$ rm -P 
# causes files to be overwritten three times, with zeros, ones, then again with zeros
# then will be removed all with one flag

---- ---- ----rmdir
#
$ rmdir     # wont let you delete directories that contain any files or subdirectories
$ rm -r     # dangerous

# to use rm
# 1 enter cd dirname to get into target directory
# 2 enter rm * to remove all files in that directory (to empty it)
# 3 enter cd .. to get into parent directory
# 4 enter rmdir dirname to remove target directory
# use 
$ ls -a     # to check if any hidden files exist
# use this to clean up hidden files except for . and ..
$ rm -i .[^.]*


---- ----Working with Links # aliases

# use less
# author- if you have a tendency to delete alias part of the filename then still
# need to determine whether a file is an alias or not, so check the file size
# if size is 0, but there is actually content when looking at it with less
# then its an alias.
# if this does not work, use Finder and use open . # as a shortcut and look for
# the telltale arrow on the icon.
# in Unix, we talk about links
# in OSX, we talk about aliases
# so
# in Unix, there are hard links and symbolic links using this command
$ ln [-s] source target     # -s option creates symbolic link

                Atuls-MacBook-Pro:spy atulgolhar$ ln -s chbio nato_pic_link.pdf
                Atuls-MacBook-Pro:spy atulgolhar$ ls -l
                total 0
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch01
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch02
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch03
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch04
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 ch05
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3001testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3002testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3003testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3004testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3005testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:23 ch3005testingb
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:23 ch3005testingc
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:23 ch3005testingd
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3006testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3007testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3008testing
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3009testing
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chbio
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chindex
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chintro
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chtoc
                lrwxr-xr-x  1 atulgolhar  staff   5 Jan  4 13:01 nato_pic_link.pdf -> chbio
                Atuls-MacBook-Pro:spy atulgolhar$ 

# why use symbolic links? not sure
# watch out for orphan links as the system does not automatically remove or update symbolic links

# hard link explained
# hard link = ie a different door into the same room
# symbolic link = ie a postit note taped on a door telling you to go to the second floor
$ ln mypic.pdf zzz2copy2.pdf
# notice time created stays original to 13:07 even though created at 13:08
$ ln mypic.pdf zzz3copy2.pdf
# watch for link count (ie two pointers to the data vs 1 pointer to the data)
                ...
                -rw-r--r--  1 atulgolhar  staff   0 Jan  4 12:21 ch3009testing
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chbio
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chindex
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chintro
                drwxr-xr-x  2 atulgolhar  staff  64 Dec 21 13:20 chtoc
                -rw-r--r--  5 atulgolhar  staff   0 Jan  4 13:07 copy2.pdf
                -rw-r--r--  5 atulgolhar  staff   0 Jan  4 13:07 mypic.pdf
                lrwxr-xr-x  1 atulgolhar  staff   5 Jan  4 13:01 nato_pic_link.pdf -> chbio
                -rw-r--r--  5 atulgolhar  staff   0 Jan  4 13:07 zzz2copy2.pdf
                -rw-r--r--  5 atulgolhar  staff   0 Jan  4 13:07 zzz3copy2.pdf
                -rw-r--r--  5 atulgolhar  staff   0 Jan  4 13:07 zzzcopy2.pdf
                Atuls-MacBook-Pro:spy atulgolhar$ 


---- ----Compressing and Archiving Files 
# OSX has its own ZIP archive capability = gzip, compress, and bzip2
#       see Make Archive capability
#       Compress filename from the context menu (ATUL ?). see their manpages to learn more.
# Unix archive capability = tar

---- ---- ----gzip 
# gzip has nothing to do with ZIP archive files created by OSX's Make Archive capability
# gzip is actually a compression program that shrinks individual files for storage and transmission
# useful if slow internet connection, as it reduces file size to make it more portable.
# gzip works will with tar as well

$ gzip [-v] file(s)

                -rw-r--r--@ 1 atulgolhar  staff  21628 Jan  5 19:58 ch3001testing
                Atuls-MacBook-Pro:spy atulgolhar$ gzip -v ch3001testing
                ch3001testing:     99.2% -- replaced with ch3001testing.gz
                Atuls-MacBook-Pro:spy atulgolhar$ ls -l ch3001*
                -rw-r--r--@ 1 atulgolhar  staff  153 Jan  5 19:58 ch3001testing.gz
# reduced file size by 99% and appends .gz filename suffix to indicate file is now compressed
# to uncompress, use gunzip
$ gunzip [-v] file(s)

                Atuls-MacBook-Pro:spy atulgolhar$ gzip -v ch3001testing
                ch3001testing:     99.2% -- replaced with ch3001testing.gz
                Atuls-MacBook-Pro:spy atulgolhar$ ls -l ch3001*
                -rw-r--r--@ 1 atulgolhar  staff  153 Jan  5 19:58 ch3001testing.gz
                Atuls-MacBook-Pro:spy atulgolhar$ gunzip [-v] ch3001testing.gz
                gunzip: can't stat: [-v] ([-v].gz): No such file or directory                             '
                Atuls-MacBook-Pro:spy atulgolhar$ gunzip -v ch3001testing.gz
                gunzip: can't stat: ch3001testing.gz (ch3001testing.gz.gz): No such file or directory     '
                Atuls-MacBook-Pro:spy atulgolhar$ gunzip -v ch3001testing
                gunzip: ch3001testing: unknown suffix -- ignored
                Atuls-MacBook-Pro:spy atulgolhar$ ls -l ch3001*
                -rw-r--r--  1 atulgolhar  staff  21628 Jan  5 19:58 ch3001testing

---- ---- ----tar 
# old days
# tar = the tape archiver for creating system backups to large round tape 
#       units that spin randomly
# today
# tar used to create files that contain directories and files as an archive
# tar is similar to zip format but tar differs from gzip b/c 
# tar job is to create a file that contains multiple files and directories.
# vs
# gzip by contrast makes an existing file shrink through compression
# so combine tar and gzip --> combine by creating archive copies of directories and files
# even better
# use -z flag which automatically invokes gzip compression without any further keystrokes
# so
# tar archive in Unix community is known as tarballs
$ tar [c|t|x] [flags] files_and_directories_to_archive
# actual tar program is too complex
# nutshell --> 
                $ tar -c    # creates archives
                $ tar -t    # shows what's inside an existing archive
                $ tar -x    # extracts files and directories from an archive
                $ -f file   # flag is used to specify the archive name
                $ -v        # flag offers verbose output to let you see what is happening

                $ ls -l
                -rw-r--r--  1 atulgolhar  staff   21628 Jan  5 19:58 ch3001testing
                -rw-r--r--  1 atulgolhar  staff      45 Jan  5 20:35 ch3002testing
                -rw-r--r--@ 1 atulgolhar  staff      45 Jan  5 20:35 ch3002testing.gz
                -rw-r--r--@ 1 atulgolhar  staff  240769 Jan  5 20:37 ch3003testing
                -rw-r--r--  1 atulgolhar  staff       0 Jan  4 12:21 ch3004testing
                $ gzip -v ch3003testing
                ch3003testing:     99.2% -- replaced with ch3003testing.gz

# book example
$ du -s Masters\ Thesis 
6704 Masters Thesis

$ tar -czvf masters.thesis.tgz "Masters Thesis"
Masters Thesis/
Masters Thesis/ .DS_Store
Masters Thesis/analysis
...
Masters Thesis/Web Survey Results.doc
Masters Thesis/web usage by section.doc
$ ls -l masters.thesis.tgz
-rw-r--r-- 1 taylor staff  853574 Oct 4 09:20 masters.thesis.tgz
# Notice that we gave tar the directory name, rather than a list of files. This ensures
# that when the directory is unpacked, the files placed in a new directory (Masters Thesis),
# rather than filling the current directory. This is a good habit for people who make lots
# of archives.
# Notice that the Masters Thesis is 6.7 MB in size, and has not been accessed in quite a while.
# This makes it the perfect candidate for a compressed tar archive. This is done by
# combining the following options:
# -c create
# -z compress with gzip
# -v verbose
# -f file (file output name, notice that we added .tgz suffix to avoid later
# confusion about the file types.) In under 10 seconds, a new archive file is created that
# is less than 1 MB in size, yet contains all the files and directories in the 
# original archive. 
# To unpack the archive, use this
$ tar -xvzf masters.thesis.tgz


---- ----Files on Other Operating Systems 
# see Chapter 8 on how to transfer files across a network, including to non-Unix 
# operating systems.
# Note
# if you have mounted a remote Windows system's C: drive over a share named 
winc
# then you can access the Windows file C:\WORD\REPORT.DOC through the pathname 
# /Volumes/winc/word/report.doc
# Indeed, most external volumes are automatically mounted within the /Volumes directory.

        """
        # Learning Unix for OS X - Going Deep With The Terminal and Shell - Dave Taylor 2016
        -----------------------------------------------------------------------------------------------
        Chapter 
        1 Why Use Unix? 
        2 Using the Terminal 
        3 Exploring the Filesystem
        4 File Management 
        5 Finding Files and Information 
        6 Redirecting I/O 
        7 Multitasking 
        8 Taking Unix Online 
        9 Of Windows and X11
        10 Where to go from here 
        --------------------------------------------------------------------------------------------
        """

-----------------------------------------------------------------------------------------------
Chapter 
5 Finding Files and Information 

# four ways to search in Unix
        # 1 grep    # to look inside but for text only (characters will not work)
                    # one way to search from CML is to extract only pritable characters using
                    # the strings program --> see man strings for details
                    # Strings looks for ASCII strings in a binary file or standard input. 
                    # Strings is useful for identifying random object files and 
                    # many other things. A string is any sequence of 4 (default) or 
                    # more printing characters [ending at, but not including, any 
                    # other character or EOF]. 
    
                    $ grep pattern [file(s)]
        # 2 locate  # to find files by filename
        # 3 find    # to search by filename and attributes 
        # 4 OSX Spotlight

----Searching Inside Files with grep Command 
$ grep pattern [file(s)]

# grep understands plain text, nothing more
# using a pipe = | = enables grep to scan the output of a different command
# allows for only those line of the input stream containing a given pattern are sent
# to the output stream in the pipe.

$ ls -l | grep "Aug"        # standard output is piped to grep which then outputs only lines
                            # containing the string

                    Atuls-MacBook-Pro:spy atulgolhar$ ls
                    ch01            ch3002testing.gz    ch3006testing       chtoc
                    ch02            ch3003testing.gz    ch3007testing       copy2.pdf
                    ch03            ch3004testing       ch3008testing       mypic.pdf
                    ch04            ch3005testing       ch3009testing       nato_pic_link.pdf
                    ch05            ch3005testingb      chbio           zzz2copy2.pdf
                    ch3001testing       ch3005testingc      chindex         zzz3copy2.pdf
                    ch3002testing       ch3005testingd      chintro         zzzcopy2.pdf
                    Atuls-MacBook-Pro:spy atulgolhar$ ls -l | grep "test*"
                    -rw-r--r--  1 atulgolhar  staff  21628 Jan  5 19:58 ch3001testing
                    -rw-r--r--  1 atulgolhar  staff     45 Jan  5 20:35 ch3002testing
                    -rw-r--r--@ 1 atulgolhar  staff     45 Jan  5 20:35 ch3002testing.gz
                    -rw-r--r--@ 1 atulgolhar  staff   1900 Jan  5 20:37 ch3003testing.gz
                    -rw-r--r--  1 atulgolhar  staff      0 Jan  4 12:21 ch3004testing
                    -rw-r--r--  1 atulgolhar  staff      0 Jan  4 12:21 ch3005testing
                    -rw-r--r--  1 atulgolhar  staff      0 Jan  4 12:23 ch3005testingb
                    -rw-r--r--  1 atulgolhar  staff      0 Jan  4 12:23 ch3005testingc
                    -rw-r--r--  1 atulgolhar  staff      0 Jan  4 12:23 ch3005testingd
                    -rw-r--r--  1 atulgolhar  staff      0 Jan  4 12:21 ch3006testing
                    -rw-r--r--  1 atulgolhar  staff      0 Jan  4 12:21 ch3007testing
                    -rw-r--r--  1 atulgolhar  staff      0 Jan  4 12:21 ch3008testing
                    -rw-r--r--  1 atulgolhar  staff      0 Jan  4 12:21 ch3009testing


---- ----Useful grep options

$ grep -A n         # show n lines after matching line
$ grep -B n         # show n lines before matching line
$ grep -C n         # show n lines before and after matching line
$ grep -v           # print only lines not match given pattern
$ grep -n           # print the matched line and its line number
$ grep -l           # print only filenames with matching lines (lowercase L)
$ grep -lv Jane *   # prints file names not containing letters Jane
$ grep -lvi Jane *  # this uses "jane" and "Jane" as search becomes case-insensitive
$ grep -c           # print only count of matching lines
$ grep -i           # match either upper or lowercase (ie case-insensitive)
                    # note -i       
                    # aug does not match Aug, so to make search case-insensitive use -i flag

---- ---- ---- Matching context 
$ grep -n -C1 Aqua sample       # prints matched line plus 1 additional line above and below
                                # matched line will be marked by this :
                                # here searching for two words Aqua and sample

---- ---- ---- Matches in color 
$ grep --color=always text sample 

$ ls -l | grep --color=always "test*"       # test letters show up in red

$ man grep          # for info on color choices

# to make this a permanent feature, you can create a new grep alias that includes
# the --color=always option, or set an environment variable in your .profile or .login file
# depending upon your shell
# for example in Bash
GREP_OPTIONS="--color=always";export GREP_OPTIONS
# so now whenever you use grep, your results will come back in color

---- ---- ---- Counting matches rather than showing matching lines 

$ grep -c "kernel" /var/log/system.log
160 

# can also accomplish by piping output to the wc command (see page 142)

----Working with Regular Expressions 
[Jj]ane         # Range of characters = matches Jane and jane
J[aeiou]ne      # 
j[a-z]ne        # matches j then any lowercase character then ne

[:alnum:]       # Unix shorthand for alphanumeric [a-zA-Z0-9]
[:alpha:]       # upper and lower case letters
[:digit:]       # [0-9]
[:upper:]       # uppercase [A-Z]
[:lower:]       # lowercase [a-z]
[:print:]       # printable (visible) characters
[:punct:]       # punctuation characters
[:space:]       # set of characters that serve as a space including space, tab carriage return
[:xdigit:]      # hexadecimal digit values (0-9, plus a-f and A-F)
# note if in Spanish [a-z] will not locate n~ but [:lower:] will locate it

# examples

j[a-z]ne    =   j[[:lower:]]ne
^           =   # to negate
j[^aeiou]ne =   # negates any vowel
.           =   # matches any single character
# \w        =   \w expression denates a word that is a sequence of letters
#           =   which is also synonymous with :alumn: but it also matches underscores
^           =   # when not used in a character range, then it matches the beginning of the line
            =   # and $ matches the end of the line
                # so if you want to find blank lines that have no content, the pattern is ^$

            =   # lines that begin with a digit then use this
                # ^ followed by set operator, followed by named character range
                # like this
                ^[[:digit:]]
                # each expression can be followed by a repetition operator which indicates
                # how often the pattern can or should occur for a match to be found
                # examples
                ?   # the preceeding is optional and may be matched at most one time
                *   # matches zero or more times
                +   # matches one or more times
                {n} # matches exactly n times
                {n,m} # matches between n and m times

                [[:digit:]]{5}M     # matches exactly five digits followed by letter M
                J[[:digit:]]*\.
                                    # matches J followed by any number of lowercase letters
                                    # including none at all, followed by a period
                                    # notice you need to excape the period with a backslash
                                    # so it is not seen as a request to match any single character.

                jpe?g               # matches jpeg and jpg and jpeeeeeg

# use | piping to list multiple patterns or configurations
# also group in () to make more readable
(cat|dog)house          # matches cathouse and doghouse 
[[:digit:]]+(am|pm)     # matches any one or more digits followed by am or pm

$ ls -l | grep "root.*Aug"      # find lines with root followed by zero or more other characters
                                # then followed by Aug
drwxr-xr-x@     3 root   admin      102 Aug 1 2015 opt/

# another example
# http://www.AskDaveTaylor.com
# vistors who enter data and submit questions on the site invoke the HTTP POST action
# when they use the contact form
# this is different from the GET of most page retrevial transactions in HTTP

# so now finding all POST transactions in the logfile is easy

$ grep POST access_log
178.73.212.114  - - [06/May/2015...] "POST /how_to_i_get ..."   "...Firefox/3.0.14"
78.47.115.26    - - [06/May/2015...] "POST /tag/latino.tra ..." "...Firefox/3.0.1"
78.47.115.26    - - [06/May/2015...] "POST /tag/latino.zim ..." "...Firefox/3.0.1"
62.212.85.36    - - [06/May/2015...] "POST /RPC2 HTTP/1.1 ..." "...Safari/535.11"

# notice that the end of the identification strings shows Windows, then Firefox, then Safari.

# now use the -E flag to force proper regular expressions:
# we wanted those queries originating from Firefox or Safari
$ grep -E "POST.*(Safari|Firefox)" access_log
178.73.212.114  - - [06/May/2015...] "POST /how_to_i_get ..." "...Firefox/3.0.14"
178.73.212.114  - - [06/May/2015...] "POST /whats_a_goog..."  "...Firefox/3.0.14"
178.73.212.114  - - [06/May/2015...] "POST /how_can_i_a  ..." "...Firefox/3.0.14"
78.47.115.26    - - [06/May/2015...] "POST /tag/latino.tra ..."  "...Firefox/3.0.1"

# we can also figure out how many forms were submiteed and then break them down into
# MSIE (Internet Explorer) and non-MSIE submissions with just few grep queries, coupled
# with simple pipe and the wc word count program (see Chapter 6 for wc)

$ grep -E POST access_log | wc -l
    272
$ grep -E "POST.*MSIE" access_log | wc -l 
    3
$ grep -E "POST.*(Firefox)" access_log | wc -l 
    9 
$ grep -E "POST.*(Safari)" access_log | wc -l 
    258
# so now we know of the 272 submissions, 3 were done with MSIE, 9 by Firefox, 258 by Safari

# Note to Administrators. If doing this occasionally, its fine to enter these commands.
# If doing frequently, use a shell script!


----Finding Files with locate 
# to find files that you created 6 months ago.
# BUT locate does not search the actual file system
# instead it searches a prebuilt index of every single file and directory
# need to build the locate database
man 8 locate.updatedb

---- ---- Fast Filename Search with locate 

$ locate alpha
# gives absoute pathnames of any files and directories with alpha 
# not able to use regular expressions
# instead use grep in a pipeline to through the locate output
$ locate alpha | grep "/man/"

# this is the POWER of Unix. You can combine commands to create exactly the
# function or capability you seek.

----Using find to Explore Your Filesystem 
# locate has limitations = not search actual file system
# find command searches actual file system
# typical expression is a "primary" followed by a relevant value
# 

# generic examples
$ find flags pathname expression 
$ find -name "*.html"

# examples
$ find . -name "*.html" -print
# . means current working directory
# so find search that directory only, not the entire filesystem
# change this to $HOME and then find traverses everything within that directory

# to feed the output to wc program
$ find $HOME -name "*.html" -print | wc -l
    1921

                Atuls-MacBook-Pro:spy atulgolhar$ find . -name "*.html" -print
                Atuls-MacBook-Pro:spy atulgolhar$ find . -name "*.pdf" -print

                $ find . -name "*.pdf" -print
                ./mypic.pdf
                ./zzzcopy2.pdf
                ./copy2.pdf
                ./nato_pic_link.pdf
                ./zzz3copy2.pdf
                ./zzz2copy2.pdf


                Atuls-MacBook-Pro:spy atulgolhar$ find $HOME -name "*.pdf" -print | wc -l
                      83


---- ---- Matching by File Size 
# another primary is using -size
# this is typically a complex find so use 512-byte blocks instead
# 10*512 bytes or 5,120 bytes in size
# to match specific numbers of bytes, append a c
# -size 10c  # matches files that are exactly 10 bytes in size
# more than and less than by using a + and -

# example to match only files greater than 5KB, you can use either
$ find -size +10 
# or
$ find -size +5120c 

# to match files less than 100 bytes, you can use
$ find -size -100c 


$ find /bin -size +30k -print
                Atuls-MacBook-Pro:spy atulgolhar$ find /bin -size +30k -print
                /bin/launchctl
                /bin/csh
                /bin/wait4path
                /bin/stty
                /bin/ed
                /bin/pax
                /bin/bash
                /bin/sh
                /bin/ps
                /bin/tcsh
                /bin/dd
                /bin/ksh
                /bin/ls
                /bin/sync
                /bin/zsh
                /bin/chmod



# list of most useful find primaries

$ find -cmin time       # true if file has been modified with the last time minutes
$ find -ctime time      # units of hours    
$ find -delete          # delete matching files. Use with caution.
$ find -exec            # invoke the specified command for matching filenames
$ find -group name      # true if file is owneed by group name or group ID
$ find -ls              # produces ls -l output for matching files
$ find -name pattern    # true is filename matches specified pattern (simple pattern matches)
$ find -iname pattern   # idenical to -name except tests are case-insensitive
$ find -regex regex     # same as -name, but allows for full regular expressions
$ find -iregex regex    # identical to -regex, but regular expression is case-insensitive
$ find -newer file      # true if file is newer than specified reference file
$ find -nouser          # ture if file belongs to no user
$ find -perm mode       # true if file matches the specified permission
$ find -print           # print full pathname of the current file
$ find -print()         # special version that compensates for spaces and other nonstandard char
$ find -size n          # default is 512-byte blocks, append c for bytes
                        # prepend + for "more than" or - for "less than"
$ find -type t          # true if file is of specifed type. 
                        # Common types are d for directories, f for regular files
$ find -user name       # true is file is owned by the specified user.



# example of complex find using the find primary along with a test to ensure
# that the matching files are regular files, not symbolic filess
# also shows file permissions, owner, group information, file size and last modification date
$ find /bin -size +60 -type f -ls

                    Atuls-MacBook-Pro:spy atulgolhar$ find /bin -size +60 -type f -ls
                    8598019769       88 -rwxr-xr-x    1 root             wheel              121296 Nov 30 02:39 /bin/launchctl
                    8598019749      408 -rwxr-xr-x    1 root             wheel              379952 Nov 30 02:39 /bin/csh
                    8598019805       16 -rwxr-xr-x    1 root             wheel               42704 Nov 30 02:39 /bin/wait4path
                    8598019795       24 -rwxr-xr-x    1 root             wheel               32208 Nov 30 02:39 /bin/stty
                    8598019759       56 -rwxr-xr-x    1 root             wheel               54080 Nov 30 02:39 /bin/ed
                    8598019781      112 -rwxr-xr-x    1 root             wheel              111280 Nov 30 02:39 /bin/pax

                    8598019741      680 -r-xr-xr-x    1 root             wheel              618416 Nov 30 02:39 /bin/bash
                    
                    8598019791      680 -r-xr-xr-x    1 root             wheel              618480 Nov 30 02:39 /bin/sh
                    8598019783       40 -rwsr-xr-x    1 root             wheel               51280 Nov 30 02:39 /bin/ps
                    8598019799      408 -rwxr-xr-x    1 root             wheel              379952 Nov 30 02:39 /bin/tcsh
                    8598019753       24 -rwxr-xr-x    1 root             wheel               32000 Nov 30 02:39 /bin/dd
                    8598019767     1440 -r-xr-xr-x    1 root             wheel             1282864 Nov 30 02:39 /bin/ksh
                    8598019775       40 -rwxr-xr-x    1 root             wheel               38704 Nov 30 02:39 /bin/ls
                    8598019797       16 -rwxr-xr-x    1 root             wheel               42400 Nov 30 02:39 /bin/sync
                    8598019807      720 -rwxr-xr-x    1 root             wheel              610224 Nov 30 02:39 /bin/zsh
                    8598019745       32 -rwxr-xr-x    1 root             wheel               34144 Nov 30 02:39 /bin/chmod
                    Atuls-MacBook-Pro:spy atulgolhar$ ls /bin
                    [       csh     ed      launchctl   mv      rmdir       tcsh
                    bash        date        expr        link        pax     sh      test
                    cat     dd      hostname    ln      ps      sleep       unlink
                    chmod       df      kill        ls      pwd     stty        wait4path
                    cp      echo        ksh     mkdir       rm      sync        zsh
                    Atuls-MacBook-Pro:spy atulgolhar$ ls -l /bin
                    total 5120
                    -rwxr-xr-x  1 root  wheel    22704 Nov 30 02:39 [
                    -r-xr-xr-x  1 root  wheel   618416 Nov 30 02:39 bash                    <<<<<<<<<<<<<<<
                    -rwxr-xr-x  1 root  wheel    23648 Nov 30 02:39 cat
                    -rwxr-xr-x  1 root  wheel    34144 Nov 30 02:39 chmod                   <<<<<<<<<<<<<<<
                    -rwxr-xr-x  1 root  wheel    29024 Nov 30 02:39 cp
                    -rwxr-xr-x  1 root  wheel   379952 Nov 30 02:39 csh                     <<<<<<<<<<<<<<<
                    -rwxr-xr-x  1 root  wheel    28608 Nov 30 02:39 date
                    -rwxr-xr-x  1 root  wheel    32000 Nov 30 02:39 dd                      <<<<<<<<<<<<<<<
                    -rwxr-xr-x  1 root  wheel    23392 Nov 30 02:39 df
                    -rwxr-xr-x  1 root  wheel    18128 Nov 30 02:39 echo
                    -rwxr-xr-x  1 root  wheel    54080 Nov 30 02:39 ed                      <<<<<<<<<<<<<<<
                    -rwxr-xr-x  1 root  wheel    23104 Nov 30 02:39 expr
                    -rwxr-xr-x  1 root  wheel    18288 Nov 30 02:39 hostname
                    -rwxr-xr-x  1 root  wheel    18688 Nov 30 02:39 kill
                    -r-xr-xr-x  1 root  wheel  1282864 Nov 30 02:39 ksh                     <<<<<<<<<<<<<<<
                    -rwxr-xr-x  1 root  wheel   121296 Nov 30 02:39 launchctl               <<<<<<<<<<<<<<<
                    -rwxr-xr-x  1 root  wheel    19024 Nov 30 02:39 link
                    -rwxr-xr-x  1 root  wheel    19024 Nov 30 02:39 ln
                    -rwxr-xr-x  1 root  wheel    38704 Nov 30 02:39 ls                      <<<<<<<<<<<<<<<
                    -rwxr-xr-x  1 root  wheel    18592 Nov 30 02:39 mkdir
                    -rwxr-xr-x  1 root  wheel    24240 Nov 30 02:39 mv
                    -rwxr-xr-x  1 root  wheel   111280 Nov 30 02:39 pax                     <<<<<<<<<<<<<<<
                    -rwsr-xr-x  1 root  wheel    51280 Nov 30 02:39 ps                      <<<<<<<<<<<<<<<
                    -rwxr-xr-x  1 root  wheel    18272 Nov 30 02:39 pwd
                    -rwxr-xr-x  1 root  wheel    23968 Nov 30 02:39 rm
                    -rwxr-xr-x  1 root  wheel    18176 Nov 30 02:39 rmdir
                    -r-xr-xr-x  1 root  wheel   618480 Nov 30 02:39 sh                      <<<<<<<<<<<<<<<
                    -rwxr-xr-x  1 root  wheel    18080 Nov 30 02:39 sleep 
                    -rwxr-xr-x  1 root  wheel    32208 Nov 30 02:39 stty                    <<<<<<<<<<<<<<<
                    -rwxr-xr-x  1 root  wheel    42400 Nov 30 02:39 sync                    <<<<<<<<<<<<<<<
                    -rwxr-xr-x  1 root  wheel   379952 Nov 30 02:39 tcsh                    <<<<<<<<<<<<<<<
                    -rwxr-xr-x  1 root  wheel    22704 Nov 30 02:39 test
                    -rwxr-xr-x  1 root  wheel    23968 Nov 30 02:39 unlink
                    -rwxr-xr-x  1 root  wheel    42704 Nov 30 02:39 wait4path               <<<<<<<<<<<<<<<
                    -rwxr-xr-x  1 root  wheel   610224 Nov 30 02:39 zsh                     <<<<<<<<<<<<<<<
                    Atuls-MacBook-Pro:spy atulgolhar$ 



---- ---- Exploring find Permission Strings  
# find lets you search for files that match specific permission settings
# permissions are specified in the sequence of
who op perm 
# who can be a, u g or o                               all user group other 
# op can be only be =
# perm can be r w s or x                               r read permission, w write permission, 
#                                                      x execute permission, s special set-user-ID-on-execution
# examples with -perm primary 

$ find /usr/bin -name "z*" -type f -perm +u=w -print
# what does this do? to find all files in the usr/bin directory
# whose names start with letter z and that you have write permission for
                Atuls-MacBook-Pro:spy atulgolhar$ find /usr/bin -name "z*" -type f -perm +u=w -print
                /usr/bin/zgrep
                /usr/bin/zmore
                /usr/bin/zdiff
                /usr/bin/zipgrep
                /usr/bin/zless
                /usr/bin/zprint
                /usr/bin/zipdetails5.18
                /usr/bin/znew
                /usr/bin/zipcloak
                /usr/bin/zipnote
                /usr/bin/zipsplit
                /usr/bin/zip
                /usr/bin/zcat
                /usr/bin/zcmp
                /usr/bin/zegrep
                /usr/bin/zipinfo
                /usr/bin/zfgrep
                /usr/bin/zipdetails
                /usr/bin/zforce
# but we dont have write permission on any of these files
                $ ls -l /usr/bin/zcat
                -rwxr-xr-x  1 root  wheel  53712 Nov 30 02:39 /usr/bin/zcat
# so the problem here is that find takes the test literally. It looks for files that
# have write permission for their owner.
# When author said "that you have write permission for", the author was mistating
# the test in a way that is quite common for Unix folk.
# To tighten this find search to files for which you actually have write permission for,
# you need to add a -user predicate. And to make this as general as possible, use $USER variable
$ find /usr -type f -user $USER -perm +u=w
Atuls-MacBook-Pro:~ atulgolhar$ find /usr -type f -user $USER -perm +u=w
# this does in fact return long results. This means ATUL has a problem with the 
# permissions on the files and directories in the /usr tree. 
# Author suggests trying to fix by just restarting your system b/c OSX automatically
# fixes disk permissions automatically in El Capitan.
# Why this matters?
# (1) Making sure your disk permissions are correct keeps applications from telling
# you that you dont have permission to save a file when in fact you know that you do.
# (2) And it keeps security problems and obscure application behavior from cropping up.


---- ---- Using find to Identify Recently Changed Files 
# helps to ensure files shares across multiple machines stay in sync
# find using time tests behave differently depending upon whether you specify
# (1) an exact value, (2) value prefaced with a -, or (3) value prefaced with a +

$ find . -cmin 60 -print                # files changed exactly 60 min ago
$ find . -cmin -60 -print -type f       # files changed within the last 60 min

# adding -type f as another primary if all you seek in your results is actual files
# (these are plain files) perhaps for backing up to a DVD

# lists all files that have been changed more than 60 min ago.
$ find . -cmin +60 | wc -l
    242042

# now add primary for plain files that have not been changed
$ find . -cmin +60 -type f | wc -l
    179624
# note difference is 62,418 directories and files that have not been changed.

# this time test can be cast across entire filesystem to see what's changing
# check this for what changed in the last 10 minutes
$ sudo find / -cmin -4 -type f -user root | wc -l
    26
# author used 10 minutes, I used 4 minutes and printed count
$ sudo find / -cmin -10 -type f -user root -print 


---- ---- finds Faithful Sidekick: xargs 
# what is a missing a primary that allows you to look inside files such as grep
# its missing b/c "find" does not know how to open any files.
# all find does is focus upon attributes (ie only searches attributes)
# note that if there was a primary that allowed you to look inside then the solution would be
$ find | grep                   # but grep can NOT do this
$ find | xargs grep pattern     # yes can do this (see below)
# so dilemma exists: (1) you can easily generate a list of files to search BUT
# (2) but there is no easy way to give that list to grep in a way that the 
# the program can understand.

# xargs is the partner program to find
# xargs turns stream of filenames into iterative calls to whatever program is specified
# with a subset of filenames listed on the command line itself.

# example to explain this
# lets say the output of find is a list of four files: one, two, three, and four
# using xargs, these files could be given to grep two at a time using this:
$ find | xargs grep pattern 
# grep sees this command as the following
$ grep pattern one two
$ grep pattern three four 

$ find /var/log -not -name "*.gz" -type f -size +0 -print 
# this a complex find command
# (1) can reverse the logic of any find test by prefacing it with the -not primary.
# so the first test is to find all the files whose names do NOT 
# match the pattern *.gz 
# Why? this ensure we dont search in compressed files (gzip files)

# if you wanted to scan thru all these files for any possible security warnings
# you might try
$ find /var/log -not -name "*gz" -type f -size +0 -print | grep -i warning 
# but this wont work b/c its scanning the filename list for the pattern
# and none of the filenames contains "warning"
# so to look inside each file, use xargs to pass these filenames to grep
# and since your looking inside these files, add sudo
$ find /var/log -not -name "*gz" -type f -size +0 -print | sudo xargs grep -i warning 

# this the general pattern you use to searching inside lots of files matched by find command
# which might include shell scripts, plain-text files, email message archives, and more.

# to address filenames with spaces inside, just switch two things
# -print to -print0
# add -0 flag to xargs
$ find $HOME -name "html" -print0 | xargs -0 grep -i intuitive.com
# this finds all HTML files in home directory, and searches inside them for
# references to the intuitive.com domain. Plus it will handle spaces in the filenames.


---- ---- Further Refinements to find 
# can be used to create more sophisticated filtering patterns - use these

# -not  or can use ! but should use it as \!
# if you dont use \! then bash will misinterpret it and give error messages 

# -or to allow for logical OR tests rather than default primary AND 
# example
$ find . -type f ( -name "" -or -name "" ) -print
# $ find . -type f \( -name "*.txt" -or -name ".htm" \) -print

# easy way to do this?
# always quote expressions that include asterisk and backslash-escape the parens


----Shing a Light on Spotlight 
# Spotlight indexes and stores metadata for all files on your system so
# if looking for file by name use
locate
find 
# but if looking for all images taken by Nikon camera use Spotlight
mdls
mdfind 
# here Spotlight builds a metadata database 

---- ---- Listing Spotlight Metadata with mdls 

cd desktop
$ mdls img_1087.jpg 


---- ---- Finding Files with mdfind 

# find is weird sytnax
# mdfind is even more wierd so learn it
# mdfind matches files that meet a specific 
$ mdfind "metadata_field_name == 'pattern'"

$ mdfind "kMDItemAcquistionModel == 'NIKON*'" | head 
# to contain the search to specific subdirectory --> use a flag called -onlyin 
# follwed by directory name

# to search all songs in Jazz collection within Music subdirectory
$ mdfind -onlyin ~/Music "kMDItemMusicalGenre == 'Jazz'"


# to search for Jazz word anywhere in metadata
$ mdfind -onlyin ~ Jazz | head
# note this will search
# 1) metadata
# 2) file names
# 3) plain text files where word appears in text itself


---- ---- Making Spotlight Useful 

# to search size of pixels of your JPEG files, use height and width using grep
$ mdls IMG_1912.JPG | grep -E '(PixelHeight|PixelWidth)'

# to identify duration of audio file without loading it into iTunes
$ mdls "06 Elise affairSongName.mp3" | grep Duration 

# use find and xargs to identify files by name and then extract specific charactistics
$ find . -name "*jpg" -print0 | xargs -0 mdls | xargs -0 mdls | grep FocalLength

# use mdfind in the same manner
# using -0 flag to allow possible match of filenames that have spaces
$ mdfind -0 "metadata_field_name == 'pattern'" | xargs -0 mdls | grep -E '()'

$ mdfind -0 "kMDItemFocalLength == '35'" | xargs -0 mdls | grep -E '(PixelHeight|PixelWidth|DisplayName)'
# this will match all pictures on the entire system with focal local length 35 (ie taken with 35 mm lens)
# and then displays INTERNALLY all files with those variables 
# and then searches and displays the Height, Width and Name of each image it finds

# to make it even better --> write shell script wherein parse output, reformat it as desired
# See later in this book.
$ photosize Peanut.jpg 
800x531 at 300 DPI 

# author - as of 2016, Spotlight commands have not been refined by Apple yet. Future code revisions to
# Spotlight could make Spotlight commands really powerful tools

        """
        # Learning Unix for OS X - Going Deep With The Terminal and Shell - Dave Taylor 2016
        -----------------------------------------------------------------------------------------------
        Chapter 
        1 Why Use Unix? 
        2 Using the Terminal 
        3 Exploring the Filesystem
        4 File Management 
        5 Finding Files and Information 
        6 Redirecting I/O 
        7 Multitasking 
        8 Taking Unix Online 
        9 Of Windows and X11
        10 Where to go from here 
        --------------------------------------------------------------------------------------------
        """

-----------------------------------------------------------------------------------------------
Chapter 
6 Redirecting I/O 

# line oriented vs screen oriented

----Standard Input and Standard Output (plus "I/O redirection")

# Terminal commands provide Standard Input, what comes back is Standard Output
# normal Standard Output is to the screen
# note that you can change this. Called I/O redirection

# Variations:
# 1) to write to file, use > symbol followed by file name to which output is saved
# 2) to connect output of file 1 to input of file 2, called Pipes and Filters, then build a pipe
#    to build a pipe, output of find was given to wc (word count)
# 3) file does not normally read from files, but reads from standard input, then you can redirect
#    it to read from a file by using the symbol < followed by the file name

# tr program (character translator) allows demonstration b/c it reads from standard input
# Steps
# create plain text tile
$ touch todo 
# using text editor, save the text
        1. Wake up
        2. Look in mirror
        3. Sigh
        4. Go back to bed.
$ ls -l *do
        -rw-r--r--  1 atulgolhar  staff  55 Jan 21 18:41 todo
        # now verified correct pwd and file exists
# use tr program to change text
# tr replaces every vowel in the input file with correspdoning characters in the second set
$ tr '[aeiou]' '[XXXXX]' < todo
        1. WXkX Xp
        2. LXXk Xn mXrrXr
        3. SXgh
        4. GX bXck tX bXd.
# display in Terminal to verify original file not changed
$ open todo         # open file in new window and displays text
# to 
$ cat todo          # display what is in the file in existing window
        1. Wake up
        2. Look in mirror
        3. Sigh
        4. Go back to bed.Atuls-MacBook-Pro:spy atulgolhar$ 
# or can verify original file not changed by opeing in Eclipse or 
$ open todo
        1. Wake up
        2. Look in mirror
        3. Sigh
        4. Go back to bed.


---- ----Putting Text in a File 
# instead of letting output come to screen, you can redirect to a file
$ cat file(s)       # to display files to the standard output (your screen)

# from any directory
        $ cat /etc/bashrc
        # System-wide .bashrc file for interactive bash(1) shells.
        if [ -z "$PS1" ]; then
           return
        fi

        PS1='\h:\W \u\$ '
        # Make bash check its window size after a process completes
        shopt -s checkwinsize

        [ -r "/etc/bashrc_$TERM_PROGRAM" ] && . "/etc/bashrc_$TERM_PROGRAM"

# note with cat, you can not go back to view the previous screen, as you can when you use a 
# pager program such as less (unless you use a Terminal window with sufficiently large scrollback buffer)
# b/c of this cat is mainly used for redirection.

# if enter cat without filename then it just sits there without a system prompt. Nothing is broken.
# cat simply reads from the keyboard, until end-of-file character is sent, and echoes each line
# of what you typed to standard output (your screen).
# To exit, press ControlD which ends the input file for the program.
# When you add > filename to the end of the command line, then output is diverted from the
# standard output to a file.
# > is called the "output redirection operator".

# example use cat with output redirective operator
$ cat /etc/bashrc > mybashrc
$ cat mybashrc


$ cat /etc/bashrc > mybashrc
$ cat mybashrc
        # System-wide .bashrc file for interactive bash(1) shells.
        if [ -z "$PS1" ]; then
           return
        fi

        PS1='\h:\W \u\$ '
        # Make bash check its window size after a process completes
        shopt -s checkwinsize

        [ -r "/etc/bashrc_$TERM_PROGRAM" ] && . "/etc/bashrc_$TERM_PROGRAM"

# dont step on your own files by redirecting and thus "clobbering" a much needed file
$ set noclobber
# in bash use set noclobber
# or
# in profile use this code within profile
# thus shell wont allow you to redirect onto an existing file and overwrite its contents
# Note that this does not protect against overwritting by Unix programs such as cp
# it only works with the > redirection operator.
# For more protection, you can set Unix file access permissions (see "Setting Permissions
# with chmod" on page 67)

# summary so far
# cat /etc/bashrc displays the file on screen
# add the > operator so the outputof cat goes to the file called mybashrc

# dont need to use cat command, as > operator works with any program that sends text
$ who > users 
$ date > today 
$ ls 

# can use > to make a small text file
$ cat new-todo
# its blank at this point but cursor allows you to keep typing b/c no Control D yet
# so keep typing:

Finish report by noon
Lunch with Ashley at Panera Needham at noon
Swim at 5:30pm
^D

# so now redo command

$ cat new-todo
Finish report by noon
Lunch with Ashley at Panera Needham at noon
Swim at 5:30pm
^D

# and output is above.
# what happended?
# cat takes the text you typed as input (4 lines plus blank line = 5 total lines)
# and then the > operator redirects it to a file called new-todo

# you can also create a bigger file from smaller files with the cat command and > operator
$ ls -l *to*
lrwxr-xr-x  1 atulgolhar  staff   5 Jan  4 13:01 nato_pic_link.pdf -> chbio
-rw-r--r--  1 atulgolhar  staff  85 Jan 21 21:56 new-todo
-rw-r--r--  1 atulgolhar  staff  29 Jan 21 21:53 today
-rw-r--r--@ 1 atulgolhar  staff  55 Jan 21 18:41 todo

chtoc:

# note that text from INSIDE a file is also included as output
$ cat today
        Mon Jan 21 21:53:20 EST 2019
        Atuls-MacBook-Pro:spy atulgolhar$ cat users
        atulgolhar console  Jan 21 12:35 
        atulgolhar ttys000  Jan 21 20:54 

$ cat new-todo
        Finish report by noon
        Lunch with Ashley at Panera Needham at noon
        Swim at 5:30pm
        ^D

$ cat todo
        1. Wake up
        2. Look in mirror
        3. Sigh
        4. Go back to bed.

$ cat today users todo > diary1

$ cat diary1
        Mon Jan 21 21:53:20 EST 2019
        atulgolhar console  Jan 21 12:35 
        atulgolhar ttys000  Jan 21 20:54 
        1. Wake up
        2. Look in mirror
        3. Sigh
        4. Go back to bed.

# warning - dont use redirection to add a file to itself
# better way is to add more text to the end of an existing file using 
# >> append redirector operator
# example f
$ cat file2 >> file1
# no effect upon file2

$ cat diary1 
$ date >> diary1
$ cat diary1 
# appends date to file diary1

# Unix has no operator to append onto the beginning of a file but you can accomplish by 
# renaming old file then rebuilding the contents as needed
# example
# each day's entry to go to the beginning of diary file
# simply rename diary to older.diary
# make new diary file with today's entries
# then append older.diary (with its old contents) to the new diary
$ mv        # move into new file and deletes old file 
$ >         # creates new file 
$ >>        # append
$ >>        # append
$ rm        # deletes specified file


$ mv diary older.diary              # move diary contents into older.diary and eliminates diary
$ date > diary                      # move current date and create diary file
$ cat users >> diary                # append users contents into diary
$ cat older.diary >> diary          # append older.diary contents into diary
$ rm older.diary                    # eliminate older.diary



---- ----Piles and Filters
# any two commands can form a pipe, as long as 1st program writes standard output and 
# 2nd program reads from standard input
# filter = when a program takes its input from another program, performs some operation on that
#          input, and writes the result to the standard output (or pipes it).

$ ls -l $HOME | colrm 1 30      # column remove command
$ ls -l $HOME | colrm 1 30 > homedirlist.txt
$ cat homedirlist.txt 
$ ls -l | colrm 1 30 > spydirlist.txt

---- ---- ---- wc       # word count utility
# counts characters, words, and lines in the input file or standard input but can 
# constrain output to report just characters (-c), words (-w), or lines (-l)


# classic example is how many core files are within the filesystem?
# they use .core
# what are they? crashed program debugging datafiles
# do it by call to find with output piped to wc
$ sudo find / -name "*.core" -print | wc -l
        22

# more common use of find and wc together is to count larger output streams.
# example, how many directories have within Documents directory
$ find ~/Documents -type d -print | wc -l
        84

---- ---- ---- tr       # translator characters utility
# to replace all occurrences of one character with another character
$ tr "x" "y"

# turn lowercase into uppercase
$ tr "[:lower:]" "[:upper:]" < todo
$ cat todo                              # to display text from todo file
# todo2 contains lowercase. above tr code displays all upper BUT original todo file not changed
# so tr program temporarily changes text

$ cat todo >> "DD"      # takes text from todo file and appends (creates) DD file

# AUTHOR (example did not work)
# tr command has a number of different options for power users, including
# -c to invert the specified pattern (tr -c "abc" will output anything other than a, b or c)

$ tr -d "[aeiou]" < todo 
# displays todo while deleting characters aeiou


# Appears to count the number of words per file
# AUTHOR -s flag tells it to output only one occurrence of a character if more
# than one character is found. So Lewis Carroll's Alice's Adventures in Wonderland
# contains just over 29,000 words.
# You can download this script yourself at http://intuitive.com/wicked/scripts/alice.txt.gz
# Error 404

$ tr -cs "[:alpha:]" "\n" < alice.txt | wc -l
# ATUL but this seems to count the number of words per line.
$ tr -cs "[:alpha:]" "\n" < todo_line1 | wc -l
       3
$ cat todo_line1
        1. Wake up
$ cat todo
        1. Wake up
        2. Look in mirror
        3. Sigh
        4. Go back to bed.
$ tr -cs "[:alpha:]" "\n" < todo_line2 | wc -l
       4
$ tr -cs "[:alpha:]" "\n" < todo_line3 | wc -l
       2
$ tr -cs "[:alpha:]" "\n" < todo_line4 | wc -l
       5

$ tr -cs "[:alpha:]" "\n" < todo | wc -l
      11

#but this seems to refute the above explanation?
$ cat todo2
        1. Wake up
        1. Wake up
        1. Wake up
        1. Wake up
$ tr -cs "[:alpha:]" "\n" < todo2 | wc -l
       9

# ATUL - Univ of Michigan scripts


---- ---- ---- grep 
# grep searches the contents of files for lines that contain certain patterns
grep "pattern" file(s)
# earlier discussion focused on how grep helps you search through files to 
# find lines that match a specified pattern.

# grep for pipes can help you weed out the few lines you care about from thousands lines.
$ mdfind ipod | wc -l                           # total count
        36
$ mdfind ipod | grep -v "Library" | wc -l       # exclude "Library"
        11
$ mdfind ipod | grep -v "Library" | grep "/Desktop/" | wc -l    # and include "/Desktop/" 
        2
# THIS WORKS!!!!
# Notice, you can build pipelines that are 2, 3, 4 or even 10 or 20 commands long.
# Unix has no limit on how complex your pipes can be.
# AUTHOR commonly works with pipes that are 6 or 7 commands long.


tr -cs "[:alpha:]" "\n" < AliceInWonderlandANSI.txt | wc -l
   27341
# contains this many words

---- ---- ---- head and tail  
# default peek at first and last 10 lines of output
# n = specified number of lines
# example
$ tr -cs "" "" < alice.txt | tail -15
$ tr -cs "[:alpha:]" "\n" < alice.txt | tail -15

$ tr -cs "[:alpha:]" "\n" < AliceInWonderlandANSI.txt | tail -15        # last 15 words
        their
        simple
        joys
        remembering
        her
        own
        child
        life
        and
        the
        happy
        summer
        days
        THE
        END

$ cat AliceInWonderlandANSI.txt >> Alice
$ tr -cs "[:alpha:]" "\n" < Alice | tail -15
$ tr -cs "[:alpha:]" "\n" < AliceInWonderlandANSI.txt | head -15

# displays text lines starting at line 255 and working 5 backwards
$ head -255 Alice.txt | tail -5         
        surprised, that for the moment she quite forgot how to speak good
        English); `now I'm opening out like the largest telescope that'
        ever was!  Good-bye, feet!' (for when she looked down at her'
        feet, they seemed to be almost out of sight, they were getting so
        far off).  `Oh, my poor little feet, I wonder who will put on

# displays text lines starting at line 10 and working 5 backwards
$ head -10 Alice.txt | tail -5 


---- ---- ---- sort 
# arranges lines of text alphabetically or numerically
$ sort AlicePartial

# flag options
$ sort AlicePartial -n      # -n numerically 
$ sort AlicePartial -r      # -r reverse order
$ sort AlicePartial -f      # -f sort upper and lower case together
$ sort AlicePartial -k x    # -k x sort by the key at position x

# pipe commands here using grep to sort files modified in January by order size
# ls grep sort
$ ls -l | grep "Jan" | sort -n -k 5
# both grep and sort modify output from ls -l command
# sorts all files in working directory modified in January by order of size and
# displays them to Terminal screen
# sort -n option forces a numeric specific sort
# -k 5 uses the fifth field as the sort key (ie fifth field = fifth column)

# sort can be used to identify extremes of a list to id largest files on the system
# use find and xargs to generate list of all files one per line 
# including their size in 512-byte blocks, 
# then feeding that to sort -rn (reverse, numeric) and 
# then looking at the top few:
$ find . -type f -print0 | xargs -0 ls -s1 | sort -rn | head

# can also add username to match all files owned by that user
$ find -user username 


---- ---- ---- uniq         # unique
# given uniq a stream of input, and it silently eliminates consecutive duplicate lines
# add -c flag which counts frequency of each line occurrence.

# so pair sort and uniq
# how many unique words occur in Alice In Wonderland? (actually total number of words)
$ tr -cs "" "" < Alice.txt | uniq | wc -l
$ tr -cs "[:alpha:]" "\n" < Alice.txt | uniq | wc -l
        27315

# this is not correct b/c uniq needs to have the input sorted
# so add sort primary
$ tr -cs "[:alpha:]" "\n" < Alice.txt | sort | uniq | wc -l
        2960
# but here "Hello" is differnt from "hello"

# to ensure Lower case is sorted from Upper case (ie "Hello" and "hello" are one word)
# thus need to make all letters lowercase then sort
$ tr -cs "[:alpha:]" "\n" < Alice.txt | tr "[A-Z]" "[a-z]" | sort | uniq | wc -l
        2577
# so entire novel is written using 2,577 words


---- ---- ---- Piping Output to a Pager 
# use less program as a filter (display stops on screen)
# also called pagers as you see the output page by page

$ cd /bin 
$ ls -l | sort -nk 5 | less 
# less reads screen of text from the pipe
# then prints a colon : prompt
# now you can type a less command to move through the sorted text
# less again reads more text from the pipe, and allows forward backward quit

# less commands
# d scroll down 1/2 of screen size
# u scroll up
# b scroll back one screen
# f scroll forward one screen
# g jump to beginning of file
# G jump to end of file
# /pat scroll forward until a line containing specified pattern is given
# ?pat scrolls backward
# n repeat previous search
# :n move the next file in the file list
# v open the file in vi
# q quit


----Printing 
# print directly from Unix command line in OS X.
# pure Unix way is using the lp command series
# or can use the Bonjour network

---- ---- The Unix Way 
# need to configure printer 
# Apple Menu -> System Preference -> Printers&Scanners -> + button

---- ---- ---- lpstat 
$ lpstat -a 
        lpstat: No destinations added.
# slpstat -d        default
# slpstat -t        gives lots of info

---- ---- ---- lp 
$ ls -l | lp        # prints output of ls -l

---- ---- ---- pr 
# pr                pr program does minor formatting
pr option(s) filename(s)

# flags
# -n            produces n columns of output
# -d            doubles spaces output
# -h header     prints header at the top of each page
# -t            eliminates header and top/bottom margins
# other options include width of columns, set of page length, etc

$ touch food
$ open food
$ cat food
        Sweet Tooth
        Bangkok Wok
        Mandalay
        Afghani Cuisine
        Isle of Java
        Big Apple Deli
        Sushi and Sashimi
        Tio Pepe's Peppers'
$ pr -2 -h "Restaurants" food           # prints two-column with header

# to print to actual printer use printer program
$ pr -2 -h "Restaurants" food | lpr     # lpr is name of the printer program

        """
        # Learning Unix for OS X - Going Deep With The Terminal and Shell - Dave Taylor 2016
        -----------------------------------------------------------------------------------------------
        Chapter 
        1 Why Use Unix? 
        2 Using the Terminal 
        3 Exploring the Filesystem
        4 File Management 
        5 Finding Files and Information 
        6 Redirecting I/O 
        7 Multitasking 
        8 Taking Unix Online 
        9 Of Windows and X11
        10 Where to go from here 
        --------------------------------------------------------------------------------------------
        """

-----------------------------------------------------------------------------------------------
Chapter 
7 Multitasking 
# in OS X, multitasking means running at same time appears concurrently
# in Unix, multitasking means concurrently, controlled using job control
job control
# allows job to run in the foreground as well as background

----Running a Command in the Background
# done when program will take long time to run but want to use Terminal for another program
# to do this add & at end of the command 
# example 
$ sort bigfile > bigfile.sort &            
        [1] 372 
# sorting is a good example b/c it can take a long time to sort huge files
# PID = process ID number 
# to check on the status of that process, use ps command
$ ps -fp 372

# to cancell a process use kill command
$ kill PID
$ kill 372
# dont need to remember the PID every time, as Unix command exist
# in Bash allows entire sequence of commands separated by ; and & and end of line
$ (command1; command2) &

# Unix offers job control allowing for the 
# suspend character (CONTROL Z) to suspend program running in the foreground
# gives new shell prompt.
# bg        to put suspended program into background
# fg        brings suspended or background process to the foreground

# example
# running sort on large file, then decide to edit another file, so
# stop sort with CONTROL Z, then put it into background with bg
# then get you are given new shell prompt allowing you to start vi
# while sort runs in background
$ sort hugefile1 hugefile2 > sorted
...time goes by...
^Z
stopped 
$ bg 
[1]     sort hugefile1 hugefile2 > sorted & 
$ vi test.txt 


----Checking on a Process 
# if background process seems to be taking too long, or change your mind, 
# want to just check on status, or cancel it

---- ---- ps        # process status command
# shows process that are running, how long active, Terminal from which it was launched
# tty shows name of the Terminal where your logged in from (useful if your logged
#     into multiple machines)
#     In Unix, each Terminal has its own name
$ ps
      PID TTY           TIME CMD
      653 ttys000    0:00.02 -bash
$ tty
        /dev/ttys000

# to see which processes a specific user is running, try this
$ ps -U atulgolhar

      PID TTY           TIME CMD
      287 ??         0:01.05 /usr/sbin/cfprefsd agent
      288 ??         0:01.89 /usr/libexec/UserEventAgent (Aqua)
      290 ??         0:00.36 /usr/sbin/distnoted agent
      291 ??         0:00.68 /usr/sbin/universalaccessd launchd -s
      292 ??         0:01.10 /System/Library/Frameworks/CoreTelephony.framework/Support/CommCenter -L
      293 ??         0:00.29 /usr/libexec/lsd
      294 ??         0:03.20 /usr/libexec/trustd --agent
      295 ??         0:00.43 /Applications/Stickies.app/Contents/MacOS/Stickies -psn_0_32776
      296 ??         0:00.14 /System/Library/CoreServices/sharedfilelistd
      297 ??         0:00.48 /System/Library/CoreServices/talagent
      298 ??         0:02.27 /System/Library/CoreServices/Dock.app/Contents/MacOS/Dock
      299 ??         0:02.56 /System/Library/CoreServices/SystemUIServer.app/Contents/MacOS/SystemUISer
      300 ??         0:01.32 /System/Library/CoreServices/Finder.app/Contents/MacOS/Finder
      302 ??         0:03.55 /usr/libexec/secd
      305 ??         0:00.11 /usr/libexec/pboard
      306 ??         0:02.33 /System/Library/PrivateFrameworks/CloudKitDaemon.framework/Support/cloudd
      307 ??         0:00.41 /System/Library/PrivateFrameworks/ViewBridge.framework/Versions/A/XPCServi
      309 ??         0:00.98 /System/Library/PrivateFrameworks/TelephonyUtilities.framework/callservice
      310 ??         0:00.40 /System/Library/PrivateFrameworks/TCC.framework/Resources/tccd
      311 ??         0:01.33 /usr/libexec/nsurlsessiond
      313 ??         0:02.44 /System/Library/PrivateFrameworks/IDS.framework/identityservicesd.app/Cont
      315 ??         0:00.54 /System/Library/Frameworks/ApplicationServices.framework/Frameworks/ATS.fr
      316 ??         0:04.26 /System/Library/Frameworks/Accounts.framework/Versions/A/Support/accountsd
      318 ??         0:01.83 /System/Library/CoreServices/Spotlight.app/Contents/MacOS/Spotlight
      319 ??         0:01.40 /System/Library/PrivateFrameworks/IMCore.framework/imagent.app/Contents/Ma
      322 ??         0:07.58 /System/Library/PrivateFrameworks/IMDPersistence.framework/XPCServices/IMD
      323 ??         0:00.85 /usr/libexec/pkd
      325 ??         0:00.09 /System/Library/Frameworks/Security.framework/Versions/A/Resources/CloudKe
      328 ??         0:00.41 /System/Library/PrivateFrameworks/CloudDocsDaemon.framework/Versions/A/Sup
      330 ??         0:00.23 /System/Library/Frameworks/AddressBook.framework/Executables/ContactsAccou
      332 ??         0:00.66 /usr/libexec/secinitd
      335 ??         0:02.01 /usr/libexec/routined LAUNCHED_BY_LAUNCHD
      338 ??         0:00.22 /usr/libexec/rapportd
      342 ??         0:00.47 /usr/sbin/usernoted
      343 ??         0:00.77 /System/Library/PrivateFrameworks/CoreParsec.framework/parsecd
      344 ??         0:00.86 /System/Library/PrivateFrameworks/UserActivity.framework/Agents/useractivi
      345 ??         0:01.72 /System/Library/CoreServices/NotificationCenter.app/Contents/MacOS/Notific
      346 ??         0:00.90 /System/Library/PrivateFrameworks/CommerceKit.framework/Versions/A/Resourc
      347 ??         0:00.57 /System/Library/PrivateFrameworks/GeoServices.framework/Versions/A/XPCServ
      349 ??         0:00.09 /System/Library/CoreServices/backgroundtaskmanagementagent
      350 ??         0:00.63 /System/Library/CoreServices/Dock.app/Contents/XPCServices/com.apple.dock.
      351 ??         0:00.04 /System/Library/Frameworks/CryptoTokenKit.framework/ctkahp.bundle/Contents
      352 ??         0:00.21 /System/Library/CoreServices/iconservicesagent
      353 ??         0:00.03 /System/Library/Frameworks/CryptoTokenKit.framework/ctkd -tw
      355 ??         0:03.09 /usr/libexec/sharingd
      356 ??         0:00.44 /System/Library/PrivateFrameworks/AuthKit.framework/Versions/A/Support/akd
      358 ??         0:00.13 /System/Library/PrivateFrameworks/CoreWLANKit.framework/Versions/A/XPCServ
      360 ??         0:00.03 /System/Library/Frameworks/LocalAuthentication.framework/Support/coreauthd
      362 ??         0:04.03 /System/Library/PrivateFrameworks/MessagesKit.framework/Resources/soagent.
      365 ??         0:00.46 /System/Library/PrivateFrameworks/HomeKitDaemon.framework/Support/homed
      366 ??         0:00.11 /System/Library/PrivateFrameworks/FileProvider.framework/Support/fileprovi
      367 ??         0:19.15 /System/Library/PrivateFrameworks/CalendarAgent.framework/Executables/Cale
      368 ??         0:00.26 /System/Library/Frameworks/InputMethodKit.framework/Resources/imklaunchage
      370 ??         0:00.23 /System/Library/PrivateFrameworks/CallHistory.framework/Support/CallHistor
      371 ??         0:00.42 /System/Library/CoreServices/CoreLocationAgent.app/Contents/MacOS/CoreLoca
      372 ??         0:00.21 /System/Library/Input Methods/PressAndHold.app/Contents/PlugIns/PAH_Extens
      373 ??         0:03.23 /System/Library/PrivateFrameworks/CalendarNotification.framework/Versions/
      374 ??         0:00.39 /usr/libexec/fmfd
      375 ??         0:00.06 /System/Library/CoreServices/pbs
      376 ??         0:00.09 /System/Library/PrivateFrameworks/CommerceKit.framework/Versions/A/Resourc
      379 ??         0:00.41 /usr/libexec/nsurlstoraged
      380 ??         0:00.23 /System/Library/PrivateFrameworks/IMFoundation.framework/XPCServices/IMRem
      383 ??         0:02.46 /System/Library/Services/AppleSpell.service/Contents/MacOS/AppleSpell
      388 ??         0:00.10 /usr/libexec/networkserviceproxy
      389 ??         0:00.02 /System/Library/CoreServices/APFSUserAgent
      390 ??         0:00.07 /System/Library/PrivateFrameworks/ProtectedCloudStorage.framework/Helpers/
      391 ??         0:00.07 /usr/libexec/keyboardservicesd
      392 ??         0:00.03 /System/Library/PrivateFrameworks/IMFoundation.framework/XPCServices/IMRem
      393 ??         0:00.07 /System/Library/PrivateFrameworks/CommunicationsFilter.framework/CMFSyncAg
      394 ??         0:00.06 /System/Library/PrivateFrameworks/FamilyCircle.framework/Versions/A/Resour
      395 ??         0:00.31 /System/Library/CoreServices/WiFiAgent.app/Contents/MacOS/WiFiAgent
      396 ??         0:00.15 /System/Library/PrivateFrameworks/CloudDocsDaemon.framework/XPCServices/Co
      400 ??         0:00.03 /System/Library/PrivateFrameworks/CoreFollowUp.framework/Versions/A/Suppor
      402 ??         0:00.03 /usr/libexec/SidecarRelay
      404 ??         0:01.44 /usr/libexec/knowledge-agent
      405 ??         0:00.02 SafeEjectGPUAgent
      406 ??         0:00.03 /System/Library/CoreServices/Menu Extras/SafeEjectGPUExtra.menu/Contents/X
      407 ??         0:00.10 /usr/libexec/videosubscriptionsd
      408 ??         0:00.08 /usr/libexec/swcd
      409 ??         0:01.08 /System/Library/PrivateFrameworks/AssistantServices.framework/Versions/A/S
      410 ??         0:00.05 /System/Library/PrivateFrameworks/CoreSpeech.framework/corespeechd
      412 ??         0:00.04 /System/Library/CoreServices/SocialPushAgent.app/Contents/MacOS/SocialPush
      415 ??         0:00.10 /usr/libexec/dmd
      416 ??         0:00.52 /System/Library/CoreServices/Siri.app/Contents/MacOS/Siri launchd
      417 ??         0:00.20 /System/Library/Image Capture/Support/icdd
      418 ??         0:07.52 /Library/Application Support/WD Drive Agent/WD Drive Agent.app/Contents/Ma
      419 ??         0:00.40 com.github.GitHub.Conduit
      421 ??         0:00.40 /System/Library/CoreServices/AirPlayUIAgent.app/Contents/MacOS/AirPlayUIAg
      422 ??         0:00.94 /System/Library/CoreServices/cloudpaird
      423 ??         0:00.50 /System/Library/PrivateFrameworks/Noticeboard.framework/Versions/A/Resourc
      424 ??         0:00.15 /System/Library/CoreServices/diagnostics_agent
      425 ??         0:00.43 /usr/libexec/adprivacyd
      427 ??         0:00.23 /System/Library/PrivateFrameworks/AssetCacheServices.framework/Versions/A/
      429 ??         0:00.46 /System/Library/PrivateFrameworks/PrintingPrivate.framework/Versions/A/Pri
      433 ??         0:00.09 /System/Library/PrivateFrameworks/IMFoundation.framework/XPCServices/IMRem
      436 ??         0:11.25 /System/Library/PrivateFrameworks/CoreSuggestions.framework/Versions/A/Sup
      437 ??         0:00.14 /System/Library/PrivateFrameworks/CacheDelete.framework/deleted
      441 ??         0:00.05 /System/Library/CoreServices/Software Update.app/Contents/Resources/softwa
      445 ??         0:00.08 /System/Library/PrivateFrameworks/CommerceKit.framework/Versions/A/Resourc
      446 ??         0:01.14 /System/Library/PrivateFrameworks/CommerceKit.framework/Versions/A/Resourc
      449 ??         0:00.28 /System/Library/PrivateFrameworks/CommerceKit.framework/Resources/LaterAge
      453 ??         0:00.20 /System/Library/PrivateFrameworks/AssistantServices.framework/Versions/A/X
      456 ??         0:00.10 /System/Library/Frameworks/iTunesLibrary.framework/Versions/A/XPCServices/
      458 ??         0:00.35 /System/Library/CoreServices/CoreServicesUIAgent.app/Contents/MacOS/CoreSe
      468 ??         0:00.03 /usr/libexec/USBAgent
      477 ??         0:00.36 /System/Library/CoreServices/Siri.app/Contents/XPCServices/SiriNCService.x
      478 ??         0:04.31 /System/Library/CoreServices/SafariSupport.bundle/Contents/MacOS/SafariBoo
      487 ??         0:00.18 /System/Library/Frameworks/AudioToolbox.framework/AudioComponentRegistrar
      488 ??         0:00.02 /System/Library/Frameworks/AudioToolbox.framework/XPCServices/com.apple.au
      489 ??         0:00.53 /System/Library/CoreServices/cloudphotosd.app/Contents/MacOS/cloudphotosd
      492 ??         0:00.13 /System/Library/PrivateFrameworks/CloudPhotoServices.framework/Versions/A/
      494 ??         2:12.55 /System/Library/PrivateFrameworks/PhotoLibraryPrivate.framework/Versions/A
      495 ??         0:00.18 /System/Library/Frameworks/ApplicationServices.framework/Frameworks/ATS.fr
      498 ??         0:00.46 /System/Library/PrivateFrameworks/AppStoreDaemon.framework/Support/appstor
      499 ??         0:00.05 /System/Library/PrivateFrameworks/CommerceKit.framework/Versions/A/Resourc
      500 ??         3:36.75 /System/Library/PrivateFrameworks/PhotoAnalysis.framework/Versions/A/Suppo
      501 ??         0:00.08 /System/Library/CoreServices/ScopedBookmarkAgent
      502 ??         0:00.50 /System/Library/PrivateFrameworks/PhotoLibraryPrivate.framework/Versions/A
      504 ??         0:00.08 /System/Library/PrivateFrameworks/UsageTracking.framework/Versions/A/Usage
      505 ??         0:00.21 /System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.fram
      509 ??         0:00.33 /System/Library/PrivateFrameworks/CoreRecents.framework/Versions/A/Support
      511 ??         0:00.11 /System/Library/PrivateFrameworks/CoreSuggestions.framework/Versions/A/Sup
      530 ??         0:00.02 /usr/libexec/mobileactivationd
      533 ??         0:00.06 /System/Library/CoreServices/EscrowSecurityAlert.app/Contents/MacOS/Escrow
      534 ??         0:00.37 /System/Library/PrivateFrameworks/CloudServices.framework/Versions/A/XPCSe
      538 ??         0:00.03 /System/Library/PrivateFrameworks/CoreCDP.framework/Versions/A/Resources/c
      543 ??         0:00.06 /System/Library/PrivateFrameworks/CommerceKit.framework/Versions/A/XPCServ
      545 ??         0:00.16 /System/Library/PrivateFrameworks/PhotoLibraryPrivate.framework/Versions/A
      549 ??         0:00.05 /System/Library/PrivateFrameworks/QuickLookThumbnailing.framework/Support/
      552 ??         0:00.08 /System/Library/PrivateFrameworks/ContextKit.framework/Versions/A/XPCServi
      602 ??         0:00.21 /System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.fram
      630 ??         0:00.08 /System/Library/PrivateFrameworks/AOSKit.framework/Versions/A/XPCServices/
      643 ??         0:01.12 /System/Library/PrivateFrameworks/AssistantServices.framework/Versions/A/S
      647 ??         0:00.04 /System/Library/Frameworks/iTunesLibrary.framework/Versions/A/XPCServices/
      648 ??         0:19.47 /Applications/Sublime Text 2.app/Contents/MacOS/Sublime Text 2
      651 ??         0:01.39 /Applications/Utilities/Terminal.app/Contents/MacOS/Terminal
      705 ??         0:00.05 /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/CVMCompil
      722 ??         0:00.09 /usr/libexec/SafariCloudHistoryPushAgent
      723 ??         0:00.04 /usr/libexec/siriknowledged
      724 ??         0:00.06 /System/Library/PrivateFrameworks/FMClient.framework/Versions/A/XPCService
      726 ??         0:00.11 /System/Library/CoreServices/mapspushd
      810 ??         0:00.07 /System/Library/PrivateFrameworks/IMDPersistence.framework/IMAutomaticHist
      811 ??         0:00.30 /System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.fram
      813 ??         0:00.13 /usr/libexec/silhouette
      814 ??         0:00.09 /System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.fram
      815 ??         0:00.09 /System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.fram
      816 ??         0:00.36 /System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.fram
      817 ??         0:00.16 /System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.fram
      652 ttys000    0:00.02 login -pf atulgolhar
      653 ttys000    0:00.04 -bash
      821 ttys000    0:00.00 ps -U atulgolhar

# to see all processes that are running on the machine
# -a flag shows processes from all users
# -x flag shows all processes not connected with a Terminal session
# many of these are core processes run by OS X, while other may be graphical programs
# such as Safari

$ ps -ax 
        # gives longer list
          722 ??         0:00.12 /usr/libexec/SafariCloudHistoryPushAgent
      723 ??         0:00.04 /usr/libexec/siriknowledged
      724 ??         0:00.06 /System/Library/PrivateFrameworks/FMClient.framework/Versions/A/XPCService
      726 ??         0:00.11 /System/Library/CoreServices/mapspushd
      731 ??         0:00.01 /usr/libexec/periodic-wrapper daily
      808 ??         0:00.05 /System/Library/CoreServices/Software Update.app/Contents/Resources/softwa
      810 ??         0:00.07 /System/Library/PrivateFrameworks/IMDPersistence.framework/IMAutomaticHist
      811 ??         0:00.39 /System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.fram
      813 ??         0:00.13 /usr/libexec/silhouette
      814 ??         0:00.09 /System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.fram
      815 ??         0:00.09 /System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.fram
      816 ??         0:00.43 /System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.fram
      817 ??         0:00.16 /System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.fram
      822 ??         0:00.04 /System/Library/Frameworks/Metal.framework/Versions/A/XPCServices/MTLCompi
      823 ??         0:00.08 /System/Library/Frameworks/Metal.framework/Versions/A/XPCServices/MTLCompi
      652 ttys000    0:00.02 login -pf atulgolhar
      653 ttys000    0:00.04 -bash
      824 ttys000    0:00.00 ps -ax


$ ps -ax | head -20         # limits output to first 20 lines


$ ps -ax | head -20
      PID TTY           TIME CMD
        1 ??         0:31.18 /sbin/launchd
       58 ??         0:00.70 /usr/sbin/syslogd
       59 ??         0:00.82 /usr/libexec/UserEventAgent (System)
       62 ??         0:00.31 /System/Library/PrivateFrameworks/Uninstall.framework/Resources/uninstalld
       63 ??         0:02.92 /usr/libexec/kextd ####
       64 ??         0:05.76 /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/FSEvents.framework/Versions/A/Support/fseventsd
       66 ??         0:00.09 /System/Library/PrivateFrameworks/MediaRemote.framework/Support/mediaremoted
       69 ??         0:00.12 /System/Library/CoreServices/appleeventsd --server
       70 ??         0:02.22 /usr/sbin/systemstats --daemon
       72 ??         0:01.18 /usr/libexec/configd ###
       73 ??         0:01.52 /System/Library/CoreServices/powerd.bundle/powerd
       76 ??         0:04.05 /usr/libexec/logd
       77 ??         0:00.02 /usr/libexec/keybagd -t 15
       83 ??         1:26.04 /System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.framework/Support/mds
       84 ??         0:00.03 /System/Library/CoreServices/iconservicesd
       85 ??         0:00.57 /usr/libexec/diskarbitrationd ###
       89 ??         0:00.31 /System/Library/CoreServices/backupd.bundle/Contents/Resources/backupd-helper -launchd
       90 ??         0:00.97 /usr/libexec/coreduetd ###
       93 ??         0:04.19 /usr/libexec/opendirectoryd


        # kextd = OS kernel extension module
                /usr/libexec/kextd
        # configd = configuration management daemon
                /usr/libexec/configd ###
        # coredusted = audio utility 
                /usr/libexec/coreduetd ###
        # diskarbitrationd =  low-level disk management program
                /usr/libexec/diskarbitrationd ###
        # CoreServices = etc... (AUTHOR)
                /System/Library/CoreServices/iconservicesd
        # AUTHOR - regular uses dont need to worry about these, etc...

# to see what processes are being run as root 
$ ps -ax -U root | head
      PID TTY           TIME CMD
        1 ??         0:37.47 /sbin/launchd
       58 ??         0:00.96 /usr/sbin/syslogd
       59 ??         0:00.92 /usr/libexec/UserEventAgent (System)
       62 ??         0:00.37 /System/Library/PrivateFrameworks/Uninstall.framework/Resources/uninstalld
       63 ??         0:03.26 /usr/libexec/kextd
       64 ??         0:06.06 /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/FSEvents.framework/Versions/A/Support/fseventsd
       66 ??         0:00.11 /System/Library/PrivateFrameworks/MediaRemote.framework/Support/mediaremoted
       69 ??         0:00.12 /System/Library/CoreServices/appleeventsd --server
       70 ??         0:03.49 /usr/sbin/systemstats --daemon


# same prior
$ ps -ax -U $LOGNAME | head


# even more info with other flags
# -w flag
# -ww flag
# -www flag

# AUTHOR - try running Activity Monitor located in /Applications/Utilities
# useful to change the filter here at the top of Activity Monitor from 
# "My Processes" to "All Processes" using the View menu in the program
# why? if you have a runaway application or locked application, that often does
# not show up in My Processes view anyway.


---- ---- top 
# better way to see what applications are running and which are taking up resources
# if curious about what commands consume most resouces, leave top running in a 
# Terminal window as you work but top itself consumes some resouces
# to quit, type q

# grap snap shot of first seven lines of output
$ top -l 1 | head -8
        Processes: 288 total, 2 running, 286 sleeping, 893 threads 
        2019/01/28 06:58:44
        Load Avg: 1.38, 1.37, 1.38 
        CPU usage: 3.89% user, 11.68% sys, 84.41% idle 
        SharedLibs: 399M resident, 64M data, 41M linkedit.
        MemRegions: 27768 total, 2178M resident, 174M private, 573M shared.
        PhysMem: 8384M used (1843M wired), 7998M unused.
        VM: 1284G vsize, 1297M framework vsize, 0(0) swapins, 0(0) swapouts.


# look for high CPU usage (over 25%) or too little free memory (570M free out of 16 GB)

# Swapping is based on the idea that memory needed for an application can be broken 
# into pages, as many as needed for the app at that particular moment.
# As mutiple processes compete for system memory, memory pages that have not been
# accessed for a while are temporarily copied to a special place on the hard disk, and
# those pages are given to applications that need them now. The process of swapping
# an older page for a newer page is a pageout or swapout.

# to display processes sorted by CPU usage (rather than by PID)
$ top -o cpu

# can add this to your .profile
alias top='/usr/bin/top -s 5 -o cpu'
# this updates every 5 seconds rather than default every second and
# sorts results by highest CPU usage to lowest
# see for more info
man top

# so if you see a resouce hog in top
# then gives its PID to ps to find out more
$ ps -p 317         # AUTHOR Apple mail process is running as 317


----Cancelling a Process
# need to know its PID

---- ---- kill 
# same basic result as Finder's Force Quit option but more graceful
kill PID(s)
# Force Quit found in Apple Menu -> Force Quit or Option COMMAND ESC
# Force Quit does not show administrative processes
# To stop Unix programs and commands, must use either CLI or 
# Activity Monitor (/Applications/Utilties)

# if you know PID run kill
# if dont know PID, then first run ps to display status of your processes

# example sleep and who
# $ (sleep 60;who) &
# process goes to sleep for 60 seconds. The process is who
# decided that 60 seconds is too long so need to kill
# ps to see PID
# then kill 
# then run ps again to verify process was killed or that you killed the right process
# then who executes immediately as its no longer on sleep
# and displays list of users logged into system


$ (sleep 60;who) &
        [1] 1175
$ ps
          PID TTY           TIME CMD
          653 ttys000    0:00.10 -bash
         1175 ttys000    0:00.00 -bash
         1176 ttys000    0:00.00 sleep 60
$ kill 1176
        -bash: line 37:  1176 Terminated: 15          sleep 60
        Atuls-MacBook-Pro:~ atulgolhar$ atulgolhar console  Jan 26 21:39 
        atulgolhar ttys000  Jan 27 22:56 

        [1]+  Done                    ( sleep 60; who )
$ ps
        PID TTY           TIME CMD
        653 ttys000    0:00.11 -bash


---- ---- killall 
# if not worry about finding the PID, use killall to kill process by name
# AUTHOR always start by using -s option so killall shows you what it will do
# without actually killing anything 

$ (sleep 60;who) &      # invoke sleep for 60 seconds then who
        [1] 1233 
$ killall -s make       # kill make
        No matching processes belonging to you were found
$ killall -s who        # kill who but no process found b/c who is not yet running
        No matching processes belonging to you were found
$ killall -s sleep      # kill sleep but not same PID 1233 v 1234
        kill -TERM 1234
                        # so now job was put into background thus shell copies itself
                        # then copy shell (ie subshell) manages the commands
                        # subshell has PID 1233 and sleep is a subprocess of 1233 
                        # so it gets a different PID at 1234
                        # when sleep finishes
$ ps
          PID TTY           TIME CMD
          653 ttys000    0:00.23 -bash
         1233 ttys000    0:00.00 -bash
         1234 ttys000    0:00.00 sleep 60
$ kill 1234
        -bash: line 86:  1234 Terminated: 15          sleep 60
$ atulgolhar console  Jan 26 21:39 
        atulgolhar ttys000  Jan 27 22:56 

        [1]+  Done                    ( sleep 60; who )
$ ps
        PID TTY           TIME CMD
        653 ttys000    0:00.24 -bash


# ATUL try again and learn

$ (sleep 100;who) &
[1] 1280
$ ps
  PID TTY           TIME CMD
  653 ttys000    0:00.29 -bash
 1280 ttys000    0:00.00 -bash
 1281 ttys000    0:00.00 sleep 100
$ killall -s make
No matching processes belonging to you were found
$ killall -s who
No matching processes belonging to you were found
$ killall -s sleep
kill -TERM 1281
$ ps
  PID TTY           TIME CMD
  653 ttys000    0:00.30 -bash
 1280 ttys000    0:00.00 -bash
 1281 ttys000    0:00.00 sleep 100
$ ps
  PID TTY           TIME CMD
  653 ttys000    0:00.31 -bash
 1280 ttys000    0:00.00 -bash
 1281 ttys000    0:00.00 sleep 100
$ killall sleep
-bash: line 115:  1281 Terminated: 15          sleep 100
$ atulgolhar console  Jan 26 21:39 
atulgolhar ttys000  Jan 27 22:56 

[1]+  Done                    ( sleep 100; who )
$ ps
  PID TTY           TIME CMD
  653 ttys000    0:00.31 -bash
Atuls-MacBook-Pro:~ atulgolhar$ 

$ killall sleep
$ killall -v sleep  # to see details


# some process are hard to kill
$ kill -9 PID 
# or try
$ killall -9 name 
# use -9 flag with "terminate with extreme prejudice" 
# be careful as you can kill the shell itself.

# if you run an interpreted program such as a shell script
# then you may not be able to kill all the dependent processes by killing the
# interpreter process that got it all started.
# You may then need to kill them individually; however, killing a process that is
# feeding data into a pipe generally kills any processes receiving that data.


----Launching GUI Applications 
# from CLI can interact with GUI Aqua
# drag file or folder from Finder onto Terminal window see full pathname 
# vi in CLI and dragfile onto Terminal window
# proxy ic

---- ---- open 
$ open *.gif 
$ open *.doc 

$ open .profile
        The file /Users/atulgolhar/.profile does not exist.
$ open .sample.swp
        No application knows how to open /Users/atulgolhar/.sample.swp.
# what happened? open uses a file's creator and/or type to determine which
# application should be used to open a particular file
# since vi's scratch files dont have a creator or type code, the command gets 
# confused and ends up doing nothing.

# What Are Creator and Type Codes?
# when you create and save a file with an Applicaiton on the Mac, the application
# you use assigns its creator and type codes to the file.
# These codes are four characters in length and contain upper- and lowercase letters,
# numbers, and even spaces. OS X uses these codes to determine which icon gets assigned
# to certain files, and more importantly, to determine which default application
# to use for opening that file.

$ pwd 
/Users/atulgolhar
$ touch ~/Desktop/myFile.txt 
$ ls -l ~/Desktop 

drwxr-xr-x  16 atulgolhar  staff      512 Dec  5 13:39 CodingBooks
drwxr-xr-x  13 atulgolhar  staff      416 Nov 15  2017 CodingScreenShots
-rw-r--r--@  1 atulgolhar  staff  2871343 Oct 27  2014 IMG_1087.jpg
-rwxrwxrwx   1 atulgolhar  staff  3416741 Sep 21  2012 IMG_1320.JPG
-rwxrwxrwx@  1 atulgolhar  staff  4870040 Aug 29  2017 IMG_4638.JPG
-rwxrwxrwx@  1 atulgolhar  staff   218245 Nov 15  2017 IMG_4638_20113KidsMuseumScience.jpg
drwxr-xr-x  19 atulgolhar  staff      608 Jan  2  2017 ML_Machine LEARNING
-rw-r--r--   1 atulgolhar  staff        0 Jan 28 21:18 myFile.txt

$ open ~/Desktop/myFile.txt
# opens myFile.txt in TextEdit 
$ mv myFile.txt myFile.doc
# this moves myFile.txt into myFile.doc and deletes txt version
$ GetFileInfo IMG_1087.jpg
# can also use mdls
$ mdls IMG_1087.jpg 


---- ---- Useful Starting Opens for Use with open 
# to stream input into a text file then open in Aqua
$ mdfind NIKON | open -f 
# this will generate a list of filenames that reference or include NIKON 
# can generate a printout with TextEdit

# most useful option is open -a which is used to specify an application to open
# -a = applications
# example
# to launch Messages with open, need to know where its located on system
$ open messages 
The file /Users/atulgolhar/messages does not exist.
$ open -a messages 
# lauches Messages app
# notice it ignores case
# to launch Concole as located in /Applications/Utilities
$ open -a console 
# to launch Activity Monitor
$ open -a "activity monitor"    # use "" b/c of space
# to launch a file regardless of its type and opens this in TextEdit
$ open -e ~/Sites/someFile.html


---- ---- Making open More Useful 
# open makes it easy to launch applications but it requires you type in full app name
# so use aliases

alias word="open -a Microsoft\ Word"
alias excel="open -a Microsoft\ Excel"
alias gc="open -a GraphicConverter\ 9"
# add these to your .profile file to easily launch

ATUL shell script wrapper example
# more sophisicated approach is use a shell script wrapper that would give its
# arguments to open and, if they failed, it would try to figure out what
# application you are talking about. (AUTHOR - its advanced topic but here it is
# a shell script example)



#!/bin/sh

# open2 - a smart wrapper for the cool OS X 'open' command
#   to make it even more useful. By default, open launches the 
#   appropriate application for a specified file or directory
#   based on the Aqua bindings, and has a limited ability to
#   launch applications if they're in the /Applications dir.

# first off, whatever argument we're given, try it directly:

open=/usr/bin/open

if ! $open "$@" >/dev/null 2>&1 ; then 
    if ! $open -a "$@" > /dev/null 2>&1 ; then 

        # More than one arg? Don't know how to deal with it: quit
        if [ $# -gt 1 ] ; then
            echo "open: Can't figure out how to open or launch $@" >&2
            exit 1
        else
            case $(echo $1 | tr '[:upper:]' '[:lower:]') in 
                acrobat         ) app="Acrobat Reader"          ;;
                address*        ) app="Contacts"                ;;
                chat            ) app="Messages"                ;;
                cpu             ) app="Activity Monitor"        ;;
                dvd             ) app="DVD Player"              ;;
                word            ) app="Microsoft Word"          ;;
                excel           ) app="Microsoft Excel"         ;;
                prefs           ) app="System Preferences"      ;;
                qt|quicktime    ) app="QuickTime Player"        ;;
                * ) echo "open: Don't know what to do with $1"  >&2
                    exit 1
            esac
            echo "You asked for $1 but I think you mean $app." >&2
            $open -a "$app"
        fi
    fi
fi

exit 0


# this script has a simple table to nicknames for common applications, allowing
# you to use open2 qt to launch QuickTime Player
# AUTHOR - no other explanation of this script
# see Wicked Cool Scripts for more

            """
            # Learning Unix for OS X - Going Deep With The Terminal and Shell - Dave Taylor 2016
            -----------------------------------------------------------------------------------------------
            Chapter 
            1 Why Use Unix? 
            2 Using the Terminal 
            3 Exploring the Filesystem
            4 File Management 
            5 Finding Files and Information 
            6 Redirecting I/O 
            7 Multitasking 
            8 Taking Unix Online 
            9 Of Windows and X11
            10 Where to go from here 
            --------------------------------------------------------------------------------------------
            """

-----------------------------------------------------------------------------------------------
Chapter 
8 Taking Unix Online 

# Terminal offers "New Remote Connection" is easy to use once set up

----Remote Logins (Remote Accees Logins)
# OS X File Sharing (System Preferences->Sharing->File Sharing)
# if you enable Remote Login (System Preferences->Sharing->Remote Login) allows you
# to access your Mac's Unix shell from any networked computer that can run ssh client
# ssh = Secure Shell (ssh) client

# if need to access your Mac from a Windows machine, you can use
# SSH           http://www.ssh.com
# OpenSSH       http://www.openssh.com/

# AUTHOR
# when you enable Remote Login, the Sharing panel displays instructions for loggint
# in to you Mac from another computer. Look for message in the middle of the window:
To log in to this computer remotely, type "ssh taylor@172.31.98.38".
# the first time you login, you will be asked to vouch for your Mac's authenticity:
The authenticity of host '172.31.98.38' can not be established.
ECDSA key fingerprint is SHA256:Ktu5bcJtQfn8ZBsPqZaUs0xkhTi9gVlXi5xZX/kgrL8.
Are you sure you want to continue connecting (yes/no)? # yes
Warning: Permantely added '172.31.98.38' (ECDSA) to the list of known hosts.
Password:
Last Login: Oct 6 23:43:07 2015
# if you have a firewall running, you need to open up a networked port
# to allow remote connections into your computer from outside your
# network if you want it to work bidirectionally. If you are just using
# ssh to connect onwards, you should be fine regardless of firewall
# settings. To learn more, in Finder use COMMAND-? to launch Help Viewer
# then search for 'firewall'

# To log into to your Mac from a Windows machine using PuTTY, launch PuTTY
# application, specify SSH (ie older versions of PuTTY), and type in your OS X 
# system's IP Address, as shown in Mac's Sharing panel.
# PuTTY prompts you for your OS X username and password.

# ATUL PuTTY?????
# For the most part, being connected via ssh is identical to using the Terminal
# application itself. Your can even use the open command to launch applications, 
# which can surprise someone who might be watching the screen. But you wont be 
# able to use the applications if your remote (as they have their own window).
# To run OS X applications remotely from another Mac -> enable Screen Sharing in
# System Preferences-> Sharing. In the Screen Sharing description, you can also
# click Computer Settings to enable access from non-Mac computers using
# Virtual Network Computing VNC software. Once you have enabled Screen Sharing, 
# open the Finder on another Mac on the same network, and find your Mac in the list.
# You will see an option to connect to the system. If you have got "Back to My Mac"
# enabled under iCloud, you do not even need to be on the same network to
# connect from one Mac to another.

# One of the very few differences is that the system records the Internet address
# of the system from which you are connected, as seen the who output
# the 3rd entry is a remote connection by a user on a different computer
$ who
taylor      console         Oct 13 16:56
taylor      ttys000         Oct 13 17:00
taylor      ttys001         Oct 13 17:10 (1)72.31.98.38


---- ---- Web Access 
# can start web server manually from the Terminal
$ sudo apachectl start
# use this command to make sure that the web server starts each time you boot the computer
$ sudo defaults write /System/Library/LaunchDaemons/org.apache.httpd \Disabled -bool false


# If you Mac has an IP address that was assigned by an AirPort Base Station or other
# type of network router running the Dynamic Host Control Protocol (DHCP) then its
# probable that your machine is inaccessible to the outside world. B/c of this, you
# will be able to connect to your Mac only from machines on your local network. You can
# allos remove users to connect by using the AirPort Utility (if you have an AirPort
# Base Station) and following these steps:
# 1) select your Base Station and click Edit
# 2) Click the Network button in the toolbar
# 3) Under Port Settings, click the Add (+) button to add a public TCP port that
# you want to map to a private IP address and TCP port on your local network.

# In older version of the AirPort Utility, or in configuration utilities for other
# network routers or access points, the configuration steps will be similiar. Just 
# look for Port Forwarding.

# For Remote Login via ssh, you must map port 22 to your Macintosh; use port 80 for
# Personal Web Sharing. Other gateways may support this feature as well.

# If you use this technique, the IP address shown in the Sharing preferences panel
# will be incorrect. You should use your AirPort Base Station WAN address when you
# connect fom a computer outside your local network.

---- ---- Remote Access to Other Unix Systems 
# You can connect to other systems from OSX. To do so, launch the Terminal application
# then start a program that connects to the remote computer.
# In addition to ssh, some typical programs for connecting over a computer network
# include telnet, rsh (remote shell), and rlogin (remote login). All of these are 
# supported by and included with OSX. In any case, when you log off of the remote
# computer, the remote login program quits and you get another shell prompt from
# your Mac in the Terminal window.
# AUTHOR - my websites are running on a remote NetBSD and I use ssh from the Terminal
# window on my Mac so often that I have an alias to make it easy to pop on and
# tweak things:
alias vps="ssh dtaylor@intuitive.com"
# SCORPION - while you can use ssh, telnet, rsh, or rlogin to connect to a remote
# system, security experts highly discourage the use of anything other than ssh,
# b/c non of the others are as secure. This means that wehn you type in
# your username and password, the information could be sent "in the clear" to
# the remote system, exposing you to possible "sniffers" who will then be able
# to log in as they were you. Better safe than sorry! Insist that the remote
# system support ssh, and use it extensively.

# The syntax for ssh is:
ssh remote-user@remote-hostname 
# for example, when Dr. Nelson wants to connect to the remote computer named
biolab.medu.edu # her first step is to launch the Terminal. Next, she will need
# to use the ssh program to reach the remote computer. Her session will look
# something like this:
        Welcome to Darwin!

        $ ssh nelson@biolab.medu.edu 
        nelson@biolab.medu.edu's password:

        biolab$ 
        .
        .
        .
        biolab$ exit 
        Conection to biolab.medu.edu closed.
        $
# As you can see, the shell prompt from her account on the biolab server includes
# the hostname. This is helpful, b/c it reminds her when she is logged in remotely, 
# and after existing the remote system, she will also know when she is back in her
# own territory. If you use more than one system but do not have the hostname in
# your prompt, see "Changing the Command Prompt" (see Chapter 2).
#
# When you are logged onto a reomte system, keep in mind that the commands you
# type take effect on the remote system, not on your local one. For instance,
# if you use lpr to print a file (see Printing Chap 6), the printer it comes out from
# will not be the one sitting under your desk, but might be hundreds to thousands of
# miles away.
#
# The programs rsh, rlogin, and ssh generally dont give you a login: prompt. These
# programs assume that your remote username is the same as your local username. If
# they are different, you will need to provide your remote username on the command
# line of the remote login program, as shown earlier for ssh.
#
# You may be able to log in without typing your remote password or passphrase. In ssh,
# you can run an agent program, such as ssh-agent, that asks for your passphrase once,
# then handles authentication every time you run ssh or scp (secure copy) afterward. 
# Otherwise, you will be prompted after entering the remote login command line.
# 
# The following are four sample ssh and rsh command lines. The first pair shows how to
# log into the remote system biolab.medu.edu when your username is the same on both
# the local and remote systems.
# The second pair shows you how to log in if your remote username is different
# (in this case, jdnelson). Note that the OSX versions of ssh and rsh may
# support both syntaxes shown, depending on how remote host is configuredL
$ ssh biolab.medu.edu 
$ rsh biolab.medu.edu 
$ ssh jdnelson@biolab.medu.edu 
$ rsh -l jdnelson biolab.medu.edu

# About Security [BOX]
# Keep in mind that with ssh, telnet, and related programs, the "shell" your in, the
# programs you run, the CPU you utilize are all on the remote system. What you see
# is just a bunch of text characters being transmitted back and forth across the network
# to show you what is going on remotely.
# Most remote login programs and file transfer programs were designed 25+ years ago.
# Networks were friendly, so they transmitted your data including passwords across the
# network in a way that allows even the most inexperienced cracker to read it. Worse,
# some of these utilities can be configured to allow access without passwords,
# opening up a huge security hole.
# SSH is different, it was designed with security in mind. It sends your password,
# and everything else transmitted or recieved during your SSH session, in a secure way.
# See ssh manpage. And if more details are needed see
# SSH The Secure Shell: The Definitive Guide by Daniel J Barrett, Richard Silverman,
# and Robert G Byrnes (O'Reilly).


----Transferring Files 
# may need to set up a networked filesystem connection then may use Finder or local
# programs such as mv or cp to move file around. But Unix systems have command-line tools
# such as scp and rcp for transferring files between computers. 
---- ---- scp and rcp (scp = secure copy, rcp = remote copy)
# OSX includes both scp and rcp 
# In general you must have accounts on both these computers to use these commands.
# Syntax of both is similiar to cp, but they also let you add the remmote hostname
# to the start of a file or directory pathname.
# Syntax of each argument is
hostname:pathname 
# hostname is needed only for remote files. You can copy:
# from a remote computer to local
# from local to remote
# or between two remote (aka "third party copy")

# scp program is more secure that rcp, so I suggest using scp to transfer private
# files over insecure network such as Internet
# For privacy, scp encrypts the file and your passphrase during the transfer
# General syntax for scp is
scp [[user@]host1:]FromFile [[user@]host2:]ToFile 
# for both From and To files, if either is on a remote host, you need to specify
# the hostname. And if any remote host involves a different username than what you
# are currently using locally, you must specify that as well.

# Example
# suppose you want to copy the files report.may and report.june from your home directory
# on the computer named w2.intuitive.com and put the copies into 
# your working directory (.) on the machine your presently logged into.
# If you have not set up an SSH agent that lets you use scp without typing your 
# passphrase (password), scp asks you for it:

$ scp w2.intuitive.com:report.may w2.intuitive.com:report.june .
Enter passphrase for RSA key 'taylor@mac':

# To use wildcards in the remote filenames, put quotation marks ("name") around each
# remote name. Quotes tell the local shell not to interpret special characters, such as
# wildcards, in the filename. The wildcards are passed, unquoted, to the remote shell,
# which interprets them there.

# You can use absolute or relative pathnames.
# if you use relative pathnames, they start from yrou home directory on the remote system
# example to copy all the files from your remote w2 account's food/lunch subdirectory
# into your local pwd (.) use this
$ scp "w2.intuitive.com:food/lunch/*" .

# unlike cp, the OSX versions of scp and rcp dont have an -i saftey option. 
# If the files you're copying already exist on the destination system, then those
# get overwritten. To be safe, always use ls to check what's in the destination
# directory before your copy files.

# Two useful command options for use with scp are 
# -p which preserves the creation and modification dates of the original file in the copy
# -r which lets you recuresively copy folders and their contents to the remote system
# example to copy everything in my Pictures directory to the w2 server, I would use
$ scp -r ~/Pictures w2.intuitive.com:.

# If your system has rcp, your system administrator may not want you to use for
# system security reasons. Another program ftp is more flexible than rcp
# but much less secure than scp, which itself scp is less secure than sftp).

# flexibility   ftp > rcp
# secure        sftp > scp > ftp


---- ---- FTP (File Transfer Protocol)
# standard way
# many users of earlier Mac OS versions are familiar with www.fetchsoftworks.com
# (ie shareware graphical FTP client that runs all versions of OSX)
# also many graphical FTP programs Mac App Store (search for ssh or ftp)
# Fetch offers easy-to-use interace, but why pay when Unix ftp is free?

# Standrd ftp is covered here
# To start ftp, identify yourself to the remote computer by giving the username
# and password for your account on that remote system
# SCORPION sending your username and password over a public network with ftp
# means that snoopers might see them, and then use them to log into your account
# on that system. Instead, you should use sftp b/c it uses SSH for an
# encrypted, secure FTP connection.

# A special kind of FTP, anonymous FTP, happens if you log into the remote
# server with username anonymous. The password is your email address such as
# taylor@intuitive.com
# Anonymous FTP lets anyone log into a remote system and download accessible
# files to their local systems.

---- ---- ---- Command-line FTP
# to start stanard Unix ftp program, provide the remote computer's hostname
ftp hostname 
# ftp prompts for your username and password on the remote computer
# This is something like a remote login but ftp does not start your usual shell.
# Instead, ftp has its own prompt and uses a special set of commands for transferring
# files.

# some ftp commands
put filename    # Copies the file filename from your local computer to the remote computer.
                # If you give a second argument, the remote copy will have that name.

mput filenames  # Copies the named files (you can use wildcards) from the local to remote

get filename    # Copies the file filename from the remote to your local.
                # If you give a second argument, the remote copy will have that name.

mget filenames  # Copies the named files (can use wildcards) from remote to local.

prompt          # A "toggle" command that turns prompting on or off during transfers
                # with mget and mput commands. By default, mget and mput will prompt
                # you with mget filename? or mput filename? before transfering each file.
                # you answer y or n each time.
                # Typing prompt once, from an ftp> prompt, stops the prompting.
                # All files will be transfered without question until the end of the 
                # ftp session. Or if prompting is off, typing prompt at an ftp> prompt
                # resumes prompting.

hash            # Displays the pwd on the remote machine to pathname (fpt typically
                # starts you at your home directory on the remote machine).

cd pathname     # Changes the pwd on the remote machine to pathname (ftp typically
                # starts at your home directory on the remote machine).

lcd pathname    # Changes ftp's working directory on the local machine to pathname.
                # (ftp's first local pwd is the working directory from which you
                # started the program.) Note that ftp's lcd command changes only 
                # ftp's pwd. After you quit ftp, your shell's pwd will not have changed.

dir             # Lists the remote directory (like ls -l)

pwd             #

binary          # Tells ftp to copy the file(s) that follow it without translation. This
                # preserves pictures, sound, or other data.

ascii           # Transfers plain text files, translating data if needed. For instance,
                # during transfers between a Microsoft Window system (which adds Control-M
                # to the end of each line of text) and a Unix system (which doesnt), an
                # ASCII-mode transfer removes all or adds those characters as needed.
    
passive         # Toggles the setting of passive mode. This may help ftp to run
                # correctly if you are behind a firewall. If you put the command
                # export FTP=passive in your .profile file, all your ftp sessions 
                # will use passive mode.

quit or bye     # Ends the ftp session and takes you back to a shell prompt.

!cmd            # Gives the specified command to a shell, displays its output, then
                # returns to the ftp program.

# example
# Kiana moves into the local directory she wants to use as a starting point (a good
# idea whether your uploading or downloading). She then lists the files in her
# current directory to see whats there and uses ftp to connect to an FTP server located
# at rhino.zoo.edu
# After using her username and password to log on, Kiana changes the remote directories
# to the work subdirectory, then gets the todo file and downloads it to her local machine.
# After receiving the "Transfer complete" message, Kiana uses the !ls command to make
# sure that the file she transferred is actually on her local machine.
# Then, with the knowledge that the file is in fact there, she quits FTP session.

$ cd downloads 
$ ls 
        afile   ch2     somefile1   somefile2   somefile3
$ ftp rhino.zoo.edu 
        Connected to rhino.zoo.edu 
        Name (rhino:kiana): ktaylor 
        Password:
ftp> cd work
ftp> dir 
        total 3
        -rw-r--r - - 1 csmith   mgmt    47 Feb  5   2001 for.ed 
        -rw-r--r - - 1 csmith   mgmt   264 Oct 11  12:18 message  
        -rw-r--r - - 1 csmith   mgmt   724 Nov 20  14:53 todo 
ftp> get todo 
        local: todo remote: todo 
        227 Entering Passive Mode (17,252,16,11,224,18)
        1150 Opening BINARY mode data connection for todo (724 bytes)
        226 Transfer complete.
        724 bytes received in 00:00 (94.06 KB/s)
ftp> !ls 
        afile ch2   somefile1   somefile2   somefile3   todo 
ftp> quit 
$ ls
afile ch2   somefile1   somefile2   somefile3   todo 

# AUTHOR these are just the most basic ftp commands.
# see help at an ftp> prompt gives complete list of available commands
# entering help followed by ftp command name gives one-line summary of that command.


---- ---- ---- sftp: ftp to secure sites 
# If you can only use ssh to connect to a remote site, chances are it wont support
# regular ftp transactions either, due to higher security restrictions. Thats good thing
# AUTHOR always encourages you to defer to use sftp if its an option
# OSX also includes sftp (which is a version of ftp that is part of the ssh package)

$ sftp
        usage: sftp [-46aCfpqrv] [-B buffer_size] [-b batchfile] [-c cipher]
                  [-D sftp_server_path] [-F ssh_config] [-i identity_file] [-l limit]
                  [-o ssh_option] [-P port] [-R num_requests] [-S program]
                  [-s subsystem | sftp_server] destination

# example from AUTHOR
$ cd Downloads 
$ sftp taylor@intuitive.com 
sftp> cd mybin 
sftp> dir -l
sftp> get webspell 
sftp> quit 
$ ls -l webspell

# note sftp program has an -P option causing program to preserve the original file
# creation and modication dates and time info
sftp> get -P webspell
# additional helpful commands are lcd, lls, and lmkdir
# lcd       change your location in the local filesystem
# lls       list the files the local pwd 
# lmkdir    make a new local directory
# can also use the ! escape to access any Unix command from within sftp
# Like the ftp program, sftp also has built-in help. Just type help at prompt


---- ---- ---- FTP with a web BROWSER
# useing web and ftp to downlaod from remote site
# to do this enterh URL location with this syntax
ftp://hostname/pathname 
# example
ftp://somecorp.za/pub/reports/2001.pdf

# in most cases, you can start with the just the first part of the URL such as 
ftp://somecorp.za 
# and then browse your way through the FTP directory tree to find what you want.

# if using Safari, it will open ftp: directories by mounting them in the Finder
# as if you specified the ftp URL in the Finder itself.

---- ---- ---- FTP with curl 
# faster way to download a file is with curl --> copy from URL
# example
$ curl -O ftp://somecorp.za/pub/reports/2001.pdf 
# -O option (letter, not zero), curl dumps the file to the standard output.
# if you want to read a text file from an Internet server, combine curl and less
$ curl ftp://ftp.oreilly.com/pub/README.ftp | less



                        Welcome to the O'Reilly & Associates FTP archive.  Here are a few   '
                        things we'd like to tell you.                                       '

                        - Please do NOT do a recursive listing (a command like "ls -lR")
                          from the root (top-level directory) of the archive.  Recursive
                          listings of the entire archive take a long time and slow down
                          everyones' work.  Instead, get the master index file, ls-lR.Z,    '
                          from this directory.  If you can't handle a compressed file,      '
                          ask for the filename ls-lR instead; this server will uncompress
                          the index before sending it (see below).

                        - This server can run the UNIX "tar" and "compress" commands
                          automatically as you retrieve files and directories.  Do this
                          by adding or deleting the filename extensions ".tar" and ".Z",
                          respectively, when you request a file or directory.  For example,
                          if a directory listing shows a long file named "Index" and
                          you'd like to compress it before it's sent, use the FTP command:
                             get Index.Z
                          and the server will compress the file as it's sent (be sure you've
                          chosen binary transfer mode).  Or, if the directory "foo" has
                          several files in it and/or subdirectories, and you'd like to          '
                          receive the directory contents as a single tar archive file, type:
                             get foo.tar
                          You can combine the two commands.  Get a compressed tar archive of
                          the foo directory with the command:
                             get foo.tar.Z
                          You can also do the opposite.  For example, this server has a lot of
                          compressed tar files.  If you want the file upt.oct93.tar.Z but you
                          don't have "uncompress" on your computer, you can use this command:   '
                             get upt.oct93.tar
                          and the file will be uncompressed before it's sent.  Unfortunately,   '
                          this server can't un-tar an archive and send separate files (yet).    '

                          In the same way, from a Web browser, create a URL by adding or
                          removing extensions.  For example, if you want to view the compressed
                          file /pub/ls-lR.Z in your browser, tell the server to send it in
                          uncompressed format by giving your browser this URL:
                             ftp://ftp.ora.com/pub/ls-lR
                        listings of the entire archive take a long time and slow down
                          everyones' work.  Instead, get the master index file, ls-lR.Z,        ' 
                          from this directory.  If you can't handle a compressed file,          '
                          ask for the filename ls-lR instead; this server will uncompress
                          the index before sending it (see below).

                        - This server can run the UNIX "tar" and "compress" commands
                          automatically as you retrieve files and directories.  Do this
                          by adding or deleting the filename extensions ".tar" and ".Z",
                          respectively, when you request a file or directory.  For example,
                          if a directory listing shows a long file named "Index" and
                          you'd like to compress it before it's sent, use the FTP command:
                             get Index.Z
                          and the server will compress the file as it's sent (be sure you've
                          chosen binary transfer mode).  Or, if the directory "foo" has
                          several files in it and/or subdirectories, and you'd like to          '
                          receive the directory contents as a single tar archive file, type:
                             get foo.tar
                          You can combine the two commands.  Get a compressed tar archive of
                          the foo directory with the command:
                             get foo.tar.Z
                          You can also do the opposite.  For example, this server has a lot of
                          compressed tar files.  If you want the file upt.oct93.tar.Z but you
                          don't have "uncompress" on your computer, you can use this command:   '
                             get upt.oct93.tar
                          and the file will be uncompressed before it's sent.  Unfortunately,   '
                          this server can't un-tar an archive and send separate files (yet).    '

                          In the same way, from a Web browser, create a URL by adding or
                          removing extensions.  For example, if you want to view the compressed
                          file /pub/ls-lR.Z in your browser, tell the server to send it in
                          uncompressed format by giving your browser this URL:
                             ftp://ftp.ora.com/pub/ls-lR

                          Note that these commands may not work if you use a graphical FTP
                          browser; it may only know how to ask for files listed in the
                          directory.  In that case, use a plain command-line FTP program.

                        Thanks.  You can contact us by sending email to:   ftpmaster@ora.com


# from above. curl plus read text from internet server:
$ curl ftp://ftp.oreilly.com/pub/README.ftp | less

# curl web page with HTML source view
$ curl http://www.oreilly.com | less

                         % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                                         Dload  Upload   Total   Spent    Left  Speed
                        100   232  100   232    0     0   2882      0 --:--:-- --:--:-- --:--:--  2864
                        <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
                        <html><head>
                        <title>301 Moved Permanently</title>
                        </head><body>
                        <h1>Moved Permanently</h1>
                        <p>The document has moved <a href="https://www.oreilly.com/">here</a>.</p>
                        </body></html>
                        ~
                        ~

Atuls-MacBook-Pro:~ atulgolhar$ curl ftp://ftp.oreilly.com/pub/README.ftp | less
Atuls-MacBook-Pro:~ atulgolhar$ curl http://www.oreilly.com | less
Atuls-MacBook-Pro:~ atulgolhar$ curl http://www.oreilly.com | less
Atuls-MacBook-Pro:~ atulgolhar$ curl http://www.oreilly.com  > oreilly.html

# save HTML page locally then open using Safari
$ curl http://www.oreilly.com  > oreilly.html
$ ls -l *.html
-rw-r--r--   1 atulgolhar  staff     232 Feb  1 13:48 oreilly.html
$ open oreilly.html

# open prior page but in Google Chrome
$ open -a "Google Chrome" oreilly.com
# ATUL need to syntax this correctly

# note, any graphics referenced by that page, will not have been retrieved by curl
# so, its likely to be a bit messy. There are better ways to work with HTML pages
# on the command line, but its beyond this book.

---- ---- ---- FTP from the Finder (ie mount remote FTP directories)
# You can mount remote FTP directories from the Finder and then continue
# accessing them using Finder actions or with standard Unix CLI commands.
# In Finder choose Go->Connect to Server, then type
# ftp:// followed by the name of the server that you want to access 
# such as ftp.orielly.com
# then enter valid username and password or
# depending upon the remote settings, select Guest and the new FTP disk
# appears on your Desktop
# now you can access it in the /Volumes directory.

# when done you can unmount
$ umount /Volumes/ftp.oreilly.com 

---- ---- ---- Other FTP Solutions 
# many GUI options are available
# Fetch, FlashFTP, Transmit, Cyberduck, YummyFTP, and Viper FTP
# just search in App Store for ftp

---- ---- Easy Shortcurts with New Remote Connection
# makes it easy to connect to remote systems via telnet, ssh, ftp, or sftp
# Terminal -> Shell -> New Remote Connection -> will give 4 options

Service                         Server

Secure Shell (ssh)
Secure File Transfer (sftp)
File Transfer (ftp)
Remote Login (telnet)

+ -                             + - 

# to add service, click on +
# to add server, cick on +
# then produces a window asking for hostname or host IP address
# once added, teh new server is available for all services, so to connect
# to my web server using SSH, I can simply choose ssh then the new server name.

            """
            # Learning Unix for OS X - Going Deep With The Terminal and Shell - Dave Taylor 2016
            -----------------------------------------------------------------------------------------------
            Chapter 
            1 Why Use Unix? 
            2 Using the Terminal 
            3 Exploring the Filesystem
            4 File Management 
            5 Finding Files and Information 
            6 Redirecting I/O 
            7 Multitasking 
            8 Taking Unix Online 
            9 Of Windows and X11
            10 Where to go from here 
            --------------------------------------------------------------------------------------------
            """

-----------------------------------------------------------------------------------------------
Chapter 
9 Of Windows and X11


# many options here: from Unix family including Linux and FreeBSD
# free to download but constraints on what you can do
# = open source apps 
# X11 = XQuartz open source project
http:// xquartz.macosforge.org/
# click on X11 icon in /Applications/Utilities -> XQuartz

# SCORPION
# usually Mac applications are easy to install thanks to OSX's Installer but Unix apps do NOT 
# have the same easy interface. So this means different programs have different installation 
# methods (sometimes CLI command sequence).
# Lastest X11 is easy, but individual applications like GIMP can be tricky.
# To address this, a team created Homebrew (http://brew.sh/)
# Alternatives are MacPorts (http://www.macports.org) and Fink (http://www.finkproject.org).


----X11 
# ATUL - landscaped of the X11 giving perspective, then deep dive is next
# X11 is "windowing system"
# Current: Apple is dropping X11 support and moving users to interact with XQuartz
# why? Apple is moving away from in-house supported compatability layer component support and
# moving towards having users interact directly with Apple's own development tools b/c
# those development tools are now mature enough. In the past, they were not, thus Apple needed
# to support those existing third party technologies that were useful to developers using Apple machines.

# X windoow system is a standard GUI (graphical user interface) for almost all Unix and Linux
# systems. OSX is built on Unix core but OSX's gui Aqua is not directly X11 compatible.
# on OSX, compbination of components are responsible for drawing what appears on your screen
# (1) Quartz Composer, (2) OpenGL, (3) CoreGraphcis

# X11 based system
# X server = applicaiton called X server creates what you see on the screen.
# X clients = applications that run under X11 such as office applciation, web browers, terminal windows
# X server and X clients talk to each other using standard Unix networking protocols = this means that you can run
# an x client on a Unix machine in another office or across the planet and it displayed by your computer's X server.

# X server explained:
# typically are full screen applications
# example: book photo shows an X server running on Linux with 
# three applications running (xterm, clock app and web browser)
# xterm = OSX Terminal style app.
# more
# taskbar along left side of screen belongs to the window manager (an X11 program responsible for 
# putting frames and window controls around the application itself). Window manager provides overall 
# look and feel. Also lets you launch applications and log out of X11
# more
# Before: X11 was included with OSX, Apple shipped a "rootless X server". Now: the path to X11 is thru XQuartz
# XQuartz = open source version of X11 that is compatable with Quartz and OSX.
# Rootless = its an X server that will NOT take over your entire screen.
# more
# XQuartz's X11 implementation which includes X server, many common X clients, and the SDK for 
# for writing X11 applications (SDK = software development kit).
# XQuartz's X11 implmemtation is derived from an implementation of X11 called X.org (http://www.x.org). This is
# the X11 release used in Linux, FreeBSD, NetBSD, OpenBSD, and many other Unix operating systems.
# more
# Apple also created an X11 window manager called quartz-wm which draws X11 windows that look and behave
# much like Quartz windows.

---- ---- Using X11 

# can use by launching X11 in /Applications/Utilties
# xterm = launches new window = Terminal
bash-3.2$ xterm
# xman = Unix man pages
bash-3.2$ xman
# xlogo = logo
bash-3.2$ ls /opt/X11/bin/      # gives long list of additional commands

# if working with X11 applications, you will want to put /usr/X11/bin or /opt/X11/bin
# in your PATH by editing your .profile file (if using bash) or .login file (if using tsch)

# for bash users, add this line:
PATH=${PATH}:/usr/X11/bin ; export PATH 

# for tsch users, add this line:
senenv PATH ${PATH}:/usr/X11/bin 

# So the next time you launch a Terminal window or xterm window, you
# will be able to type in all the X11 application names at the command line
# without specifying where they are located.
# Before you add this to your PATH, however, open a Terminal and type
echo $PATH # the XQuartz installer may have alreaddy done this for you.

# some of the utlities included with OSX's X11:
bitmap      # an X11 bitmap (.xbm) editor
glxgears    # openGL 3D graphics demonstration
glxinfo     # info about OpenGL capabilities
oclock      # X11 based clock application
xcalc       # X11 calculator
xeyes       # pair of eyeballs that follow the mouse cursor around the screen
xhost       # gives another computer permission to open windows on your display
xkill       # cursor of doom, any X11 window you click will be shut down, CONTROL-C 
xload       # displays CPU load
xwud        # image display program for X11

---- ---- Differences Between OS X and X11 

# Mouse focus
# Aqua does not care where your mouse it located so that the application in front is 
# the one that sees your keystrokes. X11 does not work like this. X11 uses "mouse focus".
# Just move your cursor to the middle of the target application to make it work.

# Cutting and Pasting
# To paste into X11 window, you can not use COMMAND-V. Instead use Option-Click (you
# must enable X11 preferences's for three button mouse first, then use middle button).

# X11 application menus
# menu at the top of the screen always belongs to X11 itself.
# xmh = X11 mail reader
# InkScape = vector drawing application

# Be careful with COMMAND-Q
# If you press COMMAND-Q while running an X11 application, this will shut down all of
# X11 and any applications running that X11 is running.

# Scrolling in the xterm
# X11 has no scrollbars. xterm uses Shift-Page-Up and Shift-Page-Down

# Lauching applications from the xterm
# when you type the name of an X11 program in xterm, it launches but then xterm window
# appears to hang b/c it is waiting for the program to exit. To avoid this problem, you
# can append the & character after the program name to put it in the background.
# Another option is to press CONTROL-Z after the program starts then press bg to put
# the program in the background. See Chapter 7 about Unix processes in the foreground
# or background.

# X11, .bashrc, and .profile
# If you have customized your Unix shell by editing ~/.profile then 
# this does NOT work in X11. To correct this for X11, you need to put 
# these in your ~/.bashrc file which X11 does read.

---- ---- Customizing X11
# X11 assumes a three button mouse.
# Apple assumes a single button mouse.
# X11->Preferences tab. Leave other settings in default position unless you are a wizard.
# Output tab. Allows you switch out of rootless mode, which allows X11 to take over
# your entire screen. If you do this, make sure you know that OPTION-COMMAND-A lets
# leave full screen mode, otherwise, you may need to reboot to get out of it.

---- ---- ---- Customizing X11 Application menu 
# Applications->Customize.
# Can add button with the X11 application name, specifying the menu title.
# To change the Terminal/xterm so that it uses white text on dark blue background,
# then need to add the switches 
-bg darkblue -fg white      # inthe Command column of the X11 Application menu window
# You can also define a shortcut key. Note it must be used with COMMAND key so for
# example COMMAND-n


# X11 and internet
# X Window System is built on a network model thus allowing you to launch X applications
# on your computer but have them display on another computer in the netwwork system.
# But note that this also means you can launch an application on another computer within
# the network but have that application display on your own computer.
# It is tricky, so check out Lucy Lim's guide to forwarding an X11 session through SSH
# http://www.mit.edu/people/lucylim/MacX11.html


        # HEADER Forwarding an X11 Session through SSH
        
        To get your X11 windows to open when you are logged in remotely:
        
        edit (on the remote Mac) /etc/sshd_config as sudo; make sure 
        a line that says "X11Forwarding yes" is uncommented, like this:

                #AllowTcpForwarding yes
                #GatewayPorts no
                X11Forwarding yes
                #X11DisplayOffset 10
                
        Then restart sshd on the Mac. If you are at the console, you 
        can do this by unchecking then rechecking the 
        Sharing --> Services --> Remote Login button in System Preferences. 
        There is *supposed* to be a command line way to do it which 
        supposedly works remotely:
        
                $ sudo SystemStarter -v restart SSH
        
        but when I do this the console just gives me:

                SystemStarter[23616]: Unknown service: SSH
        
        What *does* work is if you just ps -A | grep -i ssh to get the process ID
        
                $ sudo ps -A | grep -i ssh
                23450  ??  S      0:00.12 /usr/sbin/sshd -i
                23455  ??  S      0:00.03 /usr/sbin/sshd -i
                23649  p8  S+     0:00.00 grep -i ssh
                
        and then use "kill" on the sshd PID

                $ sudo kill 23450
        
        sshd then restarts automatically, and if you edited sshd_config in the meantime it restarts with the new settings. Yay X11!
      
        # HEADER  Update: Getting Remote X Windows to Display On Your Mac
        For some reason I only had to do this for Mozilla, which 
        was giving me errors like this:
        
                Gdk-ERROR **: BadDrawable (invalid Pixmap or Window parameter)
        
                $ sudo emacs -nw /etc/ssh_config
                Password:

        Where it says
        
                #   ForwardX11 no
        
        change it to
        
                #   ForwardX11 yes
        
        Also, use the -Y switch on ssh (instead of -X).
          

----GMIP, the X11 Graphics Editor 
# www.gimp.org
# http://sourceforge.net/projects/gimponosx/

# download GIMP, launch.
# as good as Photoshop but free

# to learn more about how to work with GIMP
# http://docs.gimp.org/2.8/en/

# you do NOT need X11 installed. GIMP will run within Aqua OSX enviroment.

        """
        # Learning Unix for OS X - Going Deep With The Terminal and Shell - Dave Taylor 2016
        -----------------------------------------------------------------------------------------------
        Chapter 
        1 Why Use Unix? 
        2 Using the Terminal 
        3 Exploring the Filesystem
        4 File Management 
        5 Finding Files and Information 
        6 Redirecting I/O 
        7 Multitasking 
        8 Taking Unix Online 
        9 Of Windows and X11
        10 Where to go from here 
        --------------------------------------------------------------------------------------------
        """

-----------------------------------------------------------------------------------------------
Chapter 
10 Where to Go from Here 
# look for other shell features: aliases, functions, and 
# learn sophisicated command pipes, shell scripts, vi

----Documentation 
---- ---- man Command 
# Unix Programmer's Manual
# man output is filtered through "less" pager in OSX.
# SQUIREL - manpages are displayed using a program that does not write the displayed
# text to the Terminal's scroll buffer. Thus can not scroll. Easy fix is
TERM="ansi" # on the command line or add the line 
export TERM="ansi" # to your .profile file, then manpages will remain in 
# the Terminal's scroll buffer.

# OSX also includes command called apropos (= alias for man -k)
# so enter apropos followed by a descriptive word and you will get a list of
# commands that might help. But to get this to work, you will need to first 
# build the apropos database. This is done periodically by OSX. Can also do manually
$ sudo periodic weekly
Password:

# you can also do this and have the job run in the background by appending &

# Once you have rebuilte your apropos database, you can use apropos or man -k to find
# all commands related to zip for example with this code
$ man -k zip | grep '(1)'


# use man -k and standard piping to trim results

# example
# only interested in regular user commands? 
# add grep '(1)' to eliminate all and include only the section 1 references
# '(2)' for section 2, etc...

$ man -k postscript | grep '(1)'

        $ man -k postscript | grep '(1)'
        cupstestdsc(1)           - test conformance of postscript files (deprecated)
        grops(1)                 - PostScript driver for groff
        pfbtops(1)               - translate a PostScript font in .pfb format to ASCII

# example - 3 possibilites here:
# (1) some commands are not separate Unix programs vs some commands are part of the shell
# on OSX, you will find documentation for those commands in the manual page for bash or
# in the busy manpage for builtin

# (2) if the program is not a standard part of your Unix system, that is
# if you or your system staff added the program to your system, there may not be
# any manual page, or you may have to configure the man program to find the local
# manpage files.

# (3) you dont have all the manpage directories in your MAN PATH variable. If so,
# add the following to your .profile file, then open a new Terminal window
export MANPATH=${MANPATH}:/opt/X11/share/man:/opt/local/share/man



        # from
        # Sams Teach Yourself Unix in 24 hours Dave Taylor 2016
        Hour 1 What is This Unix Stuff 

        $ alias apropos="man -k \!* | uniq | grep 1"
        $ apropos cd



---- ---- Documentation on the Internet
# there are many different version of Unix
# some info may be far too technical for you

# best place to start is Apple website at http://www.apple.com/osx 
# or open source projects page http://developer.apple.com/opensource

# try searching for grep
# magazines http://mactech.com  http://macworld.com     http://www.linuxjournal.com
# publishers    http://www.orielly.com  http://safaribooksonline.com
# universities
# OSX related websites such as      
# http://puredarwin.org   http://macosxhints.com    http://AskDaveTaylor.com
# http://www.macdevcenter.com   http://www.macrumors.com    http://macintouch.com


---- ---- Books 

----Customizing Your Unix Experience
---- ---- Shell Aliases and Functions 
# hard to remember or command lines that seem too long
# example
alias grep='grep --color=always'
# see Creating Aliases on page 38

---- ---- Programming 
# shell aliases and functions are simple cases of shell programming

---- ---- ---- Shell scripts 
# the shell is the system's command interpreter
# save a series of shell commands in a shell script to accomplish specialized functions

# example 
# the following script reads lines out of a file called tweets.txt and prints
# those that are too long to be sent to Twitter (130 characters + 10 for your name)
# here it is:

        #!/bin/sh

        while read tweet
        do 
            length="$(echo $tweet | wc -c)"
            if [ $length -ge 130 ] ; then 
                echo $length -- $(echo $tweet | cut -c1-30)...
            fi 
        done < tweets.txt 

        exit 0

# 1st line indicates what program should run the script. This is written for the Bourne shell /bin/sh.

# while loop reads lines from the file 

# $() notation sends whatever is inside to a subshell for separate execution, replacing it all
# with the output of the command (in this case the number of characters in the line)

# an if test checks to see if its over 130 characters, and echo is used to output those lines that match

# to make a shell script act as if its a new program rather than just a text file, you the 
chmod +x # to make it executable.

# then you can run it by typing its name if it's in your current PATH, or with ./ prefix to indicate that
# otherwise you will need to specify its full pathname.

# look at 
 Wicked Cool Shell Scripts # No Starch Press by Dave Taylor (this book's AUTHOR)
 Unix in a nutshell # O'Reilly by Arnold Robbins
 Unix Power Tools # O'Reilly by Jerry Peck, 

---- ---- ---- Turning shell scripts into AppleScript droplets
# cool trick with OSX is to turn a shell script into a droplet (an application that
# can have files dropped onto it from the Finder).

# at its simplest, a droplet script accepts one or more files, given as command-line arguments
# which then processed in some manner. 
# example
# this droplet script will print whatever files you give it:

    #!/bin/sh
    pr "$@" | lpr 

# this can be turned into a droplet by dragging the shell script icon over the DropScript application. It
# then creates a new version called dropfilename that is fully drag-and-drop-enabled.
# for example, if this script were called print-text, the droplet would be called dropprint-text

---- ---- Perl, Python, and Ruby 

---- ---- C and C++ 


            """
            # Learning Unix for OS X - Going Deep With The Terminal and Shell - Dave Taylor 2016
            -----------------------------------------------------------------------------------------------
            Chapter 
            1 Why Use Unix? 
            2 Using the Terminal 
            3 Exploring the Filesystem
            4 File Management 
            5 Finding Files and Information 
            6 Redirecting I/O 
            7 Multitasking 
            8 Taking Unix Online 
            9 Of Windows and X11
            10 Where to go from here 
            --------------------------------------------------------------------------------------------
            """

==========================================END OF BOOK==========================================






===============================================================================================
===============================================================================================
===============================================================================================
===============================================================================================
===============================================================================================
===============================================================================================
===============================================================================================
===============================================================================================
==========================================SUMMARY==============================================
# Sams Teach Yourself Unix in 24 hours Dave Taylor 2016
Hour 1 What is This Unix Stuff 
Hour 2 Getting onto the System and Using the Command Line 
Hour 3 Moving About the File System
Hour 4 Listing Files and Managing Disk Usage 
Hour 5 Ownership and Permissions 
Hour 6 Creting, Moving, Renaming, and Deleting Files and Directories 
Hour 7 Looking Into Files 
Hour 8 Filters, Pipes, and Wildcards!
Hour 9 Slicing and Dicing Command-Pipe Data 
Hour 10 Introduction to vi Editor 
Hour 11 Advanced vi Tricks, Tools, and Techniques 
Hour 12 Overview of the emacs Editor
Hour 13 Introduction to Command Shells 
Hour 14 Advanced Shell Interaction 
Hour 15 Job Control
Hour 16 Shell Programming Overview 
Hour 17 Advanced Shell Programming
Hour 18 Printing in the Unix Environment 
Hour 19 Archives and Backups 
Hour 20 Using Email to Communicate 
Hour 21 Connecting to Remote Systems Using SSH and SFTP 
Hour 22 Searching for Information and Files 
Hour 23 Perl Programming in Unix 
Hour 24 GNOME and the GUI Environment
===============================================================================================



==========================================DETAILS==============================================
# Sams Teach Yourself Unix in 24 hours Dave Taylor 2016
Hour 1 What is This Unix Stuff 
-----------What Is Unix?
-----------Brief History of Unix
-----------Whats All This About Multiuser Systems?
----------- Cracking Open the Shell
-----------Getting Help


Hour 2 Getting onto the System and Using the Command Line 
-----------Beginnineg Your Session 
-----------Seeing Whats Going On Around You 


Hour 3 Moving About the File System
-----------What a Hierarchical File System Is All About 
-----------Directory Separator Characters
-----------The Difference Between Relative and Absolute Filenames


Hour 4 Listing Files and Managing Disk Usage 
-----------The ls Command 
-----------Special ls Command Flags 
-----------Permission Strings 


Hour 5 Ownership and Permissions 
-----------Working with File Permissions 


Hour 6 Creting, Moving, Renaming, and Deleting Files and Directories 
-----------Manipulating the Unix File System 


Hour 7 Looking Into Files 
-----------Looking Inside Files 


Hour 8 Filters, Pipes, and Wildcards!
-----------Maximizing the Command Line 


Hour 9 Slicing and Dicing Command-Pipe Data 
-----------The awk Programming System 
-----------How to Use cut in Pipes 
-----------Inline Editing with sed and tr


Hour 10 Introduction to vi Editor 
-----------Editing the Unix Way


Hour 11 Advanced vi Tricks, Tools, and Techniques 
-----------Advanced Editing with vi 
-----------Summar of vi Commands 


Hour 12 Overview of the emacs Editor
-----------The Other Popular Editor: emacs


Hour 13 Introduction to Command Shells 
-----------The Command Shell Game 


Hour 14 Advanced Shell Interaction 
-----------Which Shell is Which?


Hour 15 Job Control
-----------Wrestling with Your Jobs 


Hour 16 Shell Programming Overview 
-----------Building Your Own Commands 


Hour 17 Advanced Shell Programming
-----------Searching a Database of Filenames with mylocate


Hour 18 Printing in the Unix Environment 
-----------Making a Printed Copy 


Hour 19 Archives and Backups 
-----------The tar Tape Archieve Utility 
-----------The zip Archive Utility 
-----------Shrinking Your Files with compress
-----------Exploring the Unix Tape Command: cpio 
-----------Personal Backup Solutions 
-----------Working with Linux Package Managers


Hour 20 Using Email to Communicate 
-----------Interacting with the World


Hour 21 Connecting to Remote Systems Using SSH and SFTP 
-----------Stepping Beyond Your Own System


Hour 22 Searching for Information and Files 
-----------Finding Whats Where 


Hour 23 Perl Programming in Unix 
-----------Flexible and Powerful: Perl 


Hour 24 GNOME and the GUI Environment
-----------Tweaking Your Inner GNOME
-----------Working with GNOME Applications 


Appendix A 
-----------how to I use find|args with filenames that contain spaces?
-----------how do I find large files on my system?
-----------how do I run a program on a schedule?
-----------how do I fix file permission problems?
-----------how do I list files that dont match a given pattern?
-----------how do I view lines X-Y in a text file?
-----------how do I add a new directory to my PATH?
-----------how do I recover deleted files?
-----------how can I set my shell to protect me from accidental deletions?
-----------what do the shell erros arg list too long and broken pipe mean?
-----------why use ssh instead of telnet? Or sftp instead of ftp?



===============================================================================================



























<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<








Choice of Shells
can choose from
/bin/bash       #just learning so stay with this
/bin/csh
/bin/ksh
/bin/tcsh
/bin/zsh
/bin/sh

Setting the Terminal Title
echo '^[]2;My-Window-Title^G'       ANSI escape sequences.

Using AppleScript to Manipulate the Terminal
osascript -e \
'tell app "Termainal" to set option of first window to value'

osascript -e \
'tell app "Termainal" to set miniaturized of first window to true'

top or tail -f /var/log/system.log  #to help you keep an eye on how your system is performing

cd /usr/bin

cd ~; date ; du -s . ; date    
        #4 commans on 1 line using ;
        #1stcd ~ moves you to your home directory
        #2nd
        #3rd du -s figures out how much disk space is used by current directory as
                    #denoted by the period (.)
        #4th second date shows the time after the du command has run

Control U #erases entire input line
Control C #interrupts or cancels a command

Control D #quits shell  

To change shell prompt then type 
PS1="$ " or
PS1="FOO% "
PS1="Yes, Master "
PS1="\w \! \$ "
consider adding user name and/or host name

man csh     #tcsh - C shell with file name completion and command line editing
echo HOME
cd /

du Documents #disk usage
du -s Library
du -s * .[^.]*      #gives separate totals 
du -s /Applications/*.app 
du -s Library/*

df      #disk free
df -h 
df -H
df -m 
df -i

ls -ld 
ls -ld $HOME 
ls -ld $HOME/Documents 
ls -l viminfo 
ls -l /System/Library/Kernels/kernel 
ls -l /etc/sudoers 
ls -/Volumes 
cat         # reads a file and prints its contents to standard output
grep        # global/regular expression/print
            # this was sused to list only the lines in the file being edited that matched
            # a specified pattern. This went from g/re/p to grep

chmod   #to change permissions 
groups 
chown   #to change owners
sudo chown eric images 
sudo find / -name makewhatis -print         #dont use this unless you know what your doing


vi sample 

gzip        #to compress
gunzip      #to uncompress

tar         #Unix backups 1960s using round tape memory disk, tar = tape archiver
            #tar = creates a file containing multiple files and directories
            #gzip = makes an existing file shrink via compression


grep pattern [files]
grep "Unix" *
ls -l | grep "Aug"
ls -l | grep "root.*Aug"


grep -A n 
grep -B n 
grep -C n 
grep -v 
grep -n 
grep -l
grep -c 
grep -i 
grep -lv Jane *
grep -n -C1 Aqua sample 
grep -- coler=always text sample 
grep -c "kernel" /var/log/system.log
grep POST access_log
grep -E "POST.*(Safari|Firefox)" access_log 
grep -E POST access_log | wc -l 
grep -E "POST.MSIE" access_log | wc -l 
grep -E "POST.(Firefox)" access_log | wc -l 
grep -E "POST.(Safari)" access_log | wc -l 


locate gun 
locate alpha 
locate "/man/.*alpha"
locate alpha | grep "/man/"

find . -name "*.html" -print 
find /bin -size +30k -print 
find . -cmin 60 -print 
find . -cmin +60 -type f | wc -l
find /var/log -not -name "*.gz" -type f -size +0 -print 

ls -l IMG_1912.JPG 
mdls IMG_1912.JPG 
mdls HXR-MC50U\ Manual.pdf

mdfind "kMDItemAcquisitionModel == 'NIKON*'" | head
mdfind -onlyin ~/Music "kMDItemMusical Genre == 'Jaxx'"
mdfind -onlyin ~ Jazz | head 

mdls IMG_1912.JPG | grep -E '(PixelHeight|PixelWidth)'

mdls "06 Elise affair.mp3" | grep Duration 

find . -name "*jpg" -print0 | xargs -0 mdls | grep FocalLength

mdfind -0 "kMDItemFocalLength == '35'" | xargs -0 mdls | grep -E '(PixelHeight|PixelWidth|DisplayName)'

photosize Peanut.jpg


cat todo 
tr '[aeiou]' '[xxxxx]' < todo 
#cat files(s)

cat /etc/bashrc

cat /etc/bashrc > mybashrc
cat mybashrc

who > users 
date > today 
ls 

cat users
cat today 

cat > new-todo
^D          #signals end of the text giving you back a shell prompt

cat today todo > diary 
cat diary 


cat users >> diary 
date >> diary 
cat diary 


ls -l $HOME | colrm 1 30 
ls -l $HOME | colrm 1 30 > homedirlist.txt 

find ~/Documents -type d -print | wc -l

tr      #translater utility 
tr "[:lower:]" "[:upper:]" < todo 
tr -d "[aeiou]" < todo

tr -cs "[:alpha:]" "\n" < alice.txt | wc -l

grep "pattern" files
mdfind ipod | wc -l 
mdfind ipod | grep -v "Library" | wc -l
mdfind ipod | grep -v "Library" | grep "/taylor/" | wc -l

tr -cs "[:alpha:]" "\n" < alice.txt | tail -15
head -255 alice.txt | tail -5

sort food 

sort -n 
sort -r 
sort -f 
sort -k x 

ls -l | grep "Jan" | sort -n -k 5

find . -type f -print0 | xargs -0 ls -s1 | sort -rn | head

tr -cs "[:alpha:]" "\n" < alice.txt | sort | uniq | wc -l
tr -cs "[:alpha:]" "\n" < alice.txt | tr "[A-Z]" "[a-z]" | sort | uniq | wc -l

ls -l | sort -nk 5 | less

lpstat -a  #shows everything about known printers
lpstat -d 
lpstat -t
ls -l | lp 

pr          #minor formating for printing

cat food
pr -2 -h "Restaurants" food 
pr -2 -h "Restaurants" food | lpr       #to create a pipe to send to the lpr printer program


MULTITASKING

sort bigfile > bigfile.sort &
ps -fp 372
kill 372

sort hugefile1 hugefile2 > sorted 
^Z 
bg 
vi test.txt 


ps      #process status 
tty 
ps -ax | head -20 
ps -ax -U root | head 
top -l 1 } head -8
top -o cpu 
kill PID(s)

(sleep 60; who) & 
ps 
kill 981

(sleep 60; who) & 
killall -s make 
killall -s who 
killall -s sleep

killall sleep 
killall -v sleep 


LAUNCHING GUI APPLICATIONS 

open peanut.jpg
open *.doc 
open .profile 
open .sample.swp 

touch ~/Desktop/myFile.txt
GetFileInfo Column.42.docx 

mdfind NIKON | open -f      #stream a bunch of input into a text file then open in an Aqua file
open messages 
open -a messages 
open -e ~/Sites/someFile.html


ssh
man ssh 
who

scp         #secure copy 
rcp         #remote copy

ftp hostname 

put filename 
mput filenames 
get filename 
mget filenames
prompt 
hash 
cd pathname 
lcd pathname 
dir 
pwd 
binary 
ascii 
passive 
quit or bye 
!cmd 


EXAMPLE
cd downloads
ls
ftp rhino.zoo.edu 
    username ktaylor 
    password xyz 
ftp> cd work 
ftp> dir
ftp> get todo 
ftp> !ls 
ftp> quit 
ls

ftp> help 


EXAMPLE OF sftp    #secure ftp 

cd Downloads 
sftp taylor@intuitive.com 
    password xyz 
sftp> ls
sftp> cd mybin 
sftp> -l
sftp> get webspell
sftp> get -P webspell       # -P gives file creation info
sftp> ls
sftp> quit 
ls -l webspell 



FTP WTIH A WEB BROWSER 

ftp://hostname/pathname 

curl        #copy from URL

curl -O ftp://somecorp.za/pub/reports/2001.pdf 
curl ftp://ftp.orielly.com/pub/README.ftp | less
curl http://www.orielly.com | less

curl http://www.orielly.com > orielly.html
open orielly.html

curl http://www.orielly.com > orielly.html
open -a "Google Chrome" orielly.html

FTP FROM THE FINDER 

ls -l /Volumes/
unmount /Volumes/ftp.oreilly.com        #to disconnect



MANUALS 

man vi 
man -k zip | grep '(1)'



BASH PROFILE 

ls -a
#look for .bash_profile
export PS1="$ "  #include this in your profile to change your prompt

Last login: Wed Dec 28 15:48:46 on ttys001
Atuls-MBP:~ atulgolhar$ PS1 = "Yes, Master? "
-bash: PS1: command not found
Atuls-MBP:~ atulgolhar$ PS1= "Yes, Master? "
-bash: Yes, Master? : command not found
Atuls-MBP:~ atulgolhar$ PS1="Yes, Master? "
Yes, Master? 
Yes, Master? 
Yes, Master? 
Yes, Master? 

===============================================================================================
===============================================================================================

HOMEBREW

which brew
brew install wget
brew list   # lists installed UNIX packages
brew uninstall


===============================================================================================
===============================================================================================


Built-in Functions      
abs()
all()
any()
ascii()
bin()
bool()
bytearray()
bytes()
callable()
chr()
classmethod()
compile()
complex()
delattr()
dict()
dir()
divmod()
enumerate()
eval()
exec()
filter()
float()
format()
frozenset()
getattr()
hash()
help()
hex()
id()
input()
int()
isinstance()
issubclass()
iter()
len()
list()
locals()
map()
max()
memoryview()
min()
next()
object()
oct()
open()
ord()
pow()
print()
property()
range()
repr()
reversed()
round()
set()
setattr()
slice()
sorted()
staticmethod()
str()
sum()
super()
tuple()
type()
vars()
zip()
__import__()


===============================================================================================
===============================================================================================


"""
help> keywords

Here is a list of the Python keywords.  Enter any keyword to get more help.

False               def                 if                  raise
None                del                 import              return
True                elif                in                  try
and                 else                is                  while
as                  except              lambda              with
assert              finally             nonlocal            yield
break               for                 not                 
class               from                or                  
continue            global              pass        



help> topics

Here is a list of available topics.  Enter any topic name to get more help.

ASSERTION           DELETION            LOOPING             SHIFTING
ASSIGNMENT          DICTIONARIES        MAPPINGMETHODS      SLICINGS
ATTRIBUTEMETHODS    DICTIONARYLITERALS  MAPPINGS            SPECIALATTRIBUTES
ATTRIBUTES          DYNAMICFEATURES     METHODS             SPECIALIDENTIFIERS
AUGMENTEDASSIGNMENT ELLIPSIS            MODULES             SPECIALMETHODS
BASICMETHODS        EXCEPTIONS          NAMESPACES          STRINGMETHODS
BINARY              EXECUTION           NONE                STRINGS
BITWISE             EXPRESSIONS         NUMBERMETHODS       SUBSCRIPTS
BOOLEAN             FLOAT               NUMBERS             TRACEBACKS
CALLABLEMETHODS     FORMATTING          OBJECTS             TRUTHVALUE
CALLS               FRAMEOBJECTS        OPERATORS           TUPLELITERALS
CLASSES             FRAMES              PACKAGES            TUPLES
CODEOBJECTS         FUNCTIONS           POWER               TYPEOBJECTS
COMPARISON          IDENTIFIERS         PRECEDENCE          TYPES
COMPLEX             IMPORTING           PRIVATENAMES        UNARY
CONDITIONAL         INTEGER             RETURNING           UNICODE
CONTEXTMANAGERS     LISTLITERALS        SCOPING             
CONVERSIONS         LISTS               SEQUENCEMETHODS     
DEBUGGING           LITERALS            SEQUENCES           



help> symbols

Here is a list of the punctuation symbols which Python assigns special meaning
to. Enter any symbol to get more help.

!=                  *=                  <<                  ^
"                   +                   <<=                 ^=
"""        """      +=                  <=                  _
%                   ,                   <>                  __
%=                  -                   ==                  `
&                   -=                  >                   b"
&=                  .                   >=                  b'
'                   ...                 >>                  j
'''                 /                   >>=                 r"
(                   //                  @                   r'
)                   //=                 J                   |
*                   /=                  [                   |=
**                  :                   \                   ~
**=                 <                   ]                   




help> modules

Please wait a moment while I gather a list of all available modules...

IN                  _weakrefset         hmac                shlex
Notes_ProgInPython3 abc                 html                shutil
Shape               aifc                http                signal
__future__          antigravity         idlelib             site
_ast                argparse            imaplib             smtpd
_bisect             array               imghdr              smtplib
_bootlocale         ast                 imp                 sndhdr
_bz2                asynchat            importlib           socket
_codecs             asyncio             inspect             socketserver
_codecs_cn          asyncore            io                  sqlite3
_codecs_hk          atexit              ipaddress           sre_compile
_codecs_iso2022     audioop             itertools           sre_constants
_codecs_jp          base64              json                sre_parse
_codecs_kr          bdb                 keyword             ssl
_codecs_tw          binascii            leo_tolstoy         stat
_collections        binhex              lib2to3             statistics
_collections_abc    bisect              linecache           string
_compat_pickle      bs4                 locale              stringprep
_compression        builtins            logging             struct
_crypt              bz2                 lzma                subprocess
_csv                cProfile            macpath             sunau
_ctypes             calendar            macurl2path         symbol
_ctypes_test        cgi                 mailbox             symtable
_curses             cgitb               mailcap             sys
_curses_panel       chunk               marshal             sysconfig
_datetime           cmath               math                syslog
_dbm                cmd                 mimetypes           tabnanny
_decimal            code                mmap                tarfile
_dummy_thread       codecs              modulefinder        telnetlib
_elementtree        codeop              multiprocessing     tempfile
_functools          collections         netrc               termios
_hashlib            colorsys            nis                 test
_heapq              compileall          nntplib             test1
_imp                concurrent          ntpath              test2
_io                 configparser        nturl2path          test3
_json               contextlib          numbers             test4
_locale             copy                opcode              test5
_lsprof             copyreg             operator            test6
_lzma               crypt               optparse            test7
_markerlib          csv                 os                  test8
_markupbase         ctypes              parser              test9_author_web
_md5                curses              pathlib             testPython3book
_multibytecodec     datetime            pdb                 textwrap
_multiprocessing    dbm                 pickle              this
_opcode             decimal             pickletools         threading
_operator           difflib             pip                 time
_osx_support        dis                 pipes               timeit
_pickle             distutils           pkg_resources       tkinter
_posixsubprocess    doctest             pkgutil             token
_pydecimal          dummy_threading     platform            tokenize
_pyio               easy_install        plistlib            trace
_random             email               poplib              traceback
_scproxy            encodings           posix               tracemalloc
_sha1               ensurepip           posixpath           tty
_sha256             enum                pprint              turtle
_sha512             errno               profile             turtledemo
_signal             faulthandler        pstats              types
_sitebuiltins       fcntl               pty                 typing
_socket             fibo                pwd                 unicodedata
_sqlite3            fibo1               py_compile          unittest
_sre                fibo2               pyclbr              urllib
_ssl                filecmp             pydoc               uu
_stat               fileinput           pydoc_data          uuid
_string             fnmatch             pyexpat             venv
_strptime           formatter           queue               warnings
_struct             fractions           quopri              wave
_symtable           ftplib              random              weakref
_sysconfigdata      functools           re                  webbrowser
_testbuffer         gc                  readline            wsgiref
_testcapi           genericpath         reprlib             xdrlib
_testimportmultiple getopt              resource            xml
_testmultiphase     getpass             rlcompleter         xmlrpc
_thread             gettext             runpy               xxlimited
_threading_local    glob                sched               xxsubtype
_tkinter            grp                 select              zipapp
_tracemalloc        gzip                selectors           zipfile
_warnings           hashlib             setuptools          zipimport
_weakref            heapq               shelve              zlib

Enter any module name to get more help.  Or, type "modules spam" to search
for modules whose name or summary contain the string "spam".

help> 
"""

===============END UNIX Commands


===============================================================================================
===============================================================================================

===============Random BASH iOS commands
https://medium.com/@duruldalkanat/bash-commands-guide-129c81cbfe87


# Notes_BASH_py

$ ls -a
$ ls -a
$ ls -F
$ ls -s
$ ls -al
$ ls -l 
$ ls -nl 
$ ls -c 

$ man -       # Print a help message and exit ?
$ man -V
$ man -V -- version
$ man -version
$ man -v

$ env
===============END

===============================================================================================
===============================================================================================


SUMMARY Coding Examples Python3



#SUMMARY - Ch 3 Collection Data Types
#Sequences (tuples slice concatenation, membership testing, augmented, 
    #named tuples import collections, 
    #lists, list comprehension, sets, set comprehension, frozensets, 
    #iterable sequence unpacking operator, 
    #mapping types dictionary, dictionary comprehension, default dictionary, 
    #Nondeterminism Solution (1)try...finally block to ensure clean is done
    #(2) use with statement in Chap 8
    #List comprehension     #small lists use list literals  list(range(n))
                            #large lists use list comprehensions    
                            #           dict_defined = []
                            #           for year in range():
                            #               if () or ():
                            #                   append.x
                            #large list comprehension
                            #           temp = []    
                            #           item for item in iterable if condition
                            #               temp.append(item)

#!/usr/bin/env python3
#ATUL_uniquewords1.py

import sys
import string


words = {}
strip = string.whitespace + string.punctuation + string.digits + "\"'"
for filename in sys.argv[1:]:
    with open(filename) as file:
        for line in file:
            for word in line.lower().split():
                word = word.strip(strip)
                if len(word) > 2:
                    words[word] = words.get(word, 0) + 1

for word in sorted(words):
    print("word --> {0} occurs {1} counter".format(word, words[word]))




#!/usr/bin/env python3
#ATUL_uniquewords2.py
#add default dictionary code



#!/usr/bin/env python3
#ATUL_uniquewords_ans.py
import sys
import string
import collections


def by_value(item):
    return item[1]

words = collections.defaultdict(int)    #words = {}
strip = string.whitespace + string.punctuation + string.digits + "\"'"
for filename in sys.argv[1:]:
    with open(filename) as file:
        for line in file:
            for word in line.lower().split():
                word = word.strip(strip)
                if len(word) > 2:
                    words[word] = words.get(word, 0) + 1

for word, count in sorted(words.items(), key=by_value):
    print("word --> {0} occurs {1} counter".format(word, count))





===============RANDOM Python3 Examples
ATUL - good introduction to beginner class 


>>> print(list(range(1,3)))
[1, 2]


#!/usr/bin/env python3

def draw_line(tick_length, tick_label=''):
    line = '-' * tick_length + " Hello World"
    print(line)

def draw_interval():
    pass

def draw_ruler(num_inches, major_length):
    draw_line(major_length, '0')


                            >>> import temp2
                            >>> temp2.draw_ruler(1,7)
                            ------- Hello World
                            >>> 



                            """
                            number of inches
                            major_length  = major tick length


                            >>> temp.draw_ruler(1,3)
                            --- 0
                            -
                            --
                            -
                            --- 1

                            """


===============================================================================================
===============================================================================================
===============================================================================================
===============================================================================================
===============================================================================================
===============================================================================================
===============================================================================================
===============================================================================================
===============================================================================================
===============================================================================================
# Bash Cookbook 2nd Ed 2018

CONTENTS
BOOK Bash Cookbook
CHAPTER: 1 Beginning Bash
CHAPTER: 2 Standard Output
CHAPTER: 3 Standard Input
CHAPTER: 4 Executing Commands
CHAPTER: 5 Basic Scripting: Shell Variables 
CHAPTER: 6 Shell Logic and Arithmetic
CHAPTER: 7 Intermediate Shell Tools 1
CHAPTER: 8 Intermediate Shell Tools 2
CHAPTER: 9 Finding Files: find, locate, slocate
CHAPTER: 10 Additional Features for Scripting
CHAPTER: 11 Working with Dates and Times
CHAPTER: 12 End-User Tasks as Shell Scripts
CHAPTER: 13 Parsing and Similiar Tasks
CHAPTER: 14 Writing Secure Shell Scripts
CHAPTER: 15 Advanced Scripting
CHAPTER: 16 Configuring and Customizing bash 
CHAPTER: 17 Housekeeping and Administrative Tasks
CHAPTER: 18 Working Faster by Typing Less
CHAPTER: 19 Tips and Traps: Common Goofs for Novices




1 Beginning Bash 
    1.1 why bash 
    1.2 the bash Shell 
    1.3 Decoding the Prompt
    1.4 Showing Where You Are 
    1.5 Finding and Running Commands 
    1.6 Getting Information About Files 
    1.7 Showing All Hidden (Dot) Files in the Current Directory 
    1.8 Using Shell Quoting 
    1.9 Using or Replacing Builtins and External Commands 
    1.10 Determining if You Are Running Interactively 
    1.11 Setting bash as Your Default Shell 
    1.12 Keeping bash Updated 
    1.13 Getting bash for Linux
    1.14 Getting bash for xBSD 
    1.15 Getting bash for macOS 
    1.16 Getting bash for Unix 
    1.17 Getting bash for Windows
    1.18 Getting has Without Getting bash 
    1.19 Learning More About bash Documentation 


2 Standard Output 
    2.1 Writing Output to the Termainal Window 
    2.2 Writing Output but Perserving Spacing 
    2.3 Writing Output with More Formatting Control 
    2.4 Writing Output Without the Newline
    2.5 Saving Output from a Command
    2.6 Saving Output to Other Files 
    2.7 Saving Output from the ls Command 
    2.8 Sending Output and Error Messages to Different Files 
    2.9 Sending Output and Error Messages to the Same File 
    2.10 Appending Rather than Clobbering Output 
    2.11 Using Just the Beginning or End of a File 
    2.12 Skipping a Header in a File 
    2.13 Throwing Output Away 
    2.14 Saving or Grouping Output from Several Commands 
    2.15 Connecting Two Programs by Using Output as Input 
    2.16 Saving a Copy of Output Even While Using It as Input 
    2.17 Connecting Two Programs by Uising Output as Arguments 
    2.18 Using Multiple Redirects on One Line 
    2.19 Saving Output When Redirect Doesnt Seem to Work 
    2.20 Swapping STDERR and STDOUT
    2.21 Keeping Files Safe from Accidental Overwriting 
    2.22 Clobbering a File on Purpose 


3 Standard Input 
    3.1 Getting Input from a File 
    3.2 Keeping Your Data with Your Script 
    3.3 Preventing Weird Behavior in a Here-Document
    3.4 Indenting Here-Documents
    3.5 Getting User Input 
    3.6 Getting Yes or No Input 
    3.7 Selecting from a List of Options 
    3.8 Prompting for a Password


4 Executing Commands 
    4.1 Running Any Executable 
    4.2 Running Several Commands in Sequence 
    4.3 Running Several Commands All at Once 
    4.4 Telling Whether a Command Succeeded or Not
    4.5 Running a Command Only if Another Command Succeeded
    4.6 Using Fewer if Statements
    4.7 Running Long Jobs Unattended 
    4.8 Displaying Error Messages WHen Failures Occur
    4.9 Running Commands from a Variable 
    4.10 Running All Scripts in a Directory


5 Basic Scripting: Shell Variables 
    5.1 Documenting Your Script 
    5.2 Embedding Documentation in Shell Scripts 
    5.3 Promoting Script Readability 
    5.4 Separating Variable Names from Surrounding Text
    5.5 Exporting Variables 
    5.6 Seeing All Variable Values 
    5.7 Using Parameters in a Shell Script 
    5.8 Looping Over Arguments Passed to a Script 
    5.9 Handling Parameters with Spaces 
    5.10 Handling Lists of Parameters with Spaces
    5.11 Counting Arguments 
    5.12 Consuming Arguments
    5.13 Getting Default Values 
    5.14 Setting Default Values 
    5.15 Using null as a Valid Default Value
    5.16 Using More than Just a Constant String for Default 
    5.17 Giving an Error Message for Unset Parameters 
    5.18 Changing Pieces of a String 
    5.19 Getting the Absolute Value of a Number 
    5.20 Using bash for basename 
    5.21 Using bash for dirname 
    5.22 Using Alternate Values for Comma Separated Values 
    5.23 Using Array Variables 
    5.24 Converting Between Upper- and Lowercase 
    5.25 Converting to Camel Case 


6 Shell Logic and Arithmetic 
    6.1 Doing Arithmetic in Your Shell Script 
    6.2 Branching on Conditions 
    6.3 Testing for File Characteristics
    6.4 Testing for More than One Thing 
    6.5 Tsting for String Characteristics
    6.6 Testing for Equality
    6.7 Testing with Pattern Matches
    6.8 Testing with Regular Expressions 
    6.9 Changing Behavior with Redirections 
    6.10 Looping for a While 
    6.11 Looping with a read 
    6.12 Looping with a Count 
    6.13 Looping with Floating-Point Values 
    6.14 Branching Many Ways 
    6.15 Parsing Command-Line Arguments 
    6.16 Creating Simple Menus
    6.17 Changing the Prompt on Simple Menus 
    6.18 Creating a Simple RPN Calculator
    6.19 Creating a Command-Line Calculator 


7 Intermediate Shell Tools 1
    7.1 Shifting Through Files for a String 
    7.2 Getting Just the Filename from a Search
    7.3 Getting a Simple True/False from a Search 
    7.4 Searching for Text While Ignoring Case 
    7.5 Doing a Search in a Pipeline
    7.6 Paring Down What the Search Finds
    7.7 Searching with More Complex Patterns 
    7.8 Searching for an SSN 
    7.9 Grepping Compressed Files
    7.10 Keeping Some Output, Discarding the Rest 
    7.11 Keeping Only a Portion of a Line of Output 
    7.12 Reversing the Words on Each Line 
    7.13 Summing a List of Numbers 
    7.14 Counting String Values with awk 
    7.15 Counting String Values with bash 
    7.16 Showing Data as a Quick and Easy Histogram 
    7.17 An Easy Histogram with bash 
    7.18 Showing a Paragraph of Text After a Found Phrase


8 Intermediate Shell Tools 2
    8.1 Sorting Your Output 
    8.2 Sorting Numbers 
    8.3 Sorting IP Addresses
    8.4 Cutting Out Parts of Your Output 
    8.5 Removing Duplicate Lines 
    8.6 Compressing Files 
    8.7 Uncompressing Files 
    8.8 Checking a tar Archive for Unique Directories 
    8.9 Translating Characters 
    8.10 Converting Uppercase to Lowercase 
    8.11 Converting DOS Files to Linux Format 
    8.12 Removing Smart Quotes
    8.13 Counting Lines, Words, or Characters in a File 
    8.14 Rewrapping Paragraphs 
    8.15 Doing More with less


9 Finding Files: find, locate, slocate 
    9.1 Finding All Your MP3 Files 
    9.2 Handling Filenames Containing Odd Characters
    9.3 Speeding Up Operations on Found Files 
    9.4 Finding Files Across Symbolic Links 
    9.5 Finding Files Irrespective of Case
    9.6 Finding Files by Date 
    9.7 Finding Files by Type 
    9.8 Finding Files by Size 
    9.9 Finding Files by Content 
    9.10 Finding Existing Files and Content Fast 
    9.11 Finding a File Using a List of Possible Locations 


10 Additional Features for Scripting 
    10.1 Daemon-izing Your Script 
    10.2 Reusing Code with Includes and Sourcing 
    10.3 Using Configuration Files in a Script 
    10.4 Defining Functions
    10.5 Using Functions; Parameters and Return Values
    10.6 Trapping Interrupts
    10.7 Redefining Commands with alias 
    10.8 Avoiding Aliases and Functions 
    10.9 Counting Elapsed Time 
    10.10 Writing Wrappers


11 Working with Dates and Times 
    11.1 Formatting Dates for Display 
    11.2 Supplying a Default Date 
    11.3 Automating Date Ranges 
    11.4 Converting Dates and Times to Epoch Seconds 
    11.5 Converting Epoch Seconds to Dates and Times 
    11.6 Getting Yesterday or Tomorrow with Perl 
    11.7 Figuring Out Date and Time Arithmetic
    11.8 Handling Time Zones, Daylight Saving Time, and Leap Years 
    11.9 Using date and cron to Run a Script on the Nth Day
    11.10 Logging with Dates 


12 End-User Tasks as Shell Scripts 
    12.1 Starting Simple by Printing Dashes 
    12.2 Viewing Photos in an Album
    12.3 Loading Your MP3 Player`
    12.4 Burning a CD
    12.5 Comparing Two Documents 


13 Parsing and Similiar Tasks
    13.1 Parsing Arguments for Your Shell Script 
    13.2 Parsing Arguments with Your Own Error Messages 
    13.3 Parsing Some HTML 
    13.4 Parsing Output into an Array 
    13.5 Parsing Output with a Function Call 
    13.6 Parsing Text with a read Statement 
    13.7 Parsing with read into an Array
    13.8 Reading an Entire File 
    13.9 Getting Your Plurals Right 
    13.10 Taking It One Character at a Time 
    13.11 Cleaning Up an SVN Source Tree 
    13.12 Setting Up a Database with MySQL 
    13.13 Isolating Specific Fields in Data 
    13.14 Updating Specific Fields in Datafiles 
    13.15 Trimming Whitespace 
    13.16 Compressing Whitespace 
    13.17 Processing Fixed-Length Records 
    13.18 Processing Files with No Line Breaks
    13.19 Converting a Datafile to CSV 
    13.20 Parsing a CVS Datafile 


14 Writing Secure Shell Scripts 
    14.1 Avoiding Common Security Problems 
    14.2 Avoiding Interpreter Spoofing
    14.3 Setting a Secure $PATH 
    14.4 Clearing All Aliases
    14.5 Clearing the Command Hash
    14.6 Preventing Core Dumps
    14.7 Setting a Secure $IFS 
    14.8 Setting a Secure umask 
    14.9 Finding World-Writable Directories in Your $PATH
    14.10 Adding the Current Directory to the $PATH 
    14.11 Using Secure Temporary Files 
    14.12 Validating Input 
    14.13 Setting Permissions 
    14.14 Leaking Passwords into the Process List 
    14.15 Writing setupid or setgid Scripts
    14.16 Restricting Guest Users 
    14.17 Using chroot Jails
    14.18 Running as a Non-root User
    14.19 Using sudo More Securely 
    14.20 Using Passwords in Scripts 
    14.21 Using SSH Without a Password
    14.22 Restricting SSH Commands
    14.23 Disconnecting Inactive Sessions 


15 Advanced Scripting 
    15.1 Finding bash Portably for #!
    15.2 Setting a POSIX $PATH
    15.3 Developing Porable Shell Scripts 
    15.4 Testing Scripts Using Virtual Machines
    15.5 Using for Loops Portably
    15.6 Using echo Portably
    15.7 Splitting Output Only When Necessary
    15.8 Viewing Output in Hex
    15.9 Using bash Net-Redirection 
    15.10 Finding My IP Address
    15.11 Getting Input from Another Machine
    15.12 Redirecting Output for the Life of a Script 
    15.13 Working Around "Argument list too long" Errors
    15.14 Logging to syslog from Your Script 
    15.15 Using logger Correctly
    15.16 Sending Email from Your Script 
    15.17 Automating a Process Using Phases
    15.18 Doing Two Things at Once
    15.19 Running an SSH command on multiple hosts 


16 Configuring and Customizing bash 
    16.1 bash Startup Options 
    16.2 Customizing Your Prompt 
    16.3 A Prompt Before Your Programs Runs 
    16.4 Changing Your $PATH Permanently
    16.5 Changine Your $PATH Temporarily
    16.6 Setting Your $CDPATH 
    16.7 When Programs Are Not Found 
    16.8 Shortening or Changing Command Names
    16.9 Adjusting Shell Behavior and Environment
    16.10 Adjusting readline Behavior Using .inputrc
    16.11 Keeping a Private Stash of Utilities by Adding ~/bin 
    16.12 Using Secondary Prompts: $PS2, $PS3, $PS4
    16.13 Synchronizing Shell History Between Sessions 
    16.14 Setting Shell History Options 
    16.15 Creating a Better cd Command 
    16.16 Creating and Changing Into a New Directory in One Step
    16.17 Getting to the Bottom of Things 
    16.18 Adding New Features to bash Using Loadable Builtins 
    16.19 Improving Programmable Completion
    16.20 Using Initialization Files Correctly
    16.21 Creating Self-Containing, Portable rc Files 
    16.22 Getting Started with a Custom Configuration


17 Housekeeping and Adminstrative Tasks 
    17.1 Renaming Many Files 
    17.2 Using GNU Texinfo and info on Linux
    17.3 Unzipping Many ZIP Files 
    17.4 Recovering Disconnected Sessions Using screen 
    17.5 Sharing a Single bash Session 
    17.6 Logging an Entire Session or Batch Job 
    17.7 Clearing the Screen When You Log Out 
    17.8 Capturing File Metadata for Recovery
    17.9 Creating an Index of Many Files 
    17.10 Using diff and patch
    17.11 Counting Differences in Files 
    17.12 Removing or Renaming Files Named with Special Characters 
    17.13 Prepending Data to a File 
    17.14 Editing a File in Place 
    17.15 Using sudo on a Group of Commands
    17.16 Finding Lines That Appear in One File by Not in Another 
    17.17 Keeping the Most Recent N Objects 
    17.18 Writing to a Circirlar Log 
    17.19 Circirlar Backups 
    17.20 Grepping ps Output Without Also Getting the grep Process Itself
    17.21 Finding Out Whether a Process Is Running 
    17.22 Adding a Prefix or Suffix to Output 
    17.23 Numbering Lines 
    17.24 Writing Sequences 
    17.25 Emulating the DOS Pause Command 
    17.26 Commifying Numbers 
 

18 Working Faster by Typing Less 
    18.1 Moving Quickly Among Arbitrary Directories
    18.2 Repeating the Last Command
    18.3 Running Almost the Same Command
    18.4 Quick Substitution 
    18.5 Reusing Arguments 
    18.6 Finishing Names for You 
    18.7 Playing It Safe
    18.8 Big Changes, More Lines 


19 Tips and Traps: Common Goofs for Novices 
    19.1 Forgetting to Set Execute Permissions 
    19.2 Fixing "No such file or directory" Errors
    19.3 Forgetting That the Current Directory Is Not in the $PATH
    19.4 Naming Your Script "test"
    19.5 Expecting to Change Exported Variables 
    19.6 Forgetting Quotes Leads to "command not found" on Assignments 
    19.7 Forgetting that Pattern Matching Alphabetizes
    19.8 Forgetting that Pipelines Make Subshells 
    19.9 Making Your Terminal Sane Again 
    19.10 Deleting Files Using an Empty Variable 
    19.11 Seeing Odd Behavior from printf
    19.12 Testing bash Script Syntax
    19.13 Debugging Scripts 
    19.14 Avoiding "command not found" When Using Functions 
    19.15 Confusing Shell Wildcards and Regular Expressions 


Appenix A Reference Lists 

Appenix B Examples Included with bash 

Appenix C Command-Line Processing

Appenix D  Revision Control 

Appenix E Building bash from Source 


===============================================================================================
========================================NOTES==================================================

CONTENTS
BOOK Bash Cookbook
CHAPTER: 1 Beginning Bash
    1.1 Why bash?
    1.2 The bash Shell 
    1.3 Decoding the Prompt
    1.4 Showing Where You Are 
    1.5 Finding and Running Commands 

        bash 
        exit
        pwd -L
        pwd -P

        type which
        type help
        info which 
        info help
        q 

        apropos music 
        man -k music 

        locate apropos
        man -k locate 

        man ls
        man which 
        man locate
        man apropos
        man find

        See Also 
        see Recipe 4.1 Running Any Executable
        see Recipe 14.3 Setting a Secure $PATH 
        see Recipe 14.10 Adding the Current Directory to the $PATH


    1.6 Getting Information About Files 

        touch /tmp/sample_file 
        ls /tmp/sample_file
        ls -l temp.py 
        stat temp.py
        file temp.py
        file -b temp.py 
        ls -l 
        ls -a           # may be to noisy (b/c gives everything hidden, not hidden)
        ls -A           # gives all files 
        ls -F 
        ls -l 
        ls -r 
        ls -R 
        ls -S 
        ls -1
        ls -1 temp.py 

        See Also 
        man ls 
        man stat 
        man file 
        man find 
        Chapter 9


    1.7 Showing All Hidden (Dot) Files in the Current Directory

        ls -d 
        ls -d .*
        ls -d .[]*
        ls -d .[!.]*
        ls -d .*/
        ls -d .
        ls -d .*
        ls -d .*/
        ls -d .v*       # show any .v without listing directories
        ls -d .v*/      # show any .v for ony directories that match the pattern
        .vim//          # this is output showing YES alias so use this to avoid any allias:
      # \ls -d .*/      # code statement
        .vim/           # this is output showing NO alias


        *               # matches the string
        ?               # matches the character        
        []              # denotes a list of characters
        !.              # negates the dot
        ^.              # also negates the character but ! is specified in the 
                        # POSIX standard thus more portable

        .[!.]*          # filename expansion pattern looking for dot 
                        # followed by any character not a dot followed by any character 
        ls .??*         # to match anything with a dot that is also at least 3 characters long
        
        echo            # use ls or echo


    1.8 Using Shell Quoting 
        # need a Rule of Thumb for using command-line quoting
        # Solution enclose a string in single quotes unless it contains elements your want
        # the shell to interpolate

        echo A coffee is $5?!           # $5 is treated as a variable to expand
        echo "A coffee is $5?!"         # ! is treated as history substition 
        echo 'A coffee is $5?!'         # works normally

        echo 'A coffee is $5?!' "$USER" '?!!!!'
        echo "A coffee is \$5 for $USER"
        echo "A coffee is \$5 for $USER WHAT IS GOING ON HERE??????"
        echo "A coffee is \$5 for $USER WHAT IS GOING ON HERE???\??"

        echo "$USER"
        echo "$USER won't pay $5 for coffee"        # WRONG
        echo "$USER won't pay \$5 for coffee"       # Works
        echo '$USER won'\''t pay $5 for coffee'     # WRONG b/c user is not listed correctly
        echo "$USER won'\''t pay $5 for coffee"     # Works 


    1.9 Using or Replacing Builtins and External Commands 
        # need to replace builtin command with your own function or external commans
        # and need to know exactly what your script is executing (eg /bin/echo or builtin echo)?
        # or you have created a new command that directly conflicts with existing external or
        # builting command. What to do?

        # use the type and which commands to see if a given command exists and whether it is
        # builtin or external

        # external command = external file launched by the shell
        enable -a           # lists all builtins

                    Atuls-MacBook-Pro:python_crashcourse atulgolhar$ enable -a
                    enable .
                    enable :
                    enable [
                    enable alias
                    enable bg
                    enable bind
                    enable break
                    enable builtin
                    enable caller
                    enable cd
                    enable command
                    enable compgen
                    enable complete
                    enable continue
                    enable declare
                    enable dirs
                    enable disown
                    enable echo
                    enable enable
                    enable eval
                    enable exec
                    enable exit
                    enable export
                    enable false
                    enable fc
                    enable fg
                    enable getopts
                    enable hash
                    enable help
                    enable history
                    enable jobs
                    enable kill
                    enable let
                    enable local
                    enable logout
                    enable popd
                    enable printf
                    enable pushd
                    enable pwd
                    enable read
                    enable readonly
                    enable return
                    enable set
                    enable shift
                    enable shopt
                    enable source
                    enable suspend
                    enable test
                    enable times
                    enable trap
                    enable true
                    enable type
                    enable typeset
                    enable ulimit
                    enable umask
                    enable unalias
                    enable unset
                    enable wait


        help help

        # when you need to redefine a builtin you use the builtin command to avoid loops
        # for example, we can define a shell function (see Recipe 10.4) to change how the 
        # cd command works:

            cd () {
                builtin cd "$@"
                echo "$OLDPWD --> $PWD"
            }


        enable -n       # to force use to an external command
                        # turns off shell builtins

        command         # ignores shell functions
                        # for example, use test found in $PATH instead of the builtin shell version
                        # so type
        
        enable -n test      # turns off builtin test command
        run test            # will show 
                            Atuls-MacBook-Pro:bash_cookbook atulgolhar$ enable -n test
                            Atuls-MacBook-Pro:bash_cookbook atulgolhar$ run test
                            -bash: run: command not found


        see also
        man which
        help help
        help builtin
        help command 
        help enable 
        help type 



    1.10 Determining if You are Running Interactively 
    1.11 Setting bash as Your Default Shell 
    1.12 Keeping bash Updated 
    1.13 Getting bash for Linux
    1.14 Getting bash for xBSD 
    1.15 Getting bash for macOS
    1.16 Getting bash for Unix
    1.17 Getting bash for Windows 
    1.18 Getting bash Without Getting bash 
    1.19 Learning More About bash Documentation


CHAPTER: 2 Standard Output
    2.1 Writing Output to the Terminal/Window
    2.2 Writng Output But Preserving Spacing 
    2.3 Writng Output with More Formatting Control
    2.4 Writng Output Without the Newline 
    2.5 Saving Output from a Command 
    2.6 Saving Output to Other Files 
    2.7 Saving Output from the ls Command 
    2.8 Sending Output and Error Messages to Different Files 
    2.9 Sending Output and Error Messages to the Same File 
    2.10 Appending Rather than Clobbering Output 
    2.11 Using Just the Beginning or End of a File 
    2.12 Skipping a Header in a File 
    2.13 Throwing Output Away
    2.14 Saving or Grouping Output from Several Commands
    2.15 Connecting Two Programs by Using Output as Input 
    2.16 Saving a Copy of Output Even While Using It as Input
    2.17 Connecting Two Programs by Using Output as Arguments 
    2.18 Using Multiple Redirects on One Line 
    2.19 Saving Output When Redirect Does Not Seem to Work 
    2.20 Swapping STDERR and STDOUT 
    2.21 Keeping Files Safe from Accidental Overwriting 
    2.22 Clobbering a File on Purpose


CHAPTER: 3 Standard Input
    3.1 Getting Input from a File 
    3.2 Keeping Your Data with Your Script
    3.3 Preventing Weird Behavior in a Here-Document 
    3.4 Indenting Here-Documents
    3.5 Getting User Input 
    3.6 Getting Yes or No Input 
    3.7 Selecting from a List of Options 
    3.8 Promopting for a Password 


CHAPTER: 4 Executing Commands
    4.1 Running Any Executable 
    4.2 Running Several Commands in Sequence
    4.3 Running Several Commands All at Once
    4.4 Telling Whether a Command Succeeded or Not 
    4.5 Running a Command Only if Another Command Succeeded
    4.6 Using Fewer if Statements
    4.7 Running Long Jobs Unattended
    4.8 Displaying Error Messages When Failure Occur
    4.9 Running Comamnds from a Variable 
    4.10 Running All Scripts in a Directory


CHAPTER: 5 Basic Scripting: Shell Variables 
    5.1 Documenting Your Script 
    5.2 Embedding Documentation in Shell Scripts
    5.3 Promoting Script Readability 
    5.4 Separating Variable Names from Surrounding Text
    5.5 Exporting Variables 
    5.6 Seeing All Variable Values 
    5.7 Using Parameters in a Shell Script 
    5.8 Looping Over Arguments Passed to a Script 
    5.9 Handling Parameters with Spaces 
    5.10 Handling Lists of Parameters with Spaces
    5.11 Counting Arguments
    5.12 Consuming Arguments
    5.13 Getting Default Values 
    5.14 Settin Default Values 
    5.15 Using null as a Valid Default Value
    5.16 Using More than Just a Constant String from Default
    5.17 Giving an Error Message for Unset Parameters
    5.18 Changing Pieces of a String 
    5.19 Getting the Absolute Value of a Number 
    5.20 Using bash for basename
    5.21 Using bach for dirname 
    5.22 Using Alternate Values for Comma Separated Values 
    5.23 Using Array Variables
    5.24 Converting Between Upper- and Lowercase
    5.25 Converting to Camel Case 


CHAPTER: 6 Shell Logic and Arithmetic
    6.1 Doing Arithmetic in Your Shell Script
    6.2 Branching on Conditions 
    6.3 Testing for File Characteristics
    6.4 Testing for More than One Thing
    6.5 Testing for String Characteristics
    6.6 Testing for Equality
    6.7 Testing with Pattern Matches 
    6.8 Testing with Regular Expressions 
    6.9 Changing Behavior with Redirections 
    6.10 Looping for a While 
    6.11 Looping with a read
    6.12 Looping with a Count 
    6.13 Looping with Floating-Point Values 
    6.14 Braching Many Ways 
    6.15 Parsing Command-Line Arguments
    6.16 Creating Simple Menus
    6.17 Changing the Prompt on Simple Menus
    6.18 Creating a Simple RPN Calculator
    6.19 Creating a Command-Line Calculator


CHAPTER: 7 Intermediate Shell Tools 1
    7.1 Shifting Through Files for a String 
    7.2 Gettting Just the Filename from a Search
    7.3 Getting a Simple True/False from a Search
    7.4 Searching for Text While Ignoring Case
    7.5 Doing a Search in a Pipeline
    7.6 Paring Down What the Search Finds
    7.7 Searching with More Complex Patterns
    7.8 Searching for an SSN
    7.9 Grepping Compressed Files 
    7.10 Keeping Some Output, Discarding the Rest 
    7.11 Keeping Only a Portion of a Line of Output 
    7.12 Reversing the Words on Each Line 
    7.13 Summing a List of Numbers 
    7.14 Counting String Values with awk 
    7.15 Counting String Values with bash 
    7.16 Showing Data as a Quick and Easy Histogram
    7.17 An Easy Histogram with bash 
    7.18 Showing a Paragraph of Text After a Found Phrase


CHAPTER: 8 Intermediate Shell Tools 2
    8.1 Sorting Your Output
    8.2 Sorting Numbers
    8.3 Sorting IP Addresses
    8.4 Cutting Out Parts of Your Output
    8.5 Removing Duplicate Lines 
    8.6 Compressing Files 
    8.7 Uncompressing Files
    8.8 Checking a tar Archive for Unique Directories
    8.9 Translating Characters
    8.10 Converting Uppercase to Lowercase 
    8.11 Converting DOS Files to Linux Format 
    8.12 Removing Smart Quotes
    8.13 Counting Lines, Words, or Characters in a File 
    8.14 Rewrapping Paragraphs
    8.15 Doing More with less


CHAPTER: 9 Finding Files: find, locate, slocate
    9.1 Finding All Your MPP3 Files 
    9.2 Handling Filenames Containing Odd Characters
    9.3 Speeding Up Operations on Found Files
    9.4 Finding Files Across Symbolic Links 
    9.5 Finding Files Irrespective of Case
    9.6 Finding Files by Date
    9.7 Finding Files by Type 
    9.8 Finding Files by Size 
    9.9 Finding Files by Content 
    9.10 Finding Existing Files and Content Fast 
    9.11 Finding a File Using a List of Possible Locations


CHAPTER: 10 Additional Features for Scripting
    10.1 "Daemon-izing" Your Script 
    10.2 Reusing Code with Includes and Sourcing
    10.3 Using Configuration Files in a Script 
    10.4 Defining Functions 
    10.5 Using Functions: Parameters and Return Values
    10.6 Trapping Interrupts 
    10.7 Redefining Comamnds with alias
    10.8 Avoiding Aliases and Functions 
    10.9 Counting Elapsed Time 
    10.10 Writing Wrappers 


CHAPTER: 11 Working with Dates and Times
    11.1 Formating Dates for Display 
    11.2 Supplying a Default Date 
    11.3 Automating Date Ranges
    11.4 Converting Dates and Times to Epoch Seconds 
    11.5 Converting Epoch Seconds to Dates and Times 
    11.6 Getting Yesterday or Tomorrow with Perl 
    11.7 Figuring Out Date and Time Arithmetic
    11.8 Handling Time Zones, Daylight Saving Time, and Leap Years 
    11.9 Using date and cron to Run a Script on the Nth Day 
    11.10 Logging with Dates


CHAPTER: 12 End-User Tasks as Shell Scripts
    12.1 Starting Simple by Printing Dashes 
    12.2 Viewing Photos in an Album
    12.3 Loading Your MP3 Player 
    12.4 Burning a CD
    12.5 Comparing Two Documents 


CHAPTER: 13 Parsing and Similiar Tasks
    13.1 Parsing Arguments for Your Shell Script 
    13.2 Parsing Arguments with Your Own Error Messages 
    13.3 Parsing Some HTML 
    13.4 Parsing Output into an Array
    13.5 Parsing Output with a Function Call 
    13.6 Parsing Text with a read Statement
    13.7 Parsing with read into an Array 
    13.8 Reading an Entire File 
    13.9 Getting Your Plurals Right
    13.10 Taking It One Character at a Time 
    13.11 Cleaning Up an SVN Source Tree 
    13.12 Setting Up a Database with MySQL
    13.13 Isolating Specific Fields in Data 
    13.14 Updating Specific Fields in Datafiles 
    13.15 Trimming Whitespace 
    13.16 Compressing Whitespace
    13.17 Processing Fixed-Length Records
    13.18 Processing Files with No Line Breaks
    13.19 Converting a Datafile to CSV 
    13.20 Parsing a CSV Datafile 

    
CHAPTER: 14 Writing Secure Shell Scripts
    14.1 Avoiding Common Security Problems 
    14.2 Avoiding Interpreter Spoofing 
    14.3 Setting a Secure $PATH 
    14.4 Clearing All Aliases
    14.5 Clearing the Command Hash 
    14.6 Preventing Core Dumps 
    14.7 Setting a Secure $IFS
    14.8 Setting a Secure umask 
    14.9 Finding World-Writable Directories in Your $PATH 
    14.10 Adding the Current Directory to the $PATH 
    14.11 Using Secure Temporary Files 
    14.12 Validating Input 
    14.13 Setting Permissions 
    14.14 Leaking Passwords into the Process List 
    14.15 Writing setuid or setgid Scripts 
    14.16 Restricting Guest Users
    14.17 Using chroot Jails
    14.18 Running as a Non-root User 
    14.19 Using sudo More Securely 
    14.20 Using Passwords in Scripts 
    14.21 Using SSH Without a Password
    14.22 Restricting SSH Commands
    14.23 Disconnecting Inactive Sessions 



CHAPTER: 15 Advanced Scripting
    15.1 Finding bash Portably for #!
    15.2 Setting a POSIX $PATH 
    15.3 Developing Portable Shell Scripts
    15.4 Testing Scripts Using Virtual Machines 
    15.5 Using for Loops Portably
    15.6 Using echo Portably
    15.7 Splitting Output Only When Necessary 
    15.8 Viewing Output in Hex
    15.9 Using bash Net-Redirection 
    15.10 Finding My IP Address 
    15.11 Getting Input from Another Machine 
    15.12 Redirecting Output for the Life of a Script 
    15.13 Working Around "Argument list too long" Errors
    15.14 Logging to syslog from Your Script 
    15.15 Using logger Correctly 
    15.16 Sending Email from Your Script 
    15.17 Automating a Process Using Phases 
    15.18 Doing Two Things at Once 
    15.19 Running an SSH command on multiple hosts 



CHAPTER: 16 Configuring and Customizing bash 
    16.1 bash Startup Options 
    16.2 Customizing Your Prompt
    16.3 A Prompt Before Your Program Runs 
    16.4 Changing Your $PATH Permanently
    16.5 Changing Your $PATH Temporarily
    16.6 Setting Your $CDPATH
    16.7 When Programs Are Not Found 
    16.8 Shortening or Changing Command Names 
    16.9 Adjusting Shell Behavior and Environment 
    16.10 Adjusting readline Behavior Using .inputrc
    16.11 Keeping a Private Stash of Utilities by Adding ~/bin
    16.12 Using Secondary Prompts: $PS2, $PS3, $PS4
    16.13 Synchronizing Shell History Between Sessions 
    16.14 Setting Shell History Options 
    16.15 Creating a Better cd Command 
    16.16 Creating and Changing Into a New Directory
    16.17 Getting to the Bottom of Things
    16.18 Adding New Features to bash Using Loadable Builtins 
    16.19 Improving Prgrammable Completion 
    16.20 Using Initialization Files Correctly
    16.21 Creating Self-Contained, Portable rc Files 
    16.22 Getting Started with a Custom Configuration



CHAPTER: 17 Housekeeping and Administrative Tasks
    17.1 Renaming Many Files 
    17.2 Using GNU Texinfo and info on Linux
    17.3 Unzipping Many ZIP Files 
    17.4 Recovering Disconnected Sessions Using screen 
    17.5 Sharing a Single bash Session 
    17.6 Logging an Entire Session or Batch Job 
    17.7 Clearing the Screen When You Log Out 
    17.8 Capturing File Metadata for Recovery 
    17.9 Creating an Index of Many Files 
    17.10 Using diff and patch 
    17.11 Counting Differences in Files 
    17.12 Removing or Renaming Files Named with Special Characters
    17.13 Prepending Data to a File 
    17.14 Editing a File in Place 
    17.15 Using sudo on a Group of Commands
    17.16 Finding Lines That Appear in One File but Not in Another 
    17.17 Keeping the Most Recent N Objects 
    17.18 Writing to a Circular Log
    17.19 Circular Backups 
    17.20 Grepping ps Output Without Also Getting the grep Process Itself 
    17.21 Finding Out Whether a Process Is Running 
    17.22 Adding a Prefix or Suffix to Output 
    17.23 Numbering Lines 
    17.24 Writing Sequences 
    17.25 Emulating the DOS Pause Command 
    17.26 Commifying Numbers 



CHAPTER: 18 Working Faster by Typing Less
    18.1 Moving Quickly Among Arbitrary Directories 
    18.2 Repeating the Last Command 
    18.3 Running Almost the Same Command 
    18.4 Quick Substitution
    18.5 Reusing Arguments
    18.6 Finishing Names for You 
    18.7 Playing It Safe
    18.8 Big Changes, More Lines 



CHAPTER: 19 Tips and Traps: Common Goofs for Novices
    19.1 Forgetting to Set Execute Permissions
    19.2 Fixing "No such file or directory" Errors 
    19.3 Forgetting That the Current Directory Is Not in the $PATH 
    19.4 Naming Your Script "test"
    19.5 Expecting to Change Exported Variables 
    19.6 Forgetting Quotes Leads to "command not found" on Assignments
    19.7 Forgetting that Pattern Matching Alphabetizes
    19.8 Forgetting that Pipelines Make Subshells
    19.9 Making Your Termainal Sane Again 
    19.10 Deleting Files Using an Empty Variable 
    19.11 Seeing Odd Behavior from printf 
    19.12 Testing bash Script Syntax
    19.13 Debugging Scripts
    19.14 Avoiding "command not found" When Using Functions
    19.15 Confusing Shell Wildcards and Regular Expressions 










===============================================================================================
===============================================================================================
===============================================================================================
===============================================================================================
===============================================================================================
===============================================================================================
===============================================================================================
===============================================================================================
===============================================================================================
===============================================================================================
# Learning the Unix Operating System 4th Ed Jerry Peek 1998

CONTENTS
BOOK Learning the UNIX Operating System
CHAPTER: 1 Getting Started 
CHAPTER: 2 Using Window Systems 
CHAPTER: 3 Your UNIX Account 
CHAPTER: 4 File Management 
CHAPTER: 5 Redirecting I/O
CHAPTER: 6 Multitasking 
CHAPTER: 7 Where To Go From Here 
Reading List 
Reference 



CHAPTER: 1 Getting Started 
    Woring the in the UNIX Environment
    Syntax of UNIX Command Lines 
    Types of Commands 
    The Unresponsive Terminal 

CHAPTER: 2 Using Window Systems 
    Introduction to Windowing     
    Starting X 
    Running Programs 
    Working with a Mouse 
    Working with Windows 
    Other X Clients 
    Quittting

CHAPTER: 3 Your UNIX Account 
    The UNIX Filesystem 
    Looking Inside Files 
    Protecting and Sharing Files 
    Electronic Mail 
    Changing Your Password 
    Customizing Your Account 

CHAPTER: 4 File Management 
    Methods of Creating Files 
    File and Directory Names 
    File and Directory Wildcards 
    Managing Your Files
    Printing Files 

CHAPTER: 5 Redirecting I/O
    Standard Input and Standard Output 
    Pipes and Filters 
    
CHAPTER: 6 Multitasking 
    Running a Command in the Background 
    Checking on a Process
    Cancelling a Process

CHAPTER: 7 Where To Go From Here 
    Standard UNIX Documentation 
    Shell Aliases and Functions 
    Programming 


===============================================================================================
===============================================================================================
# Learning the Unix Operating System 4th Ed Jerry Peek 1998

$ xinit

        xinit: XFree86_VT property unexpectedly has 0 items instead of 1
        xinit: connection to X server lost

        waiting for X server to shut down 
Atuls-MacBook-Pro:~ atulgolhar$ x xcalc &
[1] 2499
Atuls-MacBook-Pro:~ atulgolhar$ x xcalc &
[2] 2568
[1]   Exit 1                  x xcalc
Atuls-MacBook-Pro:~ atulgolhar$ 

$ cd        # takes you to your home directory no matter where you are
===============================================================================================







